<?xml version="1.0" encoding="UTF-8"?>
<rss><channel xmlns:wp="http://wordpress.org/export/1.0/" xmlns:dsq="http://www.disqus.com/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/"><item><title>re: Stripping control characters in Python</title><link>http://chase-seibert.github.com/blog/2011/05/20/stripping-control-characters-in-python</link><content:encoded><![CDATA[&lt;p&gt;
Want to remove ASCII control characters from a string? Have Unicode control characters that can't be encoded into XML? Here is how to strip them with regex in Python.
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
def strip_control_characters(input):
    
    if input:
            
        import re
        
        # unicode invalid characters
        RE_XML_ILLEGAL = u'([\u0000-\u0008\u000b-\u000c\u000e-\u001f\ufffe-\uffff])' + \
                         u'|' + \
                         u'([%s-%s][^%s-%s])|([^%s-%s][%s-%s])|([%s-%s]$)|(^[%s-%s])' % \
                          (unichr(0xd800),unichr(0xdbff),unichr(0xdc00),unichr(0xdfff),
                           unichr(0xd800),unichr(0xdbff),unichr(0xdc00),unichr(0xdfff),
                           unichr(0xd800),unichr(0xdbff),unichr(0xdc00),unichr(0xdfff),
                           )
        input = re.sub(RE_XML_ILLEGAL, "", input)
                        
        # ascii control characters
        input = re.sub(r"[\x01-\x1F\x7F]", "", input)
            
    return input
&lt;/pre&gt;

&lt;p&gt;
Unicode section adapted from &lt;a href="http://maxharp3r.wordpress.com/2008/05/15/pythons-minidom-xml-and-illegal-unicode-characters/"&gt;Max Harper&lt;/a&gt;.
&lt;/p&gt;]]></content:encoded><dsq:thread_identifier>/blog/2011/05/20/stripping-control-characters-in-python</dsq:thread_identifier><wp:post_date_gmt>2011-05-20 13:28:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>0</wp:comment_id><wp:comment_author>Bryan</wp:comment_author><wp:comment_date_gmt>2011-08-08 15:46:24</wp:comment_date_gmt><wp:comment_content>You sir are a life saver. Thank you</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>1</wp:comment_id><wp:comment_author>trokster</wp:comment_author><wp:comment_date_gmt>2011-10-25 12:32:08</wp:comment_date_gmt><wp:comment_content>Ditto :)</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Django zip files (create dynamic in-memory archives with Python's zipfile)</title><link>http://chase-seibert.github.com/blog/2010/07/23/django-zip-files-create-dynamic-in-memory-archives-with-pythons-zipfile</link><content:encoded><![CDATA[&lt;p&gt;
Usually, Django should not be used to serve static files.
&lt;/p&gt;

&lt;blockquote&gt;
The reasoning here is that standard Web servers, such as Apache, lighttpd and Cherokee, are much more fine-tuned at serving static files than a Web application framework.
   - &lt;a href="http://docs.djangoproject.com/en/dev/howto/static-files/"&gt;Django documentation&lt;/a&gt;
&lt;/blockquote&gt;

&lt;p&gt;
However, dynamic files are a different story. Say you want to wrap more than one file being generated on the fly from a form POST. In my case, I wanted to let the user download a zip archive of a few generated reports.
&lt;/p&gt;

&lt;p&gt;
Using Python's &lt;a href="http://docs.python.org/library/zipfile.html"&gt;zipfile&lt;/a&gt; it's easy to create the archive in-memory, without writing to disk. Then, serving that file as a zip content-type is easy in Django.
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;

from StringIO import StringIO
from zipfile import ZipFile
from django.http import HttpResponse

def download(request, company_id):     
    
    in_memory = StringIO()
    zip = ZipFile(in_memory, "a")
        
    zip.writestr("file1.txt", "some text contents")
    zip.writestr("file2.csv", "csv,data,here")
    
    # fix for Linux zip files read in Windows
    for file in zip.filelist:
        file.create_system = 0    
        
    zip.close()

    response = HttpResponse(mimetype="application/zip")
    response["Content-Disposition"] = "attachment; filename=two_files.zip"
    
    in_memory.seek(0)    
    response.write(in_memory.read())
    
    return response

&lt;/pre&gt;]]></content:encoded><dsq:thread_identifier>/blog/2010/07/23/django-zip-files-create-dynamic-in-memory-archives-with-pythons-zipfile</dsq:thread_identifier><wp:post_date_gmt>2010-07-23 14:08:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>2</wp:comment_id><wp:comment_author>Super</wp:comment_author><wp:comment_date_gmt>2011-04-01 05:23:25</wp:comment_date_gmt><wp:comment_content>Awesome. This solved my problem. Django&amp;#39;s documentation tells you to pass data like HttpResponse(data, mimetype=mimetype), but with that i kept generating a corrupted zip says windows. Cheers.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>3</wp:comment_id><wp:comment_author>VatsaV</wp:comment_author><wp:comment_date_gmt>2011-07-28 19:54:23</wp:comment_date_gmt><wp:comment_content>Awesome, works like a charm. I struggled for 2 hours and then I found this post. Looking at the above code, I fixed the bugs in my code.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>4</wp:comment_id><wp:comment_author>clyde</wp:comment_author><wp:comment_date_gmt>2011-09-05 08:00:34</wp:comment_date_gmt><wp:comment_content>This works, very easy. But how will I save files coming from a database?</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>5</wp:comment_id><wp:comment_author>mspace</wp:comment_author><wp:comment_date_gmt>2012-03-16 06:10:53</wp:comment_date_gmt><wp:comment_content>This is just great, solved my problem too. Thank you.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>6</wp:comment_id><wp:comment_author>Unknown</wp:comment_author><wp:comment_date_gmt>2012-03-16 06:12:16</wp:comment_date_gmt><wp:comment_content>This solved my problem too, thank you.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: How to not get caught in spam filters</title><link>http://chase-seibert.github.com/blog/2010/03/19/how-to-not-get-caught-in-spam-filters</link><content:encoded><![CDATA[&lt;p&gt;
Reliably sending email without getting caught in spam filters is a full-time job, for someone. Surely not for an end-user, but for every end-user email, there is an administrator somewhere who has to deal with daily occurrences of some user message not getting through because it got stuck in a spam filter on the other end.
&lt;/p&gt;

&lt;p&gt;
At the enterprise level, this could easily be several people's full-time jobs. Spam filtering is constantly evolving. This is partly due to new spam filtering initiatives that require administrators to configure something new, such as SPF or DKIM. A few years ago, SPF didn't exist. Now, anyone who sends lots of email virtually has to implement it. It's also partly due to other administrators; sometimes you just have to get on the phone with the recipient's admin to  figure out what's going wrong.
&lt;/p&gt;

&lt;p&gt;
This guide is not for those enterprise admins. It's for the hapless developers pressed into Postfix config duty for a small start-up, or for the first time admin just getting into outbound mail. What follows is a quick and dirty guide to making sure 99% of your email is delivered.
&lt;/p&gt;

&lt;h4&gt;
Make sure you're not on a DNS blacklist (aka RBL: Reverse Blacklist)
&lt;/h4&gt;

&lt;p&gt;
By far the most frequently used type of spam filter is the DNS blacklist. There are hundreds of free services out there that keep records of IP addresses they think send a lot of spam. Virtually every spam filtering product on the market comes pre-configured to look at a few of these every time they get a new connection. It's fast due to extremely low over-head (DNS scales, baby), and relatively accurate.
&lt;/p&gt;

&lt;p&gt;
You will need to know &lt;a href="http://www.whatismyip.com/"&gt;what IP you're sending from&lt;/a&gt;. You can check many blacklists at once via &lt;a href="http://www.dnsbl.info/dnsbl-database-check.php"&gt;various&lt;/a&gt; &lt;a href="http://www.mxtoolbox.com/SuperTool.aspx"&gt;different&lt;/a&gt; &lt;a href="http://www.anti-abuse.org/"&gt;sites&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
If you are on a blacklist, you might be wondering how to get off it, and how you got on in the first place. Unfortunately, there is no single answer. Each blacklist has its own criteria for who it lists, and has its own process for removal. Indeed, many lists don't allow removal at all. It's the wild-west out there. If you find yourself unable to be removed from a popular blacklist, you may have no choice but to buy another IP address. Just make sure it's clean first!
&lt;/p&gt;

&lt;p&gt;
Some people think blacklists are the devil. If you have ever found yourself at the mercy of a popular, but totally non-responsive blacklist, you might agree. But in general, the problem is that some administrators outright block email that matches a single blacklist. If you're an inbound admin, don't do that! You want to weigh many factors, and multiple blacklists, before you decide to reject a message. Regardless, they are a reality of the modern Internet you need to just deal with.
&lt;/p&gt;

&lt;h4&gt;
Make sure you're not an open relay
&lt;/h4&gt;

&lt;p&gt;
If you want to STAY off blacklists, you at the very least need to make sure you're not an &lt;a href="http://en.wikipedia.org/wiki/Open_mail_relay"&gt;open relay&lt;/a&gt;. Basically, you should not accept and definitely not send out any mail that's not destined for a domain you actually own. Testing can be done via telnet, or via a &lt;a href="http://www.abuse.net/relay.html"&gt;web-based tool&lt;/a&gt;. 
&lt;/p&gt;

&lt;h4&gt;
Reverse DNS (aka PTR records)
&lt;/h4&gt;

&lt;p&gt;
Another very common check is whether your IP address is named, or unnamed. The idea here is that dynamic IPs, such as those given to home users by their ISP, generally don't need to have names associated with them. A lot of spam these days comes from &lt;a href="http://en.wikipedia.org/wiki/Zombie_computer"&gt;zombied home machines&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
This is a simple DNS fix. You just need to create an &lt;a href="http://en.wikipedia.org/wiki/Reverse_DNS_lookup"&gt;PTR record&lt;/a&gt; for that IP address. You can check if your PTR is setup correctly with the following command.
&lt;/p&gt;

&lt;pre name="code" class="bash"&gt;
dig -x MY_IP_ADDRESS
&lt;/pre&gt;

&lt;h4&gt;
MX Records, postmaster, root &amp; abuse
&lt;/h4&gt;

&lt;p&gt;
While the &lt;a href="http://www.faqs.org/rfcs/rfc2821.html"&gt;standards RFCs&lt;/a&gt; don't require you to receive mail just because you're sending mail, in reality many anti-spam systems are biased against message from a domain that does not also accept mail. You don't have to send and receive from the same server(s), but if you're sending mail from @example.com, it's a good idea to make sure some real human somewhere is getting any messages sent to postmaster@example.com, root@example.com and abuse@example.com.
&lt;/p&gt;

&lt;p&gt;
Postmaster IS strictly required by the RFC. Root is a legacy version of postmaster. Abuse is a relatively new "standard" that many administrators would try first to resolve a spam issue.
&lt;/p&gt;

&lt;p&gt;
Inbound email is a whole other subject. But the basic gist is that you need an &lt;a href="http://en.wikipedia.org/wiki/MX_record"&gt;MX record&lt;/a&gt; for example.com, and it needs to point to a server that can accept mail for example.com. If you don't have an existing inbound server, or don't want to run your own, many &lt;a href="http://www.google.com/apps/intl/en/business/index.html"&gt;hosted alternatives&lt;/a&gt; exists. 
&lt;/p&gt;

&lt;p&gt;
You should explicitly test postmaster, root &amp; abuse manually via your regular email client to make sure they actually work.
&lt;/p&gt;

&lt;h4&gt;
HELO, I'm your mail server
&lt;/h4&gt;

&lt;p&gt;
Mail servers communicate via a protocol called SMTP. It's actually a plain-text protocol, which you can easily &lt;a href="http://www.anta.net/misc/telnet-troubleshooting/smtp.shtml"&gt;emulate via telnet&lt;/a&gt;. The very first line of a SMTP handshake is the "HELO" command, where the sending server identifies itself. A typical example would be "HELO example.com", meaning, "Hi, I'm the mail server for example.com".
&lt;/p&gt;

&lt;p&gt;
Many spammers set this to a bogus value, or try to use the recipient's host name or IP address, which is nonsensical. In any case, the correct thing to do is for you to set it to your domain. 
&lt;/p&gt;

&lt;p&gt;
How you set this will vary by mailserver. In Postfix, it's the myhostname parameter in /etc/postfix/main.cf. Checking it is easy; just send a message through the server, and look at the headers on the remote end. Your hostname will show up on the first "Received" header line:
&lt;/p&gt;

&lt;pre name="code" class="bash"&gt;
Received: by example.com (Postfix, from userid 0)
 id A72979E4144; Thu, 18 Mar 2010 23:00:01 -0400 (EDT)
&lt;/pre&gt;

&lt;h4&gt;
SPF/DKIM
&lt;/h4&gt;

&lt;p&gt;
&lt;a href="http://en.wikipedia.org/wiki/Sender_Policy_Framework"&gt;SPF&lt;/a&gt; and &lt;a href="http://en.wikipedia.org/wiki/DomainKeys"&gt;DKIM&lt;/a&gt; are newer standards that are slowly gaining popularity. The basic idea is that your DNS records can encode a list of rules about what IP addresses are allowed to send mail for your domain. It's a whitelist, versus a blacklist. Typically, you can ignore these unless you're sending a large volume of mail.
&lt;/p&gt;


&lt;h4&gt;
Monitoring
&lt;/h4&gt;

&lt;p&gt;
That just about covers anti-anti-spam 101. As mentioned, this will likely be an ongoing effort, and you need to keep on top of how it's going. Ideally, there would be an administrator who would be alerted if emails are bouncing due to spam filters. For postfix, I would recommend &lt;a href="http://linux.die.net/man/1/pflogsumm"&gt;pflogsumm&lt;/a&gt;.  
&lt;/p&gt;

&lt;pre name="code" class="bash"&gt;
apt-get install pflogsumm
&lt;/pre&gt;

&lt;pre name="code" class="bash"&gt;
sudo crontab -e
&lt;/pre&gt;

&lt;pre name="code" class="bash"&gt;
...
# every work-day at 11pm
00 23 * * mon-fri cat /var/log/mail.log |/usr/sbin/pflogsumm -d today |mail -s "daily mail log" postmaster@example.com
&lt;/pre&gt;]]></content:encoded><dsq:thread_identifier>/blog/2010/03/19/how-to-not-get-caught-in-spam-filters</dsq:thread_identifier><wp:post_date_gmt>2010-03-19 11:42:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>7</wp:comment_id><wp:comment_author>Matthew</wp:comment_author><wp:comment_date_gmt>2011-02-03 02:22:45</wp:comment_date_gmt><wp:comment_content>Hi Chase,&lt;br /&gt;&lt;br /&gt;I&amp;#39;ve just read some of your post and they are all based from your experience right? I was really impressed on your works especially the tagline of your site &amp;quot;Facts, hacks and attacks from my life as a web application developer&amp;quot; I hope you could share some post why certain websites are being hacked.&lt;br /&gt;&lt;br /&gt;Thanks,&lt;br /&gt;Matt&lt;br /&gt;&lt;a href="http://www.emailreach.com/" rel="nofollow"&gt;Spam Filter Test&lt;/a&gt;</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>8</wp:comment_id><wp:comment_author>Chase Seibert</wp:comment_author><wp:comment_date_gmt>2011-02-03 09:46:55</wp:comment_date_gmt><wp:comment_content>Matt, that tag line is really referring to some of the hacks that I implement in my solutions, as well as some best-practices to mitigate potential attacks against your own stuff.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Youtube: Detecting X-Frame-Options/framebreaking in Python</title><link>http://chase-seibert.github.com/blog/2011/01/21/youtube-detecting-x-frame-optionsframebreaking-in-python</link><content:encoded><![CDATA[&lt;p&gt;
My current project involves URL shortening. Like many URL shorteners, we wanted to get into frame bars. These are alternately called banners, share bars and "eyebrows". It's basically just putting some small content on the top of the screen, and then wrapping the "real" content in an IFRAME that takes the rest of the screen. Maybe you've seen when LinkedIn does this.
&lt;/p&gt;

&lt;img src="http://lh3.ggpht.com/_EE2zVzGv1Ds/TTnNvbKkWfI/AAAAAAAALaM/tk8awd4swmc/s800/linkedin-banner.png"&gt;

&lt;p&gt;
Now, I'm not crazy about the ethics of framing other peoples' content. I'm not even convinced that it would not be ruled illegal some day. In any case, lot's of people are doing it, and we decided we needed to be doing it too. In my case, we're just showing you who shared it, we're not doing ads or anything.
&lt;/p&gt;

&lt;p&gt;
Understandably, many sites don't want you to frame their content. This has lead to a kind of arms race, where content sites use javascript to try to break out of the frame (aka framebreaking), and then the wrapper sites try to &lt;a href="http://stackoverflow.com/questions/958997/frame-buster-buster-buster-code-needed"&gt;break the framebreaker&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
This eventually lead to full-fledged support at the browser level for framebreaking, in the form of the &lt;a href="https://developer.mozilla.org/en/the_x-frame-options_response_header"&gt;X-Frame-Options header&lt;/a&gt;. Essentially, a site can publish this HTTP header on all their content, and most modern browsers will display an error/warning if the content is put into a frame (or, at least a frame on another domain). In Firefox, this looks like the following.
&lt;/p&gt;

&lt;img src="http://lh6.ggpht.com/_EE2zVzGv1Ds/TTnPz7ol06I/AAAAAAAALaU/yqdmzffPmms/s800/x-frame-options.png"&gt;

&lt;p&gt;
This is actually a pretty cool development. However, in order to provide a good user experience when you're frame barring (is that an oxymoron?), you ideally would detect ahead of time whether the site you're framing has this X-Frame-Option set, and just redirect to the content in that case.
&lt;/p&gt;

&lt;p&gt;
Here is some Python code that does just that. It basically just makes an HTTP call to the content server to server.
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
def is_framing_allowed(url)
   request = urllib2.Request(url)
   request.add_header("Referer", "http://example.com") # you should put your real URL here
   opener = urllib2.urlopen(request)
   # returns True if ANY x-frame-options header is present
   # the only options at present are DENY and SAMEORIGIN, either of which means you can't frame
   return "x-frame-options" in opener.headers.dict
&lt;/pre&gt;

&lt;p&gt;
Notice that I'm setting a Referer here. Youtube in particular requires that this be set before it will serve a x-frame-options header:
&lt;/p&gt;

&lt;pre name="code" class="bash"&gt;
curl "http://www.youtube.com/watch?v=kdoCBJe0F3o" -D headers.txt &amp;gt;/dev/null 2&amp;gt;&amp;amp;1; cat headers.txt
HTTP/1.1 200 OK
Date: Fri, 21 Jan 2011 18:35:39 GMT
Server: wiseguy/0.6.7
X-Content-Type-Options: nosniff
Set-Cookie: use_hitbox=72c46ff6cbcdb7c5585c36411b6b334edAEAAAAw; path=/; domain=.youtube.com
Set-Cookie: VISITOR_INFO1_LIVE=nMjwYxkZq0Q; path=/; domain=.youtube.com; expires=Sun, 18-Sep-2011 18:35:39 GMT
Set-Cookie: recently_watched_video_id_list=7291701d6005203af93186bd50b882b5WwEAAABzCwAAAGtkb0NCSmUwRjNv; path=/; domain=.youtube.com
Set-Cookie: GEO=1fe4b343c2bea46a564b0990ff037b32cwsAAAAzVVPRyoNiTTnR+w==; path=/; domain=.youtube.com
Expires: Tue, 27 Apr 1971 19:44:06 EST
Cache-Control: no-cache
Content-Type: text/html; charset=utf-8
Transfer-Encoding: chunked

curl "http://www.youtube.com/watch?v=kdoCBJe0F3o" -e "http://example.com" -D headers.txt &amp;gt;/dev/null 2&amp;gt;&amp;amp;1; cat headers.txt
HTTP/1.1 200 OK
Date: Fri, 21 Jan 2011 18:35:55 GMT
...
X-Frame-Options: SAMEORIGIN
&lt;/pre&gt;]]></content:encoded><dsq:thread_identifier>/blog/2011/01/21/youtube-detecting-x-frame-optionsframebreaking-in-python</dsq:thread_identifier><wp:post_date_gmt>2011-01-21 13:07:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>9</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2011-09-20 05:36:55</wp:comment_date_gmt><wp:comment_content>Thanks a lot!</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Ubuntu Unity: I want my KeePassX panel back!</title><link>http://chase-seibert.github.com/blog/2011/05/13/ubuntu-unity-i-want-my-keepassx-panel-back</link><content:encoded><![CDATA[&lt;p&gt;
Big props to Ubuntu for taking a risk and trying to innovate in the desktop experience arena. Unity is pretty cool, but pretty raw, too. For example, some apps don't yet support the new panel. Even worse, some apps can get stuck in a "headless" mode where you can't access any of their windows due to not having a panel icon.
&lt;/p&gt;

&lt;p&gt;
Here is how to fix that. For a specific app, just add it to the whitelist. Hopefully these apps will be updated soon, making this a temporary fix.
&lt;/p&gt;

&lt;pre name="code" class="bash"&gt;
&amp;gt;gsettings get com.canonical.Unity.Panel systray-whitelist
['JavaEmbeddedFrame', 'Mumble', 'Wine', 'Skype', 'hp-systray', 'scp-dbus-service']

# added keepassx
&amp;gt;gsettings set com.canonical.Unity.Panel systray-whitelist "['JavaEmbeddedFrame', 'Mumble', 'Wine', 'Skype', 'hp-systray', 'scp-dbus-service', 'keepassx']"
&lt;/pre&gt;]]></content:encoded><dsq:thread_identifier>/blog/2011/05/13/ubuntu-unity-i-want-my-keepassx-panel-back</dsq:thread_identifier><wp:post_date_gmt>2011-05-13 22:17:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>10</wp:comment_id><wp:comment_author>Jim Hurne</wp:comment_author><wp:comment_date_gmt>2011-06-20 21:44:40</wp:comment_date_gmt><wp:comment_content>Great little tip! However, the changes won&amp;#39;t take effect until you log out and log back in.&lt;br /&gt;&lt;br /&gt;If you don&amp;#39;t want to keep whitelisting apps, you can also change the value to [&amp;#39;all&amp;#39;]</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>11</wp:comment_id><wp:comment_author>iSingle</wp:comment_author><wp:comment_date_gmt>2011-10-26 23:50:29</wp:comment_date_gmt><wp:comment_content>unity panel doesn&amp;#39;t support double-click action, so if you close keepassx to the tray, you can never get it back. You have to quite and restart keepassX again and again, quite annoying.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>12</wp:comment_id><wp:comment_author>Mekk</wp:comment_author><wp:comment_date_gmt>2011-11-02 16:13:59</wp:comment_date_gmt><wp:comment_content>Disabling &amp;quot;miniize to tray&amp;quot; help somewhat as then after normal minimization keepassx can be redisplayed via unity panel (press Win then pick appropriate number or click keepass icon)&lt;br /&gt;&lt;br /&gt;Still, irritating. Whatever appindicators are good for, I do not understand why couldn&amp;#39;t old panel APIs remain supported.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>13</wp:comment_id><wp:comment_author>Chris</wp:comment_author><wp:comment_date_gmt>2012-03-10 18:09:16</wp:comment_date_gmt><wp:comment_content>Thanks for this tip!  Really helped me out.  I thought I was going to have to give up on Unity entirely (... which I still might do ...)</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Pulling Google Analytics data into Django</title><link>http://chase-seibert.github.com/blog/2010/10/08/pulling-google-analytics-data-into-django</link><content:encoded><![CDATA[&lt;p&gt;
Website analytics tools are expected to do a lot. They need to allow you generate reports on metrics like sessions, pages/time per session, bounce rates, referrals... etc. Not only that, but they need to be able to segment those reports by logged in versus anonymous users, china versus the US, etc...
&lt;/p&gt;

&lt;p&gt;
As a developer, the more you play with existing analytics tools, the more you appreciate not having to implement all this crap yourself. Just recently I was trying to track hits from social networks. My application would blast a tweet out to twitter, and then try to determine how many hits were coming back.
&lt;/p&gt;

&lt;p&gt;
Determining raw hits is easy. But I had no idea how many automated bots would hit the URLS I was posting. I had nearly 1,2000 hits in just 24  hours to the same post! Here is a short list of bot &lt;a href="http://en.wikipedia.org/wiki/User_agent"&gt;user agents&lt;/a&gt; collected in just one day.
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;LinkedInBot&lt;/li&gt;
&lt;li&gt;TwitterJobSearch.com&lt;/li&gt;
&lt;li&gt;PycURL&lt;/li&gt; 
&lt;li&gt;labs.topsy.com&lt;/li&gt;
&lt;li&gt;postrank.com&lt;/li&gt;
&lt;li&gt;voyager/1.0&lt;/li&gt;     
&lt;li&gt;JS-Kit URL Resolver&lt;/li&gt;
&lt;li&gt;Twitterbot&lt;/li&gt;
&lt;li&gt;mxbot&lt;/li&gt;
&lt;li&gt;urllib&lt;/li&gt;
&lt;li&gt;ysearch&lt;/li&gt;
&lt;li&gt;Twingly&lt;/li&gt;
&lt;li&gt;TweetmemeBot&lt;/li&gt;
&lt;li&gt;OneRiot&lt;/li&gt;
&lt;li&gt;Googlebot&lt;/li&gt;
&lt;li&gt;inagist.com&lt;/li&gt;
&lt;li&gt;Jakarta Commons&lt;/li&gt;
&lt;li&gt;facebookexternalhit&lt;/li&gt;
&lt;li&gt;NjuiceBot&lt;/li&gt;
&lt;li&gt;Yahoo! Slurp&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Needless to say, tying to determine "real" hits by user agent was going to be both arduous and error prone.
&lt;/p&gt;

&lt;p&gt;
Enter &lt;a href="http://www.google.com/analytics/"&gt;Google Analytics&lt;/a&gt;, the gold standard of web analytics packages. My marketing department had already requesting we include it into the application anyway.
&lt;/p&gt;

&lt;p&gt;
It works via JavaScript, which is perfect for thwarting bots. The bots in question don't appear to execute JavaScript when they scrape a page, or if they do, Google Analytics is going above and beyond to filter them out.
&lt;/p&gt;

&lt;pre name="code" class="javascript"&gt;
&amp;lt;script type="text/javascript"&amp;gt;

 var _gaq = _gaq || [];
 _gaq.push(['_setAccount', 'UA-XXXXXXX-X']);

 // custom variables
 _gaq.push(['_setCustomVar', 1, 'Current User', 'joe.example', 1]);
 _gaq.push(['_setCustomVar', 2, 'Current User ID', '75', 1]);                               
 _gaq.push(['_setCustomVar', 3, 'Record Owner ID', '101', 3]);
 _gaq.push(['_setCustomVar', 4, 'Record Type', 'Job', 3]);
 _gaq.push(['_setCustomVar', 5, 'Record ID', '87', 3]);
 _gaq.push(['_trackPageview']);

 (function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
 })();

&amp;lt;/script&amp;gt;    
&lt;/pre&gt;

&lt;p&gt;
As you can seen, as long as I was including Google Analytics, I decided to go all out and leverage their &lt;a href="http://code.google.com/apis/analytics/docs/tracking/gaTrackingCustomVariables.html"&gt;custom variables&lt;/a&gt;. Basically, that allows you to slice and dice all their reports by your own custom segments. In this case, I'm allowing our marketing team to report on metrics by user and page type.
&lt;/p&gt;

&lt;p&gt;
But I also needed to include some metrics right in the product itself. To my delight, it's not only possible to pull down analytics data via the &lt;a href="http://code.google.com/apis/analytics/docs/"&gt;Google Analytics API&lt;/a&gt;, it's also surprisingly easy thanks to an &lt;a href="http://code.google.com/p/gdata-python-client/"&gt;official Python library&lt;/a&gt;. Not only that, but the API is extremely flexible.
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
from django.conf import settings

import gdata.analytics.client
from gdata.sample_util import CLIENT_LOGIN, SettingsUtil

gdata_client = gdata.analytics.client.AnalyticsClient(
    source=settings.GOOGLE_ANALYTICS_APP_NAME
    )

def _login():
    
    settings_util = SettingsUtil(prefs={
        "email": settings.GOOGLE_ANALYTICS_USER_EMAIL,
        "password": settings.GOOGLE_ANALYTICS_USER_PASS,
    })
    settings_util.authorize_client(
        gdata_client,
        service=gdata_client.auth_service,
        auth_type=CLIENT_LOGIN,
        source=settings.GOOGLE_ANALYTICS_APP_NAME, 
        scopes=['https://www.google.com/analytics/feeds/']
        )
        
def get_views(year, week):
    
    _login()        
    data_query = gdata.analytics.client.DataFeedQuery({
        'ids': settings.GOOGLE_ANALYTICS_TABLE_ID,
        'start-date': '2010-10-01',
        'end-date': '2100-01-01',
        'dimensions': 'ga:customVarValue3,ga:customVarValue4,ga:week',
        'metrics': 'ga:pageviews',
        'filters': 'ga:customVarValue4==Job,ga:customVarValue4==Profile;ga:week==%s;ga:year==%s' % (week, year),
        'max-results': "10000"
        })
        
    return gdata_client.GetDataFeed(data_query)
&lt;/pre&gt;

&lt;p&gt;
Here, I'm getting page view data for October, and creating a &lt;a href="http://en.wikipedia.org/wiki/Pivot_table"&gt;pivot table&lt;/a&gt; right in the API results by record owner and record type (either Job or Profile). I'm also grouping the results by week. The API will return up to 10,000 results, but I could easily break it into smaller chunks if necessary. 
&lt;/p&gt;

&lt;pre name="code" class="xml"&gt;
&amp;lt;?xml version='1.0' encoding='UTF-8'?&amp;gt;
&amp;lt;feed xmlns='http://www.w3.org/2005/Atom' xmlns:dxp='http://schemas.google.com/analytics/2009' xmlns:openSearch='http://a9.com/-/spec/opensearch/1.1/' xmlns:gd='http://schemas.google.com/g/2005' gd:etag='W/&amp;amp;quot;D04HQn4_fCp7I2A9Wx5VFUs.&amp;amp;quot;' gd:kind='analytics#data'&amp;gt;
 &amp;lt;id&amp;gt;http://www.google.com/analytics/feeds/data?ids=ga:35391211&amp;amp;amp;dimensions=ga:customVarValue3,ga:customVarValue4,ga:week&amp;amp;amp;metrics=ga:visits&amp;amp;amp;filters=ga:customVarValue4%3D%3DJob,ga:customVarValue4%3D%3DProfile&amp;amp;amp;start-date=2010-10-01&amp;amp;amp;end-date=2010-10-31&amp;lt;/id&amp;gt;
 &amp;lt;updated&amp;gt;2010-10-08T12:25:33.044-07:00&amp;lt;/updated&amp;gt;
 &amp;lt;title&amp;gt;Google Analytics Data for Profile XXXXXXXX&amp;lt;/title&amp;gt;
 &amp;lt;link rel='self' type='application/atom+xml' href='https://www.google.com/analytics/feeds/data?max-results=5&amp;amp;amp;sort=-ga%3Avisits&amp;amp;amp;end-date=2010-10-31&amp;amp;amp;start-date=2010-10-01&amp;amp;amp;metrics=ga%3Avisits&amp;amp;amp;ids=ga%3A35391211&amp;amp;amp;dimensions=ga%3AcustomVarValue3%2Cga%3AcustomVarValue4%2Cga%3Aweek&amp;amp;amp;filters=ga%3AcustomVarValue4%3D%3DJob%2Cga%3AcustomVarValue4%3D%3DProfile'/&amp;gt;
 &amp;lt;link rel='next' type='application/atom+xml' href='https://www.google.com/analytics/feeds/data?start-index=6&amp;amp;amp;max-results=5&amp;amp;amp;sort=-ga%3Avisits&amp;amp;amp;end-date=2010-10-31&amp;amp;amp;start-date=2010-10-01&amp;amp;amp;metrics=ga%3Avisits&amp;amp;amp;ids=ga%3A35391211&amp;amp;amp;dimensions=ga%3AcustomVarValue3%2Cga%3AcustomVarValue4%2Cga%3Aweek&amp;amp;amp;filters=ga%3AcustomVarValue4%3D%3DJob%2Cga%3AcustomVarValue4%3D%3DProfile'/&amp;gt;
 &amp;lt;author&amp;gt;
  &amp;lt;name&amp;gt;Google Analytics&amp;lt;/name&amp;gt;
 &amp;lt;/author&amp;gt;
 &amp;lt;generator version='1.0'&amp;gt;Google Analytics&amp;lt;/generator&amp;gt;
 &amp;lt;openSearch:totalResults&amp;gt;11&amp;lt;/openSearch:totalResults&amp;gt;
 &amp;lt;openSearch:startIndex&amp;gt;1&amp;lt;/openSearch:startIndex&amp;gt;
 &amp;lt;openSearch:itemsPerPage&amp;gt;5&amp;lt;/openSearch:itemsPerPage&amp;gt;
 &amp;lt;dxp:aggregates&amp;gt;
  &amp;lt;dxp:metric confidenceInterval='0.0' name='ga:visits' type='integer' value='35'/&amp;gt;
 &amp;lt;/dxp:aggregates&amp;gt;
 &amp;lt;dxp:dataSource&amp;gt;
  &amp;lt;dxp:property name='ga:profileId' value='XXXXXXX'/&amp;gt;
  &amp;lt;dxp:property name='ga:webPropertyId' value='UA-XXXXXXXXX'/&amp;gt;
  &amp;lt;dxp:property name='ga:accountName' value='Talladega Alpha'/&amp;gt;
  &amp;lt;dxp:tableId&amp;gt;ga:XXXXXXX&amp;lt;/dxp:tableId&amp;gt;
  &amp;lt;dxp:tableName&amp;gt;reachrecruiters.com&amp;lt;/dxp:tableName&amp;gt;
 &amp;lt;/dxp:dataSource&amp;gt;
 &amp;lt;dxp:endDate&amp;gt;2010-10-31&amp;lt;/dxp:endDate&amp;gt;
 &amp;lt;dxp:startDate&amp;gt;2010-10-01&amp;lt;/dxp:startDate&amp;gt;
 &amp;lt;entry gd:etag='W/&amp;amp;quot;CUUEQX47eSp7I2A9Wx5bFEU.&amp;amp;quot;' gd:kind='analytics#datarow'&amp;gt;
  &amp;lt;id&amp;gt;http://www.google.com/analytics/feeds/data?ids=ga:35391211&amp;amp;amp;ga:customVarValue3=137&amp;amp;amp;ga:customVarValue4=Job&amp;amp;amp;ga:week=41&amp;amp;amp;filters=ga:customVarValue4%3D%3DJob,ga:customVarValue4%3D%3DProfile&amp;amp;amp;start-date=2010-10-01&amp;amp;amp;end-date=2010-10-31&amp;lt;/id&amp;gt;
  &amp;lt;updated&amp;gt;2010-10-30T17:00:00.001-07:00&amp;lt;/updated&amp;gt;
  &amp;lt;title&amp;gt;ga:customVarValue3=137 | ga:customVarValue4=Job | ga:week=41&amp;lt;/title&amp;gt;
  &amp;lt;link rel='alternate' type='text/html' href='http://www.google.com/analytics'/&amp;gt;
  &amp;lt;dxp:dimension name='ga:customVarValue3' value='137'/&amp;gt;
  &amp;lt;dxp:dimension name='ga:customVarValue4' value='Job'/&amp;gt;
  &amp;lt;dxp:dimension name='ga:week' value='41'/&amp;gt;
  &amp;lt;dxp:metric confidenceInterval='0.0' name='ga:visits' type='integer' value='15'/&amp;gt;
 &amp;lt;/entry&amp;gt;
 &amp;lt;entry gd:etag='W/&amp;amp;quot;CUUEQX47eSp7I2A9Wx5bFEU.&amp;amp;quot;' gd:kind='analytics#datarow'&amp;gt;
  &amp;lt;id&amp;gt;http://www.google.com/analytics/feeds/data?ids=ga:35391211&amp;amp;amp;ga:customVarValue3=138&amp;amp;amp;ga:customVarValue4=Job&amp;amp;amp;ga:week=41&amp;amp;amp;filters=ga:customVarValue4%3D%3DJob,ga:customVarValue4%3D%3DProfile&amp;amp;amp;start-date=2010-10-01&amp;amp;amp;end-date=2010-10-31&amp;lt;/id&amp;gt;
  &amp;lt;updated&amp;gt;2010-10-30T17:00:00.001-07:00&amp;lt;/updated&amp;gt;
  &amp;lt;title&amp;gt;ga:customVarValue3=138 | ga:customVarValue4=Job | ga:week=41&amp;lt;/title&amp;gt;
  &amp;lt;link rel='alternate' type='text/html' href='http://www.google.com/analytics'/&amp;gt;
  &amp;lt;dxp:dimension name='ga:customVarValue3' value='138'/&amp;gt;
  &amp;lt;dxp:dimension name='ga:customVarValue4' value='Job'/&amp;gt;
  &amp;lt;dxp:dimension name='ga:week' value='41'/&amp;gt;
  &amp;lt;dxp:metric confidenceInterval='0.0' name='ga:visits' type='integer' value='7'/&amp;gt;
 &amp;lt;/entry&amp;gt;
 &amp;lt;entry gd:etag='W/&amp;amp;quot;CUUEQX47eSp7I2A9Wx5bFEU.&amp;amp;quot;' gd:kind='analytics#datarow'&amp;gt;
  &amp;lt;id&amp;gt;http://www.google.com/analytics/feeds/data?ids=ga:35391211&amp;amp;amp;ga:customVarValue3=138&amp;amp;amp;ga:customVarValue4=Profile&amp;amp;amp;ga:week=41&amp;amp;amp;filters=ga:customVarValue4%3D%3DJob,ga:customVarValue4%3D%3DProfile&amp;amp;amp;start-date=2010-10-01&amp;amp;amp;end-date=2010-10-31&amp;lt;/id&amp;gt;
  &amp;lt;updated&amp;gt;2010-10-30T17:00:00.001-07:00&amp;lt;/updated&amp;gt;
  &amp;lt;title&amp;gt;ga:customVarValue3=138 | ga:customVarValue4=Profile | ga:week=41&amp;lt;/title&amp;gt;
  &amp;lt;link rel='alternate' type='text/html' href='http://www.google.com/analytics'/&amp;gt;
  &amp;lt;dxp:dimension name='ga:customVarValue3' value='138'/&amp;gt;
  &amp;lt;dxp:dimension name='ga:customVarValue4' value='Profile'/&amp;gt;
  &amp;lt;dxp:dimension name='ga:week' value='41'/&amp;gt;
  &amp;lt;dxp:metric confidenceInterval='0.0' name='ga:visits' type='integer' value='3'/&amp;gt;
 &amp;lt;/entry&amp;gt;
 &amp;lt;entry gd:etag='W/&amp;amp;quot;CUUEQX47eSp7I2A9Wx5bFEU.&amp;amp;quot;' gd:kind='analytics#datarow'&amp;gt;
  &amp;lt;id&amp;gt;http://www.google.com/analytics/feeds/data?ids=ga:35391211&amp;amp;amp;ga:customVarValue3=119&amp;amp;amp;ga:customVarValue4=Job&amp;amp;amp;ga:week=41&amp;amp;amp;filters=ga:customVarValue4%3D%3DJob,ga:customVarValue4%3D%3DProfile&amp;amp;amp;start-date=2010-10-01&amp;amp;amp;end-date=2010-10-31&amp;lt;/id&amp;gt;
  &amp;lt;updated&amp;gt;2010-10-30T17:00:00.001-07:00&amp;lt;/updated&amp;gt;
  &amp;lt;title&amp;gt;ga:customVarValue3=119 | ga:customVarValue4=Job | ga:week=41&amp;lt;/title&amp;gt;
  &amp;lt;link rel='alternate' type='text/html' href='http://www.google.com/analytics'/&amp;gt;
  &amp;lt;dxp:dimension name='ga:customVarValue3' value='119'/&amp;gt;
  &amp;lt;dxp:dimension name='ga:customVarValue4' value='Job'/&amp;gt;
  &amp;lt;dxp:dimension name='ga:week' value='41'/&amp;gt;
  &amp;lt;dxp:metric confidenceInterval='0.0' name='ga:visits' type='integer' value='2'/&amp;gt;
 &amp;lt;/entry&amp;gt;
 &amp;lt;entry gd:etag='W/&amp;amp;quot;CUUEQX47eSp7I2A9Wx5bFEU.&amp;amp;quot;' gd:kind='analytics#datarow'&amp;gt;
  &amp;lt;id&amp;gt;http://www.google.com/analytics/feeds/data?ids=ga:35391211&amp;amp;amp;ga:customVarValue3=44&amp;amp;amp;ga:customVarValue4=Job&amp;amp;amp;ga:week=41&amp;amp;amp;filters=ga:customVarValue4%3D%3DJob,ga:customVarValue4%3D%3DProfile&amp;amp;amp;start-date=2010-10-01&amp;amp;amp;end-date=2010-10-31&amp;lt;/id&amp;gt;
  &amp;lt;updated&amp;gt;2010-10-30T17:00:00.001-07:00&amp;lt;/updated&amp;gt;
  &amp;lt;title&amp;gt;ga:customVarValue3=44 | ga:customVarValue4=Job | ga:week=41&amp;lt;/title&amp;gt;
  &amp;lt;link rel='alternate' type='text/html' href='http://www.google.com/analytics'/&amp;gt;
  &amp;lt;dxp:dimension name='ga:customVarValue3' value='44'/&amp;gt;
  &amp;lt;dxp:dimension name='ga:customVarValue4' value='Job'/&amp;gt;
  &amp;lt;dxp:dimension name='ga:week' value='41'/&amp;gt;
  &amp;lt;dxp:metric confidenceInterval='0.0' name='ga:visits' type='integer' value='2'/&amp;gt;
 &amp;lt;/entry&amp;gt;
&amp;lt;/feed&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
The gdata library parses this for you into native nested dictionaries. From there, it's trivial to cache it somewhere like a database for future reporting. 
&lt;/p&gt;]]></content:encoded><dsq:thread_identifier>/blog/2010/10/08/pulling-google-analytics-data-into-django</dsq:thread_identifier><wp:post_date_gmt>2010-10-08 15:01:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>14</wp:comment_id><wp:comment_author>Simple Union Interactive</wp:comment_author><wp:comment_date_gmt>2011-02-02 15:04:31</wp:comment_date_gmt><wp:comment_content>Thanks for the writeup. I noticed the resulting XML only appears to have data for the month of October, while the Python query has an end date of 2100-01-01. Is there a reason the XML just has the monthly data?</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>15</wp:comment_id><wp:comment_author>Chase Seibert</wp:comment_author><wp:comment_date_gmt>2011-02-02 16:17:14</wp:comment_date_gmt><wp:comment_content>That&amp;#39;s because I wrote this blog post in October!</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>16</wp:comment_id><wp:comment_author>Simple Union Interactive</wp:comment_author><wp:comment_date_gmt>2011-02-02 17:28:38</wp:comment_date_gmt><wp:comment_content>Makes sense. Thanks!</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>17</wp:comment_id><wp:comment_author>Mat</wp:comment_author><wp:comment_date_gmt>2011-02-20 17:07:06</wp:comment_date_gmt><wp:comment_content>Thanks good support for my gdata understanding :-)</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Django HTML5 input placeholders</title><link>http://chase-seibert.github.com/blog/2010/09/03/django-html5-input-placeholders</link><content:encoded><![CDATA[&lt;p&gt;
HTML5 has a bunch of nifty progressive enhancements to forms, one of which is placeholder text. Here is an example, along with the required code.
&lt;/p&gt;

&lt;img src="http://lh5.ggpht.com/_EE2zVzGv1Ds/TIEDhE7_JyI/AAAAAAAALWw/FIPbptqB4Dk/s800/html5_placeholders.gif"&gt;

&lt;pre name="code" class="html"&gt;
&amp;lt;form style="float: right; margin: 1.75em;"&amp;gt;
   &amp;lt;input size="38" placeholder="Your browser supports placeholder text"&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/pre&gt;

&lt;blockquote&gt;
Placeholder text is displayed inside the input field as long as the field is empty and not focused. As soon you click on (or tab to) the input field, the placeholder text disappears.
   - &lt;a href="http://diveintohtml5.org/detect.html#input-placeholder"&gt;Mark Pilgrim&lt;/a&gt;
&lt;/blockquote&gt;

&lt;p&gt;
I wanted to leverage this feature using Django's built-in form generation. Ie, I wanted to be able to call form.as_table, and have placeholder values pulled either from the model field's help_text, or from the form definition.
&lt;/p&gt;

&lt;p&gt;
My first problem was that help_text currently just dumps out into the form body. I needed a way to disable, or at least hide, those elements. There is an &lt;a href="http://code.djangoproject.com/ticket/8426"&gt;open feature request&lt;/a&gt; to wrap those elements in a class, so that they can be easily styled/hidden. While that feature will make it into Django 1.3, here is a solution in the meantime.
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
def wrap_helptext_as_table(self):
    return self._html_output(
        u'&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;%(label)s&amp;lt;/th&amp;gt;&amp;lt;td&amp;gt;%(errors)s%(field)s%(help_text)s&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;', 
        u'&amp;lt;tr&amp;gt;&amp;lt;td colspan="2"&amp;gt;%s&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;', 
        '&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;', 
        u'&amp;lt;div class="help_text"&amp;gt;%s&amp;lt;/div&amp;gt;', 
        False,
        )

class Html5Form(Form):   
          
    def as_table(self):
        return wrap_helptext_as_table(self)
     
class Html5ModelForm(ModelForm):
            
    def as_table(self):
        return wrap_helptext_as_table(self)    

# .help_text { display: none; } will now hide help_text elements
&lt;/pre&gt;

&lt;p&gt;
These two subclasses, one for regular forms and one for model forms, comprised the smallest change to the base classes that I could come up with to wrap help_text in a div with a css class. On to inserting the HTML5 placeholder attribute.
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
class Html5ModelForm(ModelForm):
            
    def as_table(self):
        return wrap_helptext_as_table(self)        
        
    def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,
                 initial=None, error_class=ErrorList, label_suffix=':',
                 empty_permitted=False, instance=None):
                             
        super(Html5ModelForm, self).__init__(data, files, auto_id, prefix, 
            initial, error_class, label_suffix, 
            empty_permitted, instance)
            
        # create an HTML5 placeholder attribute based on the field help_text 
        for field_name in self.fields:
            field = self.fields.get(field_name)
            if field:
                if type(field.widget) == TextInput:
                    field.widget.attrs["placeholder"] = field.help_text
&lt;/pre&gt;

&lt;p&gt;
That's a complete solution for model forms. For regular forms, all you have to do is the following in the form definition.
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
class MyForm(Form):
    name = forms.CharField(widget=forms.TextInput({ "placeholder": "Joe Recruiter" }))
&lt;/pre&gt;]]></content:encoded><dsq:thread_identifier>/blog/2010/09/03/django-html5-input-placeholders</dsq:thread_identifier><wp:post_date_gmt>2010-09-03 10:05:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>18</wp:comment_id><wp:comment_author>Matt Luongo</wp:comment_author><wp:comment_date_gmt>2011-01-09 16:40:34</wp:comment_date_gmt><wp:comment_content>Does the &amp;quot;class Meta&amp;quot; method work for regular forms.Form&amp;#39;s? I had to come up with a workaround (http://mattluongo.com/django-html5-authentication-form-input-placeholders).</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>19</wp:comment_id><wp:comment_author>Chase Seibert</wp:comment_author><wp:comment_date_gmt>2011-01-10 09:27:37</wp:comment_date_gmt><wp:comment_content>Thanks Matt, you were right. I fixed the above Form example.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: HAProxy Quickstart w/ full example config file</title><link>http://chase-seibert.github.com/blog/2011/02/26/haproxy-quickstart-w-full-example-config-file</link><content:encoded><![CDATA[&lt;p&gt;
I recently installed HAProxy as a web server load balancer. While &lt;a href="http://haproxy.1wt.eu/download/1.4/doc/configuration.txt"&gt;their documentation&lt;/a&gt; is great, I found it lacking a complete example of a working configuration file. For reference, here is the config file I ended up with along with comments.
&lt;/p&gt;

&lt;pre name="code" class="bash"&gt;
# /etc/haproxy/haproxy.cfg, version 1.4

global
   maxconn 4096
   user haproxy
   group haproxy
   daemon

defaults
   log   global
   mode   http
   # logs which servers requests go to, plus current connections and a whole lot of other stuff 
   option   httplog
   option   dontlognull
   retries   3
   option redispatch
   maxconn   2000
   contimeout   5000
   clitimeout   50000
   srvtimeout   50000
   log        127.0.0.1       local0
   # use rsyslog rules to forword to a centralized server  
   log        127.0.0.1       local7 debug
   # check webservers for health, taking them out of the queue as necessary 
   option httpchk

# this load balancer servers both www.site.com and static.site.com, but those two URLS have  
# different servers on the backend (app servers versus statis media apache instances)  
# also, I want to server www.site.com/static/* from the later farm  

frontend http

   bind 0.0.0.0:80

   # important, see comment from Willy Tarreau bellow
   option http-server-close

   # NAT static host names and static paths in other hostnames to static.bullhornreach.com
   acl host_static hdr_beg(host) -i static
   acl url_static  path_beg    /static
   use_backend static if host_static
   use_backend static if url_static

    default_backend www

backend www
   balance roundrobin
   server www1 www1 check port 80
   server www2 www2 check port 80
   server www3 www3 check port 80
   # provide a maintenance page functionality, only used when all other servers are down
   server load1 localhost:8080 backup

backend static
   # for static media, connections are cheap, plus the client is very likely to request multiple files  
   # so, keep the connection open (KeepAlive is the default)  
   balance roundrobin
   server media1 media1 check port 80
   server media2 media2 check port 80

listen stats :1936
   mode http
   stats enable
   stats scope http
   stats scope www
   stats scope static
   stats scope static_httpclose
   stats realm Haproxy\ Statistics
   stats uri /
   stats auth haproxy:YOURPASSWORDHERE

&lt;/pre&gt;

&lt;b&gt;Edit: made changes suggested by Willy Tarreau.&lt;/b&gt;]]></content:encoded><dsq:thread_identifier>/blog/2011/02/26/haproxy-quickstart-w-full-example-config-file</dsq:thread_identifier><wp:post_date_gmt>2011-02-26 10:23:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>20</wp:comment_id><wp:comment_author>Willy Tarreau</wp:comment_author><wp:comment_date_gmt>2011-03-19 03:43:26</wp:comment_date_gmt><wp:comment_content>Hi Chase,&lt;br /&gt;&lt;br /&gt;your config is smart, but there are still some possible improvements. First, you can use &amp;quot;option http-server-close&amp;quot; instead of &amp;quot;option httpclose&amp;quot;. This will still maintain keep-alive with the client but not with the server. That may also allow you to merge your two static backends.&lt;br /&gt;&lt;br /&gt;Also, you can use a &amp;quot;maxconn&amp;quot; value on each application server, in order to ensure that you never go beyond that value even if the servers experience slowdowns or if the traffic suddenly rises. Excess requests will be queued and serially delivered (just like a connection pool). You will have to set a &amp;quot;timeout queue&amp;quot; for this, because by default it equals the &amp;quot;timeout connect&amp;quot; which is a bit low.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>21</wp:comment_id><wp:comment_author>Chase Seibert</wp:comment_author><wp:comment_date_gmt>2011-03-19 12:23:13</wp:comment_date_gmt><wp:comment_content>Good tips. Thanks! It looks like &amp;quot;http-server-close&amp;quot; is not supported on 1.3.22, which is what I&amp;#39;m running. Sounds like a good reason up upgrade to 1.4</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>22</wp:comment_id><wp:comment_author>Chase Seibert</wp:comment_author><wp:comment_date_gmt>2011-04-15 11:10:43</wp:comment_date_gmt><wp:comment_content>I updated the config file with Willy&amp;#39;s changes, which do require 1.4</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Add a button to Django admin to login as a user (without the password)</title><link>http://chase-seibert.github.com/blog/2010/06/09/add-a-button-to-django-admin-to-login-as-a-user-without-the-password</link><content:encoded><![CDATA[&lt;p&gt;
Django correctly stores user passwords as md5 hashes by default. This is great for security; there is &lt;a href="http://stackoverflow.com/questions/330207/how-come-md5-hash-values-are-not-reversible"&gt;zero chance&lt;/a&gt; that a password could be exposed via flaw in the site, attack, disgruntled employee, whatever. But what if you had a use case where you wanted to login as user without a password?
&lt;/p&gt;

&lt;p&gt;
The use case I have in mind is allowing admin users to login as a user via the Django admin application. This could be very useful for reproducing bugs or verifying what a particular user is seeing. Without knowing the user's password, the only way for an admin to login as them would be to reset their password, login, do their bussiness, and then email the user the new password. Hardly ideal.
&lt;/p&gt;

&lt;p&gt;
Adding a button to the user page in admin is easy. The user model is in the auth application, so all you have to do is create a file called admin/auth/change_form.html in your templates directory. There, you can extend the base change_form.html for the User model. &lt;i&gt;Note: root around in the /usr/lib/pymodules/python2.6/django/contrib/admin/templates directory for an idea of what files you can extend.&lt;/i&gt;
&lt;/p&gt;

&lt;pre name="code" class="html"&gt;
{% extends "admin/change_form.html" %}

{% block object-tools %}
{% if change %}{% if not is_popup %}
  &amp;lt;ul class="object-tools"&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href="history/" class="historylink"&amp;gt;History&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href="/login/user/{{ object_id }}?hash={{ 'user'|hash:object_id }}"&amp;gt;Login&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
{% endif %}{% endif %}
{% endblock %}
&lt;/pre&gt;

&lt;p&gt;
In this case, the relative URL for the login would be the /login/user/$id. If you made the URL absolute, you could provide an alternate domain name, which would allow you a separate cookie, so you could be logged in as different users in both admin and the application at the same time.
&lt;/p&gt;

&lt;p&gt;
What's that hash parameter? It's just a security feature to make sure an attacker cannot access this URL without knowing the secret key. The filter definition looks like this:
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
from django import template

register = template.Library()  

@register.filter()
def hash(type, id):
    hash = hashlib.md5()
    hash.update("%s:%s:%s" % (type, id, settings.ADMIN_HASH_SECRET))
    return hash.hexdigest().upper()
&lt;/pre&gt;

&lt;p&gt;
The URL is routed in typical fashion via urls.py.
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
    url(r'^login/user/(?P&amp;lt;user_id&amp;gt;[\d_]+)$', admin.login_as_user),
&lt;/pre&gt;

&lt;p&gt;
Finally, here is the view that implements the login securely.
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
from django.conf import settings
from django.http import HttpResponseRedirect
from django.contrib.auth.models import User
from django.core.urlresolvers import reverse
from django.contrib.auth import login, authenticate

# the same filter that I called in the template
from search.helpers.tags import logic

def login_as_user(request, user_id):

    # security check; don't let unauthorised people login
    request_hash = request.REQUEST.get("hash", "")
    if request_hash != logic.hash("user", user_id):
        raise Exception("invalid hash value")
    
    user = User.objects.get(id=user_id)
    
    # ADMIN_HASH_SECRET is set in settings.py, can be any secret string 
    user = authenticate(username=user.username, password=settings.ADMIN_HASH_SECRET)
    login(request, user)    
    
    return HttpResponseRedirect(reverse("home"))
&lt;/pre&gt;

&lt;p&gt;
The Django login() method does the work of logging the user in against whatever backed you have configured, just as if they logged in manually. However, authenticate() is necessary, and by default requires that the actual user's password be passed in. As mentioned previously, this is a big problem because we don't know the user's password; it's stored as a one-way hash.
&lt;/p&gt;

&lt;p&gt;
It turns out to be not such a big problem after all, as Django provides an easy mechanism to extend the authentication module. First, you define your authenticator.
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
from django.conf import settings
from django.contrib.auth.models import User

class LoginAsUserBackend:
    """
    Allows admins to login as a user without knowing the password.     
    Will authenticate any username, given the password of settings.ADMIN_HASH_SECRET
    """
    
    def authenticate(self, username=None, password=None):
        if settings.ADMIN_HASH_SECRET != "" and password == settings.ADMIN_HASH_SECRET:
            try:
                return User.objects.get(username=username)
            except:
                pass
        return None

    def get_user(self, user_id):
        try:
            return User.objects.get(pk=user_id)
        except:
            return None
&lt;/pre&gt;

&lt;p&gt;
Django authenticators are called in serial; so my version will be called first, and then if that fails the base Django authenticator will have a go. In my case, I'm allowing any user to login with the secret stored in the settings file. My reasoning is that if they know that secret, they would be able to exploit my new login mechanism anyway.
&lt;/p&gt;

&lt;p&gt;
Then, you just add your new authenticator into the mix in settings.py.
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
...
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'my_application.path.to.my.authenticator.LoginAsUserBackend'
    )
...
&lt;/pre&gt;]]></content:encoded><dsq:thread_identifier>/blog/2010/06/09/add-a-button-to-django-admin-to-login-as-a-user-without-the-password</dsq:thread_identifier><wp:post_date_gmt>2010-06-09 13:02:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>23</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2010-06-30 07:43:41</wp:comment_date_gmt><wp:comment_content>Nice - you should publish it as a standalone Django application</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>24</wp:comment_id><wp:comment_author>Leo</wp:comment_author><wp:comment_date_gmt>2010-07-16 12:58:03</wp:comment_date_gmt><wp:comment_content>This is a cool hack, but its overkill. You can do the same thing in just one tiny view: http://copiousfreetime.blogspot.com/2006/12/django-su.html</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>25</wp:comment_id><wp:comment_author>Chase Seibert</wp:comment_author><wp:comment_date_gmt>2010-07-17 11:46:18</wp:comment_date_gmt><wp:comment_content>That example is from 2006, I can&amp;#39;t get it to work in Django 1.1. Specifically, the line &amp;quot;request.session[SESSION_KEY] = user.id&amp;quot; definitely does not work any more.&lt;br /&gt;&lt;br /&gt;Also, checking if the user is supseruser is cool, but that requires that you over-ride the admin session. My solution allows you to remain logged in to admin at the same time.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>26</wp:comment_id><wp:comment_author>Leo</wp:comment_author><wp:comment_date_gmt>2010-07-17 12:10:22</wp:comment_date_gmt><wp:comment_content>It works just fine in 1.1 and 1.2.&lt;br /&gt;&lt;br /&gt;Perhaps you&amp;#39;re missing:&lt;br /&gt;from django.contrib.auth import SESSION_KEY&lt;br /&gt;&lt;br /&gt;If you do implement it, you should also add a check along these lines:&lt;br /&gt;if su_user.is_superuser:&lt;br /&gt;    return HttpResponseForbidden(&amp;#39;sudo to a superuser is not permitted&amp;#39;)</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>27</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2010-08-06 16:18:56</wp:comment_date_gmt><wp:comment_content>Weird, I thought modern versions of Django hashed passwords with SHA-1 and only supported MD5 as a (temporary) backwards compatible hashing format for legacy upgrades.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>28</wp:comment_id><wp:comment_author>Chase Seibert</wp:comment_author><wp:comment_date_gmt>2010-08-08 20:31:52</wp:comment_date_gmt><wp:comment_content>I was assuming they were MD5, just from looking at the output. They may very well be SHA-1. That&amp;#39;s just a side note though, my solution doesn&amp;#39;t rely on that.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>29</wp:comment_id><wp:comment_author>eng. Ilian Iliev</wp:comment_author><wp:comment_date_gmt>2011-03-15 08:13:16</wp:comment_date_gmt><wp:comment_content>The big bonus is that Django use a salt in the password encryption so the &amp;quot;rainbow tables&amp;quot; can not be used for password retrieval.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>30</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2011-08-16 17:50:41</wp:comment_date_gmt><wp:comment_content>^^ clearly someone just learned about salt and was looking for a place to show off their knowledge... salt is pretty standard, not a &amp;quot;big bonus,&amp;quot; and if you put &amp;quot;rainbow tables&amp;quot; in quotes then I&amp;#39;m pretty sure you don&amp;#39;t know much about them... This post does not regard the encryption methods and their breakability so much as the ability to switch users within Django. &lt;br /&gt;&lt;br /&gt;While this allows you to stay logged in as admin while you are SU&amp;#39;d, I&amp;#39;m not sure that&amp;#39;s necessary, or even the best idea.  I plan to use this the SU capability for testing, error duplication, etc, and I would feel more comfortable logging in as another user completely while doing this.  &lt;br /&gt;&lt;br /&gt;Furthermore, in line with the comments at &amp;gt;&amp;gt; http://copiousfreetime.blogspot.com/2006/12/django-su.html &amp;lt;&amp;lt;, if the solution still works, you can mark that someone is SU&amp;#39;d, and provide a mechanism for them to log out through an unrelated view so that the views you&amp;#39;re testing and/or debugging remain untouched and as they would appear to the user you are logged in as.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>31</wp:comment_id><wp:comment_author>Adam Charnock</wp:comment_author><wp:comment_date_gmt>2011-08-23 09:49:28</wp:comment_date_gmt><wp:comment_content>I have just wrapped all of this up into an egg here:&lt;br /&gt;&lt;br /&gt;&lt;a href="https://github.com/continuous/django-su" rel="nofollow"&gt;https://github.com/continuous/django-su&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;I have added to ability to exit the su&amp;#39;ed session, and removed the need for an authentication backend. I hope it helps someone :)</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Mint.com backup</title><link>http://chase-seibert.github.com/blog/2009/02/16/mintcom-backup</link><content:encoded><![CDATA[&lt;p&gt;
&lt;a href="http://www.mint.com/"&gt;Mint.com&lt;/a&gt; is a &lt;i&gt;great&lt;/i&gt; personal finance tool. I started using it once I made the switch to Linux at home. I used to use Quicken, but I really didn't want to configure WINE for that one application. Besides, Quicken is getting really crusty; it looks like it's still the same codebase from the Windows 95 days.
&lt;/p&gt;

&lt;p&gt;
My only gripe with Mint is that your data is "in the cloud". I want a local copy! Mint has a handy link that you can use at the bottom of your transaction list to download a CSV copy. But I wanted to automate it...
&lt;/p&gt;

&lt;/p&gt;
Want to backup Mint.com? Here is a quick Python script to download your entire transaction history into a CSV file.
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
import os
import urllib
import urllib2
import cookielib
from optparse import OptionParser
import datetime

class mintlib():
    
    def __init__(self):
        self.opener = urllib2.build_opener(urllib2.HTTPCookieProcessor())  # need cookies for the JSESSION ID
        urllib2.install_opener(self.opener)
    
    def login(self, username, password):
        request = urllib2.Request(&amp;quot;https://wwws.mint.com/loginUserSubmit.xevent?task=L&amp;quot;,  urllib.urlencode(locals()))
        request.add_header(&amp;quot;User-Agent&amp;quot;, &amp;quot;Mozilla/5.0&amp;quot;) # Mint kicks to a &amp;quot;Upgrade to IE 7.0&amp;quot; page without this
        response = self.opener.open(request)
        
    def download(self, file):
        # write CSV file of all Mint transactions for this account to a file
        response = self.opener.open(&amp;quot;https://wwws.mint.com/transactionDownload.event?&amp;quot;) 
        open(file, &amp;quot;w&amp;quot;).write(response.read())
        
    def logout(self):
        response = self.opener.open(&amp;quot;https://wwws.mint.com/logout.event&amp;quot;)         

def getOptions():
    arguments = OptionParser()
    arguments.add_options([&amp;quot;--username&amp;quot;, &amp;quot;--password&amp;quot;, &amp;quot;--file&amp;quot;])
    arguments.set_default(&amp;quot;file&amp;quot;, &amp;quot;mint_backup_%s.csv&amp;quot; % str(datetime.date.today()))
    return arguments.parse_args()[0] # options

if __name__ == '__main__':    
    options = getOptions()
    mint = mintlib()
    mint.login(options.username, options.password)
    mint.download(options.file)
    print &amp;quot;Done&amp;quot;
&lt;/pre&gt;

The command to run it looks like:

&lt;pre&gt;
python mint.py --username=foo --password=bar
&lt;/pre&gt;]]></content:encoded><dsq:thread_identifier>/blog/2009/02/16/mintcom-backup</dsq:thread_identifier><wp:post_date_gmt>2009-02-16 16:45:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>32</wp:comment_id><wp:comment_author>Kenneth Kasajian</wp:comment_author><wp:comment_date_gmt>2009-12-02 23:56:37</wp:comment_date_gmt><wp:comment_content>yeah right.&lt;br /&gt;&lt;br /&gt;you&amp;#39;re not even using the passed in parameters to the login method.&lt;br /&gt;&lt;br /&gt;#epicfail</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>33</wp:comment_id><wp:comment_author>Chase Seibert</wp:comment_author><wp:comment_date_gmt>2009-12-03 14:36:27</wp:comment_date_gmt><wp:comment_content>In Python, locals() creates a dict of all the local variables, including username and password.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>34</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2011-07-30 18:38:21</wp:comment_date_gmt><wp:comment_content>Works great for me, thanks for posting!</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: getResource() resource patterns</title><link>http://chase-seibert.github.com/blog/2009/01/13/getresource-resource-patterns</link><content:encoded><![CDATA[&lt;p&gt;The Java &lt;a href="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/ClassLoader.html"&gt;class loader&lt;/a&gt; contains a convenience method &lt;a href="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/ClassLoader.html#getResource(java.lang.String)"&gt;getResource()&lt;/a&gt;, which is great for externalizing some static content from your code. In the past, I've used it almost exclusively with .properties files. Could there be a more ideal candidate for data that should be outside the code?&lt;/p&gt;

&lt;p&gt;Recently, I wanted to leverage this concept to load text and html data. I needed to generate a email based on a static template. In order to support rich html email clients as well as plain text clients, it's necessary to send a MultiPart MIME email with both versions. My options were to hard-code the HTML/text templates in the Java code, or externalize them as files. I had a utility method lying around that would make this easy:&lt;/p&gt;

&lt;pre name="code" class="java"&gt;
    private static String txtTemplate, htmlTemplate;

    private static final String EMAIL_TEMPLATE_TXT = &amp;quot;LegacyAppointmentEmail.txt&amp;quot;;
    private static final String EMAIL_TEMPLATE_HTML = &amp;quot;LegacyAppointmentEmail.html&amp;quot;;
 
 static {
        try {
            txtTemplate = readFile(EMAIL_TEMPLATE_TXT);
            htmlTemplate = readFile(EMAIL_TEMPLATE_HTML);
        } catch (IOException e) {
            LOG.error(e);
        }
    }
 
    private static String readFile(String fileName) throws IOException {

        InputStream stream = LegacyAppointmentEmail.class.getResourceAsStream(fileName);
        BufferedReader reader = new BufferedReader(new InputStreamReader(stream));
        StringBuilder builder = new StringBuilder();

        String line;
        while ((line = reader.readLine()) != null)
            builder.append(line).append(&amp;quot;\n&amp;quot;);

        reader.close();
        return builder.toString();        
    } 
&lt;/pre&gt;

&lt;p&gt;My first unit test failed on the line where the first file was loaded. Initially, I thought the path must be wrong. I played with various combinations, such as moving the file to the root, putting the full scope into the file path, etc. Eventually, I went back and looked at some working code I had written in the past. The only difference I could see was that is was a .properties file, not a .txt file. I renamed the file, and it worked!&lt;/p&gt;

&lt;p&gt;I knew that &lt;a href="http://www.java2s.com/Code/Java/Development-Class/Loadresourcefilerelativetotheclasslocation.htm"&gt;wasn't right&lt;/a&gt;, but I put it aside and continued on. When I came back to it, I tried to come up with the smallest reproducible case I could. I thought that if I was still stumped, at least I could post it on &lt;a href="http://stackoverflow.com/"&gt;stackoverflow&lt;/a&gt;.&lt;/p&gt;

&lt;pre name="code" class="java"&gt;
    public class Test {

        public static void main(String[] args) {

            assert Test.class.getResource(&amp;quot;file.properties&amp;quot;) != null;
            assert Test.class.getResource(&amp;quot;file.txt&amp;quot;) != null;
        }
    }
&lt;/pre&gt;

&lt;p&gt;&lt;i&gt;Note: file.properties and file.txt should both be blank files in the same directory as Test.java.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;This test was still failing on the txt file, &lt;b&gt;in IntelliJ&lt;/b&gt;. In order to get the cleanest repo possible, I saved Test.java to a new directory, and compiled and ran it from the command line using just the "javac" and "java" JDK command-line tools. Immediately, it started working.&lt;/p&gt;

&lt;p&gt;Having isolated the issue to IntelliJ, I did a little digging. Even when I took all the classpath and "java" command arguments from IntelliJ and ran them manually, it still worked. Having eliminated runtime issues, I went into the IntelliJ compiler settings. The very first window shows the following option:&lt;/p&gt;

&lt;img src="http://lh5.ggpht.com/_EE2zVzGv1Ds/SWzVaCeIsUI/AAAAAAAAH4s/N2t-8mVJUeM/s800/IntelliJResourcePatterns.gif" /&gt;

&lt;p&gt;&lt;i&gt;***Shakes fist at IntelliJ***&lt;/i&gt; Oh well, it was a learning experience.&lt;/p&gt;]]></content:encoded><dsq:thread_identifier>/blog/2009/01/13/getresource-resource-patterns</dsq:thread_identifier><wp:post_date_gmt>2009-01-13 12:06:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>35</wp:comment_id><wp:comment_author>ntoskrnl</wp:comment_author><wp:comment_date_gmt>2010-05-13 10:41:11</wp:comment_date_gmt><wp:comment_content>What can I say? Well, this saved me from tons of headache! Thank you!</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Running a JAR as a service (Linux/upstart)</title><link>http://chase-seibert.github.com/blog/2011/11/18/running-a-jar-as-a-service-linuxupstart</link><content:encoded><![CDATA[&lt;p&gt;
Running a java JAR as a daemon in Linux is fairly easy, but it took me some digging to figure out how. This is using the new &lt;a href="http://upstart.ubuntu.com/"&gt;upstart&lt;/a&gt; init script functionality, which is included in recent distributions of Ubuntu. 
&lt;/p&gt;

&lt;p&gt;
Instead of creating a script in /etc/init.d, as with &lt;a href="http://en.wikipedia.org/wiki/Init"&gt;System-V init&lt;/a&gt;, you create a .conf file in /etc/init. The syntax is much simpler, and upstart takes care of PID files and killing the process for you. You don't have to mark the file as executable.
&lt;/p&gt;

&lt;p&gt;
This particular example is for a java JAR by SauceLabs for their &lt;a href="http://saucelabs.com/docs/sauce-connect"&gt;SauceConnect&lt;/a&gt; service. All you have to do is create the following as /etc/init/sauceconnect.conf, where "sauceconnect" is the name of the service you will be invoking with service start/stop.
&lt;/p&gt;

&lt;pre name="code" class="bash"&gt;
description "SauceLabs SauceConnect Service"
author "Chase Seibert"

start on runlevel [3]
stop on shutdown

expect fork

script   
    cd /home/chase/bullhorn/tools/sauceconnect
    java -jar /home/chase/bullhorn/tools/sauceconnect/Sauce-Connect.jar USERNAME PASSWORD &gt;/var/log/sauceconnect.log 2&gt;&amp;1
    emit sauceconnect_running
end script
&lt;/pre&gt;

&lt;p&gt;
That's it. Now you can issue the "service sauceconnect start" and "service sauceconnect stop" commands. You can tail /var/log/sauceconnect.log to verify that it's working.
&lt;/p&gt;]]></content:encoded><dsq:thread_identifier>/blog/2011/11/18/running-a-jar-as-a-service-linuxupstart</dsq:thread_identifier><wp:post_date_gmt>2011-11-18 11:53:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>36</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2011-12-15 00:04:32</wp:comment_date_gmt><wp:comment_content>Thank you so much for this example! I had read/tried hundreds of others and never could get my jar file working until I tried yours. Simple and to the point, and the output to the log is a great idea also.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>37</wp:comment_id><wp:comment_author>JArmy</wp:comment_author><wp:comment_date_gmt>2012-07-24 07:35:56</wp:comment_date_gmt><wp:comment_content>Thanks that&amp;#39;s VERY simple ! I have some questions though:&lt;br /&gt;1. What If I need to gracefully shutdown my service ?&lt;br /&gt;2. Your script shuts down my service only when the server is shutting down. What if I need to manually shutdown my service. Will this still work ?</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Ubuntu keyboard shortcut cheatsheet</title><link>http://chase-seibert.github.com/blog/2010/04/02/ubuntu-keyboard-shortcut-cheatsheet</link><content:encoded><![CDATA[&lt;p&gt;
Everyone assumes that using keyboard shortcuts is more efficient than using the mouse. But by how much? One &lt;a href="http://www.ruf.rice.edu/~lane/papers/hidden_costs.pdf"&gt;2005 study&lt;/a&gt; found that keyboard shortcuts are approximately twice as fast.
&lt;/p&gt;

&lt;p&gt;
So why don't more people use them? It's apparently not an experience issue. &lt;a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.117.3187&amp;rep=rep1&amp;type=pdf"&gt;A separate study&lt;/a&gt; found that keyboard shortcut usage does not tend to increase over time, but rather correlates to social experiences. &lt;i&gt;People learn to use shortcuts from watching others.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
With that in mind, here is a cheat sheet of my personal most commonly used keyboard shortcuts. I'm not making any claims to exhaustiveness; in fact I intentionally left out commonly used but also commonly known shortcuts like "Alt + Tab".
&lt;/p&gt;

&lt;p&gt;
I'm also not claiming that these are generally applicable. I'm a developer, so I included Eclipse, etc. Others are Linux specific, which automatically rules out 99% of users. Others require customisation to enable.
&lt;/p&gt;

&lt;img src='
http://lh5.ggpht.com/_EE2zVzGv1Ds/S7YHpCJi_jI/AAAAAAAALLA/9Zu6PurSd_U/s800/Screenshot-Ubuntu-Gnome%20cheat%20sheet.pdf.png' /&gt;

&lt;p&gt;
Download the &lt;a href="http://dl.dropbox.com/u/422013/Ubuntu-Gnome%20cheat%20sheet.pdf"&gt;PDF&lt;/a&gt; or the original &lt;a href="http://dl.dropbox.com/u/422013/Ubuntu-Gnome%20cheat%20sheet.odt"&gt;OpenOffice document&lt;/a&gt;.
&lt;/p&gt;]]></content:encoded><dsq:thread_identifier>/blog/2010/04/02/ubuntu-keyboard-shortcut-cheatsheet</dsq:thread_identifier><wp:post_date_gmt>2010-04-02 11:03:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>38</wp:comment_id><wp:comment_author>Okal Otieno</wp:comment_author><wp:comment_date_gmt>2011-03-18 08:16:31</wp:comment_date_gmt><wp:comment_content>About a year late, but thanks. I&amp;#39;ve been looking for something like this.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>39</wp:comment_id><wp:comment_author>Alvin Mites</wp:comment_author><wp:comment_date_gmt>2011-11-09 16:41:48</wp:comment_date_gmt><wp:comment_content>Thank you for sharing this - the window control keys keep slipping from my memory.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Python: calculate lighter/darker RGB colors</title><link>http://chase-seibert.github.com/blog/2011/07/29/python-calculate-lighterdarker-rgb-colors</link><content:encoded><![CDATA[&lt;p&gt;
Many times color palettes have lighter and darker variations of the same color. This may be used to convey relative importance, or for something as simple as a gradient. Usually the designer will specify both colors. However, if you have a site that needs to allow user configurable styling, you may not want to ask the user for two variations of the same color.
&lt;/p&gt;

&lt;p&gt;
Here is some Python code to take a single color in RGB, and output an artitrarily lighter or darker variation of the same color. You could wrap this in a filter and use it right in your Django templates.
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
def color_variant(hex_color, brightness_offset=1):
    """ takes a color like #87c95f and produces a lighter or darker variant """
    if len(hex_color) != 7:
        raise Exception("Passed %s into color_variant(), needs to be in #87c95f format." % hex_color)
    rgb_hex = [hex_color[x:x+2] for x in [1, 3, 5]]
    new_rgb_int = [int(hex_value, 16) + brightness_offset for hex_value in rgb_hex]
    new_rgb_int = [min([255, max([0, i])]) for i in new_rgb_int] # make sure new values are between 0 and 255
    # hex() produces "0x88", we want just "88"
    return "#" + "".join([hex(i)[2:] for i in new_rgb_int])
&lt;/pre&gt;]]></content:encoded><dsq:thread_identifier>/blog/2011/07/29/python-calculate-lighterdarker-rgb-colors</dsq:thread_identifier><wp:post_date_gmt>2011-07-29 13:56:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>40</wp:comment_id><wp:comment_author>Jens Michlo</wp:comment_author><wp:comment_date_gmt>2012-08-30 08:27:39</wp:comment_date_gmt><wp:comment_content>creation of the final string is much easier with string formatting: return &amp;quot;#%02x%02x%02x&amp;quot; % tuple(new_rgb_int)&lt;br /&gt;&lt;br /&gt;ps: your usage of hex() does not guarantee you a result of two digits. hex(0) -&amp;gt; 0x0 -&amp;gt; 0. fail.  </wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Protocol Relative URLs</title><link>http://chase-seibert.github.com/blog/2009/12/08/protocol-relative-urls</link><content:encoded><![CDATA[&lt;p&gt;
   If you follow &lt;a href="http://developer.yahoo.com/performance/rules.html"&gt;YSlow rules&lt;/a&gt;, then you are likely separating HTTP requests for static resources (images, CSS, javascript) onto a second domain. Maybe you even have a &lt;a href="http://bitkickers.blogspot.com/2009/11/changing-image-links-in-css-to-use.html"&gt;nice script&lt;/a&gt; to translate your includes when you deploy to production. Then one day, you enable your site for SSL.
&lt;/p&gt;

&lt;p&gt;
Most likely, your static domain resources are being referenced as absolute, global, non-SSL URLs. Ie, &lt;a href="http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js"&gt;http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js&lt;/a&gt;. In most browsers, there is no problem with mixing an HTTPS page with HTTP includes. But with IE, Microsoft has made the dubious decision to warn users that "this page contains both secure and nonsecure items".
&lt;/p&gt;

&lt;img src="http://lh6.ggpht.com/_EE2zVzGv1Ds/SyKwDwHoI7I/AAAAAAAAJas/mWz-4mY8gKE/s800/nonsecure-items.gif" /&gt;

&lt;p&gt;
Personally, I don't think this makes much sense. Whether my static resources are being served by SSL or not does not effect the security of the page, and it definitely slows it down.
&lt;/p&gt;

&lt;p&gt;
The most obvious solution to include these resources with HTTPS when appropriate is to change the includes to relative (or domain relative) URLs. Ie, /ajax/libs/jquery/1/jquery.min.js. But then YSlow rightly complains that this is not optimized; you're sending cookies for each static include, and the browser can't load the includes in parallel with your main page.
&lt;/p&gt;

&lt;p&gt;
Another solution is to change the includes dynamically based on whether the main page is HTTPS or not. Fine for HTML, but what about the CSS file? That's usually static. You could dynamically generate it on the fly (performance problem), or generate two versions on deploy and include the HTTP or HTTPS one as appropriate. Neither option is appealing.
&lt;/p&gt;

&lt;p&gt;
Now, I have been writing HTML for about 15 years. But until I did a little research for this issue, I had never heard of &lt;a href="http://nedbatchelder.com/blog/200710/httphttps_transitions_and_relative_urls.html"&gt;protocol relative URLs&lt;/a&gt;. It turns out that the browser can load a resource from a URL pointing to another domain, and decide to use either HTTP or HTTPS on the fly depending on the current page. Fantastic!
&lt;/p&gt;

&lt;pre name="code" class="html"&gt;
.body {
    background-image: url("//static.powerfill.com/images/woot.gif");
}
&lt;/pre&gt;]]></content:encoded><dsq:thread_identifier>/blog/2009/12/08/protocol-relative-urls</dsq:thread_identifier><wp:post_date_gmt>2009-12-08 20:26:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>41</wp:comment_id><wp:comment_author>Jason Garber</wp:comment_author><wp:comment_date_gmt>2009-12-15 10:36:29</wp:comment_date_gmt><wp:comment_content>Very, very useful information.  I remember trying variants of that years ago, and to no avail.  Thanks!&lt;br /&gt;&lt;br /&gt;Jason Garber&lt;br /&gt;aka gahooa</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Django reset database connection</title><link>http://chase-seibert.github.com/blog/2012/01/06/django-reset-database-connection</link><content:encoded><![CDATA[&lt;p&gt;
Django handles database connections transparently in almost all cases. It will &lt;a href="https://docs.djangoproject.com/en/dev/ref/databases/#transaction-handling"&gt;start a new connection&lt;/a&gt; when your request starts up, and commit it at the end of the request lifetime. Other times you need to dive in further and do your own granular &lt;a href="https://docs.djangoproject.com/en/dev/topics/db/transactions/"&gt;transaction management&lt;/a&gt;. But for the most part, it's fully automatic.
&lt;/p&gt;

&lt;p&gt;
However, sometimes your use case may require that you close the current database connection and open a new one. While this is possible in Django, it's &lt;a href="http://stackoverflow.com/questions/1303654/threaded-django-task-doesnt-automatically-handle-transactions-or-db-connections"&gt;not well documented&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Why would you want to do this? I my case, I was writing an automation test framework. Some of the automation tests make database calls through the Django ORM to setup records, clean up after the test, etc. Each test is executed in the same process space, via a thread pool. We found that if one of the early tests threw an unrecoverable database error, such as an &lt;a href="https://code.djangoproject.com/wiki/IntegrityError"&gt;IntegrityError&lt;/a&gt; due to violating a unique constraint, the database connection would be aborted. Subsequent tests that tried to use the database would raise a &lt;a href="https://docs.djangoproject.com/en/1.2/ref/exceptions/#django.db.DatabaseError"&gt;DatabaseError&lt;/a&gt;:
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
Traceback (most recent call last):
  File /home/user/project/app/test.py, line 73, in tearDown
    MyModel.objects.all()
  File /usr/local/lib/python2.6/dist-packages/django/db/models/query.py, line 444, in delete
    collector.collect(del_query)
  File /usr/local/lib/python2.6/dist-packages/django/db/models/deletion.py, line 146, in collect
    reverse_dependency=reverse_dependency)
  File /usr/local/lib/python2.6/dist-packages/django/db/models/deletion.py, line 91, in add
    if not objs:
  File /usr/local/lib/python2.6/dist-packages/django/db/models/query.py, line 113, in __nonzero__
    iter(self).next()
  File /usr/local/lib/python2.6/dist-packages/django/db/models/query.py, line 107, in _result_iter
    self._fill_cache()
  File /usr/local/lib/python2.6/dist-packages/django/db/models/query.py, line 772, in _fill_cache
    self._result_cache.append(self._iter.next())
  File /usr/local/lib/python2.6/dist-packages/django/db/models/query.py, line 273, in iterator
    for row in compiler.results_iter():
  File /usr/local/lib/python2.6/dist-packages/django/db/models/sql/compiler.py, line 680, in results_iter
    for rows in self.execute_sql(MULTI):
  File /usr/local/lib/python2.6/dist-packages/django/db/models/sql/compiler.py, line 735, in execute_sql
    cursor.execute(sql, params)
  File /usr/local/lib/python2.6/dist-packages/django/db/backends/postgresql_psycopg2/base.py, line 44, in execute
    return self.cursor.execute(query, args)
DatabaseError: server closed the connection unexpectedly
 This probably means the server terminated abnormally
 before or while processing the request.
&lt;/pre&gt;

&lt;p&gt;
It turns out that it's relatively easy to reset the database connection. We just called the following function at the start of every test. Django is smart enough to re-initialize the connection the next time it's used, assuming that it's disconnected properly.
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
def reset_database_connection():
    from django import db
    db.close_connection()
&lt;/pre&gt;]]></content:encoded><dsq:thread_identifier>/blog/2012/01/06/django-reset-database-connection</dsq:thread_identifier><wp:post_date_gmt>2012-01-06 14:15:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>42</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2012-01-09 18:18:49</wp:comment_date_gmt><wp:comment_content>Just what I was looking for. Thanks. In my case I want to close the database connection because my program briefly talks to django in the beginning, and then runs for an hour. I&amp;#39;ve got a lot of these running and don&amp;#39;t want to hog the mysql connections.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>43</wp:comment_id><wp:comment_author>MikeHoss</wp:comment_author><wp:comment_date_gmt>2012-02-08 14:47:29</wp:comment_date_gmt><wp:comment_content>I have an offline process that runs every night -- it can make ~10k updates when it runs.  About once every 10 days, the site stops working and I have to restart PostgreSQL and then Apache. If I do Apache first, the site doesn&amp;#39;t come back up.&lt;br /&gt;&lt;br /&gt;The only suspisious thing in the logs are a lot of these in the Postgres log:&lt;br /&gt;2012-02-08 17:02:55 UTC LOG:  unexpected EOF on client connection&lt;br /&gt;2012-02-08 18:54:05 UTC LOG:  could not receive data from client: Connection reset by peer&lt;br /&gt;&lt;br /&gt;Anyway, I&amp;#39;m saying all this because I put a manual db.close_connection() at the end of my script and that message doesn&amp;#39;t appear anymore. I have a feeling that the site will not have to restarted in 10 days time either.&lt;br /&gt;&lt;br /&gt;So thanks!!</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>44</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2012-03-05 15:09:45</wp:comment_date_gmt><wp:comment_content>This tiny little piece of code just ended a two-day long troubleshooting fest. I feel like I can take the two minutes to write a thank you to let you know you seriously saved my sanity!</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>45</wp:comment_id><wp:comment_author>Erik</wp:comment_author><wp:comment_date_gmt>2012-06-19 15:24:33</wp:comment_date_gmt><wp:comment_content>You just saved me a few more hours of debugging. Thanks!</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Django: ManyToManyField on ModelForm as checkbox widget</title><link>http://chase-seibert.github.com/blog/2010/05/20/django-manytomanyfield-on-modelform-as-checkbox-widget</link><content:encoded><![CDATA[&lt;p&gt;
By default, Django will use a mutli-select widget for rendering a ManyToManyField on a ModelForm. Switching it out for checkboxes is simple.
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;

from django.db import models
from django.forms.models import ModelForm
from django.forms.widgets import CheckboxSelectMultiple

class Company(models.Model):  
    industries = models.ManyToManyField(Industry, blank=True, null=True)

class CompanyForm(ModelForm):
    
    class Meta:
        model = Company
        fields = ("industries")
             
    def __init__(self, *args, **kwargs):
        
        super(CompanyForm, self).__init__(*args, **kwargs)
        
        self.fields["industries"].widget = CheckboxSelectMultiple()
        self.fields["industries"].queryset = Industry.objects.all()

&lt;/pre&gt;]]></content:encoded><dsq:thread_identifier>/blog/2010/05/20/django-manytomanyfield-on-modelform-as-checkbox-widget</dsq:thread_identifier><wp:post_date_gmt>2010-05-20 16:10:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>46</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2010-07-06 14:49:20</wp:comment_date_gmt><wp:comment_content>Thanks a lot, that is exactly what I needed :)</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>47</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2011-07-27 01:32:54</wp:comment_date_gmt><wp:comment_content>can u please explain how to have default value&lt;br /&gt;&lt;br /&gt;like &lt;br /&gt;.....&lt;br /&gt;choice_field=((&amp;#39;o&amp;#39;,&amp;#39;one&amp;#39;),&lt;br /&gt;(&amp;#39;t&amp;#39;,&amp;#39;two&amp;#39;))&lt;br /&gt;.....&lt;br /&gt;and make check box option in django admin</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Regular Expression: Negative Lookahead Part II</title><link>http://chase-seibert.github.com/blog/2009/01/31/regular-expression-negative-lookahead-part-ii</link><content:encoded><![CDATA[&lt;p&gt;
&lt;a href='http://bitkickers.blogspot.com/2009/01/regular-expression-negative-lookahead.html'&gt;When we left off&lt;/a&gt;, I had set out to replace any ampersand outside a CDATA segment with the XML encoded version. Instead of ditching the regex approach and using a lenient DOM parser, I chose to escalate the ugly hack even further! The helpful folks over at &lt;a href='http://stackoverflow.com/questions/462831/regular-expression-to-escape-html-ampersands-while-respecting-cdata'&gt;stack overflow&lt;/a&gt; had a ready made solution:
&lt;/p&gt;

&lt;pre name="code" class="xml:nocontrols"&gt;
    &amp;amp;(?!(?:[a-zA-Z][a-zA-Z0-9]*|#\d+);)(?!(?&amp;gt;(?:(?!&amp;lt;!\[CDATA\[|\]\]&amp;gt;).)*)\]\]&amp;gt;)
&lt;/pre&gt;

&lt;p&gt;
I think this is self-explanatory. See you next time!
&lt;/p&gt;

&lt;p&gt;
OK, maybe not. I don't know about you, but I certainly didn't grok that when I first saw it, or even an hour later. I think it helps to start with a simplified example. Instead of CDATA, let's say that the start token is "a", and the end token is "b". So, we would want the following matches:
&lt;/p&gt;

&lt;pre&gt;
 &lt;font color=navy&gt;&lt;b&gt;&amp;&lt;/b&gt;&lt;/font&gt; 
 &lt;font color=navy&gt;&lt;b&gt;&amp;&lt;/b&gt;&lt;/font&gt; a b
 a b &lt;font color=navy&gt;&lt;b&gt;&amp;&lt;/b&gt;&lt;/font&gt;

 a &amp; b a
 &amp;
 b
 a &amp; &amp; b
&lt;/pre&gt;

&lt;/p&gt;
My idea was to match any "&amp;" that's not followed by a "b" without an "a" in between. The smallest regex I could come up with for this case is:
&lt;/p&gt;

&lt;pre name="code" class="xml:nocontrols"&gt;
    &amp;amp;(?![^a]*b)
&lt;/pre&gt;

&lt;p&gt;
The only piece that might be news to the regex journeyman is the "(?!" syntax. This is a &lt;a href='http://www.regular-expressions.info/lookaround.html'&gt;negative look ahead&lt;/a&gt;. In other words, this regex won't match an ampersand if it's not followed by a match for "[^a]*b". It works like a charm, but it's cheating. The solution is so simple because we're taking large advantage of a hidden assumption: that the start token specifically is exactly one character.
&lt;/p&gt;

&lt;p&gt;
The "[^a]*" means any string of characters that is NOT "a". When you try to extend this to literal strings (such as "&amp;lt;![CDATA["), you will find that the only way to negate a literal is the aforementioned "(?!" syntax. Also, you must escape certain characters so they are evaluated as literals. 
&lt;/p&gt;

&lt;pre name="code" class="xml:nocontrols"&gt;
    (?!&amp;lt;!\[CDATA\[)
&lt;/pre&gt;

&lt;p&gt;
The "b" token would simply be the literal. If we simply replace "a" and "b", we get:
&lt;/p&gt;

&lt;pre name="code" class="xml:nocontrols"&gt;
    &amp;amp;(?!(?!&amp;lt;!\[CDATA\[)*\]\]&amp;gt;)
&lt;/pre&gt;

&lt;p&gt;
Now, we have two look around clauses, which is confusing. But the bigger problem is that this &lt;a href='http://www.rubular.com/regexes/5949'&gt;doesn't actually work&lt;/a&gt;. This is because the (?!) clause itself isn't matching anything; it's a zero-width token. To actually progress the matching, we need to throw good old ".*" in there. But don't want the expanding match to include the look ahead clause, so we wrap the look ahead and the "." in it's own set:
&lt;/p&gt;

&lt;pre name="code" class="xml"&gt;
    &amp;amp;(?!((?!&amp;lt;!\[CDATA\[).)*\]\]&amp;gt;)
&lt;/pre&gt;

&lt;p&gt;&lt;i&gt;
Note: this regex requires that the optional flag &lt;a href='http://www.regular-expressions.info/dot.html'&gt;period matches newlines&lt;/a&gt; is set to TRUE. This is not the default. You can also replace the lone "." in the regex with "(.|\s)".
&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;
That's the basic idea, anyway. The stack overflow script has some other stuff in it. It starts with "&amp;amp;(?!(?:[a-zA-Z][a-zA-Z0-9]*|#\d+);)", which is an attempt to not match ampersands that are already part of an XML encoded value. That's not necessary for my case, but nice to have. Their CDATA clause is also slightly different. But it's all just optimizations. Maybe we can explore this in a later post. For my part, I'll stick with the shorter, slightly more readable version at the cost of performance.
&lt;/p&gt;

&lt;p&gt;
Still no word on a fix from HotJobs to actually return valid XML from their web-service.
&lt;/p&gt;

&lt;p&gt;&lt;i&gt;
This post made possible by the excellent utility &lt;a href='http://www.regexbuddy.com/'&gt;RegexBuddy&lt;/a&gt;. Highly recommended.
&lt;/i&gt;&lt;/p&gt;]]></content:encoded><dsq:thread_identifier>/blog/2009/01/31/regular-expression-negative-lookahead-part-ii</dsq:thread_identifier><wp:post_date_gmt>2009-01-31 11:11:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>48</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2011-06-24 10:05:12</wp:comment_date_gmt><wp:comment_content>how do we convert this to script tags and not &amp;lt;![CDATA[ ?</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Adding a .first() method to Django's QuerySet</title><link>http://chase-seibert.github.com/blog/2012/03/16/adding-a-first-method-to-djangos-queryset</link><content:encoded><![CDATA[&lt;p&gt;
In my last Django project, we had a set of helper functions that we used a lot. The most used was helpers.first, which takes a query set and returns the first element, or None if the query set was empty.
&lt;/p&gt;

&lt;p&gt;
Instead of writing this:
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
try:
    object = MyModel.objects.get(key=value)
except model.DoesNotExist:
    object = None
&lt;/pre&gt;

&lt;p&gt;
You can write this:
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
def first(query):
    try:
        return query.all()[0]
    except:
        return None

object = helpers.first(MyModel.objects.filter(key=value))
&lt;/pre&gt;

&lt;p&gt;
Note, that this is not identical. The &lt;a href="https://docs.djangoproject.com/en/dev/topics/db/queries/#retrieving-a-single-object-with-get"&gt;get method&lt;/a&gt; will ensure that there is exactly one row in the database that matches the query. The helper.first() method will silently eat all but the first matching row. As long as you're aware of that, you might choose to use the second form in some cases, primarily for style reasons.
&lt;/p&gt;

&lt;p&gt;
But the synax on the helper is a little verbose, plus you're constantly including helpers.py. Here is a version that makes this available as a method on the end of your query set chain. All you have to do is have your models inherit from this AbstractModel.
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
class FirstQuerySet(models.query.QuerySet):

    def first(self):
        try:
            return self[0]
        except:
            return None


class ManagerWithFirstQuery(models.Manager):

    def get_query_set(self):
        return FirstQuerySet(self.model)


class AbstractModel(models.Model):
    objects = ManagerWithFirstQuery()

    class Meta:
        abstract = True


class MyModel(AbstractModel):
    ...
&lt;/pre&gt;

&lt;p&gt;
Now, you can do the following.
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
object = MyModel.objects.filter(key=value).first()
&lt;/pre&gt;]]></content:encoded><dsq:thread_identifier>/blog/2012/03/16/adding-a-first-method-to-djangos-queryset</dsq:thread_identifier><wp:post_date_gmt>2012-03-16 17:37:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>49</wp:comment_id><wp:comment_author>Anass</wp:comment_author><wp:comment_date_gmt>2012-03-27 13:22:30</wp:comment_date_gmt><wp:comment_content>Or you could use the django-annoying shorcut&amp;#39;s `get_object_or_404`</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: MySQL drop column if exists</title><link>http://chase-seibert.github.com/blog/2010/01/15/mysql-drop-column-if-exists</link><content:encoded><![CDATA[&lt;blockquote&gt;
Idempotence describes the property of operations in mathematics and computer science that means that multiple applications of the operation do not change the result.
   - &lt;a href="http://en.wikipedia.org/wiki/Idempotence"&gt;Wikipedia&lt;/a&gt;
&lt;/blockquote&gt;

&lt;p&gt;
When updating a database schema, it's very useful to make your SQL scripts idempotent. I.e. you should be able to run the script more than once, no run should error out, and the end result should be the same as when you ran it the first time.
&lt;/p&gt;

&lt;p&gt;
On the face of it, this seems absurd. Why might you want to code idempotent schema updates? Say your initial version of the schema update got it slightly wrong. You actually want a column to be varchar(255), not a varchar(50). You could add yet another schema update to fix this, or if your script was idempotent, you could simply modify the original script and run it again.
&lt;/p&gt;

&lt;p&gt;
The most common operation you will want to do is to drop a table or column, &lt;span style="font-style:italic;"&gt;but only if it exists&lt;/span&gt;. MySQL has a built-in modifier for this.
&lt;/p&gt;

&lt;pre name="code" class="sql"&gt;
DROP TABLE IF EXISTS candidate;
CREATE TABLE candidate...
&lt;/pre&gt;

&lt;p&gt;
For some reason, the same facility does not exist in MySQL for dropping a column if it exists. But you can fake it, at least in MySQL 5 or later, by querying the database meta-data do see if the column exists, and drop it if it does. However, because you need an IF statement, it will need to be a stored procedure.
&lt;/p&gt;

&lt;pre name="code" class="sql"&gt;
drop procedure if exists schema_change;

delimiter ';;'
create procedure schema_change() begin

 /* delete columns if they exist */
 if exists (select * from information_schema.columns where table_name = 'table1' and column_name = 'column1') then
  alter table table1 drop column `column1`;
 end if;
 if exists (select * from information_schema.columns where table_name = 'table1' and column_name = 'column2') then
  alter table table1 drop column `column2`;
 end if;
 
 /* add columns */
 alter table table1 add column `column1` varchar(255) NULL;
 alter table table1 add column `column2` varchar(255) NULL;
  
end;;

delimiter ';'
call schema_change();

drop procedure if exists schema_change;
&lt;/pre&gt;]]></content:encoded><dsq:thread_identifier>/blog/2010/01/15/mysql-drop-column-if-exists</dsq:thread_identifier><wp:post_date_gmt>2010-01-15 13:52:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>50</wp:comment_id><wp:comment_author>ta2-1</wp:comment_author><wp:comment_date_gmt>2010-06-22 13:13:21</wp:comment_date_gmt><wp:comment_content>i had an error trying to execute such script like in your example.&lt;br /&gt;&lt;br /&gt;&amp;quot;Error Code : 1064&lt;br /&gt;You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &amp;#39;;&lt;br /&gt;DELIMITER &amp;#39;;&amp;#39;&amp;#39; at line 10&amp;quot;&lt;br /&gt;&lt;br /&gt;it works after i deleted quote symbols &amp;#39; near ; and ;; where delimiter is defined.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>51</wp:comment_id><wp:comment_author>nick</wp:comment_author><wp:comment_date_gmt>2011-01-12 20:16:31</wp:comment_date_gmt><wp:comment_content>It&amp;#39;s also wise to add &amp;quot; where table_schema = &amp;#39;database1&amp;#39; &amp;quot; in the case where you have multiple databases using the same tables and columns</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>52</wp:comment_id><wp:comment_author>Chris</wp:comment_author><wp:comment_date_gmt>2012-02-25 13:22:52</wp:comment_date_gmt><wp:comment_content>thanks &lt;br /&gt;made these changes to get working on my system&lt;br /&gt;delimiter ;;&lt;br /&gt;delimiter ;&lt;br /&gt;&lt;br /&gt;no &amp;#39; around delimiter and tada</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Ant java.library.path</title><link>http://chase-seibert.github.com/blog/2009/04/01/ant-javalibrarypath</link><content:encoded><![CDATA[&lt;p&gt;
Maybe this will save someone an hour... to set java.library.path from inside an ANT Java task, you need to set the parameter fork="true".
&lt;/p&gt;

&lt;pre name="code" class="xml"&gt;
    &amp;lt;target name="run" depends="deploy"&amp;gt;
       &amp;lt;java dir="${jlan}" classname="org.alfresco.jlan.app.JLANServer" fork="true"&amp;gt;
         &amp;lt;arg value="${jlan}/jlanConfig.xml"/&amp;gt;
         &amp;lt;sysproperty key="java.library.path" path="${jlan}/jni"/&amp;gt;
         &amp;lt;classpath&amp;gt;
            &amp;lt;filelist dir="${jlan}"&amp;gt;
                &amp;lt;file name="jars/alfresco-jlan.jar" /&amp;gt;
                &amp;lt;file name="libs/cryptix-jce-provider.jar" /&amp;gt;
                &amp;lt;file name="service/wrapper.jar" /&amp;gt;
                &amp;lt;file name="libs/bullhorn-virtualfs-0.1.jar" /&amp;gt;
                &amp;lt;file name="libs/log4j-1.2.14.jar" /&amp;gt;
            &amp;lt;/filelist&amp;gt;
         &amp;lt;/classpath&amp;gt;
      &amp;lt;/java&amp;gt;
    &amp;lt;/target&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
The reason seems to be that ANT does not allow you to reset a property. Once it's set, that's it. Of course, the ant task has its own java.library.path already, so manually setting it will be ignored. The fork is kind of a hack, by forcing a new process, you get clean system variables.
&lt;/p&gt;]]></content:encoded><dsq:thread_identifier>/blog/2009/04/01/ant-javalibrarypath</dsq:thread_identifier><wp:post_date_gmt>2009-04-01 10:49:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>53</wp:comment_id><wp:comment_author>zeroxia</wp:comment_author><wp:comment_date_gmt>2012-03-30 06:02:51</wp:comment_date_gmt><wp:comment_content>You did saved me an hour!</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Django ManyToMany error: "Cannot resolve keyword XXX into a field"</title><link>http://chase-seibert.github.com/blog/2010/04/30/django-manytomany-error-cannot-resolve-keyword-xxx-into-a-field</link><content:encoded><![CDATA[&lt;p&gt;This week I was doing some refactoring, and started getting the following exception in Django's admin site. This was under Django 1.1.1, and Python 2.6.4.
&lt;/p&gt;

&lt;pre name="code" class="bash"&gt;
Traceback:
File "/usr/lib/pymodules/python2.6/django/core/handlers/base.py" in get_response
  92.                 response = callback(request, *callback_args, **callback_kwargs)
File "/usr/lib/pymodules/python2.6/django/contrib/admin/sites.py" in root
  490.                 return self.model_page(request, *url.split('/', 2))
File "/usr/lib/pymodules/python2.6/django/views/decorators/cache.py" in _wrapped_view_func
  44.         response = view_func(request, *args, **kwargs)
File "/usr/lib/pymodules/python2.6/django/contrib/admin/sites.py" in model_page
  509.         return admin_obj(request, rest_of_url)
File "/usr/lib/pymodules/python2.6/django/contrib/admin/options.py" in __call__
  1098.             return self.change_view(request, unquote(url))
File "/usr/lib/pymodules/python2.6/django/db/transaction.py" in _commit_on_success
  240.                 res = func(*args, **kw)
File "/usr/lib/pymodules/python2.6/django/contrib/admin/options.py" in change_view
  840.             form = ModelForm(instance=obj)
File "/home/chase/bullhorn/branches/powerfill/django/powerfill/search/admin.py" in __init__
  113.         super(CompanyAdminForm, self).__init__(*args, **kwargs)
File "/usr/lib/pymodules/python2.6/django/forms/models.py" in __init__
  222.             object_data = model_to_dict(instance, opts.fields, opts.exclude)
File "/usr/lib/pymodules/python2.6/django/forms/models.py" in model_to_dict
  140.                 data[f.name] = [obj.pk for obj in f.value_from_object(instance)]
File "/usr/lib/pymodules/python2.6/django/db/models/fields/related.py" in value_from_object
  964.         return getattr(obj, self.attname).all()
File "/usr/lib/pymodules/python2.6/django/db/models/manager.py" in all
  105.         return self.get_query_set()
File "/usr/lib/pymodules/python2.6/django/db/models/fields/related.py" in get_query_set
  424.             return superclass.get_query_set(self)._next_is_sticky().filter(**(self.core_filters))
File "/usr/lib/pymodules/python2.6/django/db/models/query.py" in filter
  498.         return self._filter_or_exclude(False, *args, **kwargs)
File "/usr/lib/pymodules/python2.6/django/db/models/query.py" in _filter_or_exclude
  516.             clone.query.add_q(Q(*args, **kwargs))
File "/usr/lib/pymodules/python2.6/django/db/models/sql/query.py" in add_q
  1675.                             can_reuse=used_aliases)
File "/usr/lib/pymodules/python2.6/django/db/models/sql/query.py" in add_filter
  1569.                     negate=negate, process_extras=process_extras)
File "/usr/lib/pymodules/python2.6/django/db/models/sql/query.py" in setup_joins
  1737.                             "Choices are: %s" % (name, ", ".join(names)))

Exception Type: FieldError at /admin/search/company/2273/
Exception Value: Cannot resolve keyword 'company' into field.
&lt;/pre&gt;

&lt;p&gt;
Having made quite a number of changes before noticing this, it took some time to track down. It turned out that it started happening when I moved an import. Eventually, I found &lt;a href="http://code.djangoproject.com/ticket/1796"&gt;Django Ticket #1796&lt;/a&gt;. While that ticket is marked as "Fixed", it does not actually appear to be fixed in all cases. 
&lt;/p&gt;

&lt;p&gt;
The problem is deep in the Django stack, and involves class loading at the Python level as well. It's in a piece of the Django code that is only executed for ManyToMany relationships. Read the ticket if you're interested in the details.
&lt;/p&gt;

&lt;p&gt;
In my case, the ManyToMany relationship in question was a field on a Company model which referenced a Django User model:
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
class Company(models.Model): 

    ...

    connection_users = models.ManyToManyField(
        User,
        symmetrical=False,
        blank=True,
        null=True
        )
&lt;/pre&gt;

&lt;p&gt;
I also have a UserProfile model which extends the base User model:
&lt;/p&gt;


&lt;pre name="code" class="python"&gt;
class UserProfile(models.Model):              
    user = models.ForeignKey(User, unique=True)
    company = models.ForeignKey(Company)
    phone = PhoneNumberField()
&lt;/pre&gt;

&lt;p&gt;
Essentially, the django.contrib.auth.models.User model is necessarily loaded first, then my related UserProfile model is loaded before the Company model due to Python class loading behavior. When Company finally loads, the Django bug kicks in and it confuses the company field on UserProfile with a symmetric version of the ManyToMany relationship connection_users on Company.
&lt;/p&gt;

&lt;p&gt;
After much fiddling, the fix was to force the class loading order to load Company before UserProfile. A good spot to do this is at the top of the models module.
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
from company import Company, UserProfile
&lt;/pre&gt;]]></content:encoded><dsq:thread_identifier>/blog/2010/04/30/django-manytomany-error-cannot-resolve-keyword-xxx-into-a-field</dsq:thread_identifier><wp:post_date_gmt>2010-04-30 09:59:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>54</wp:comment_id><wp:comment_author>Ben Jao Ming</wp:comment_author><wp:comment_date_gmt>2010-08-29 18:10:32</wp:comment_date_gmt><wp:comment_content>Thank you so much!! I&amp;#39;ve just been battling a similar error. It turned out that a piece of code I&amp;#39;ve written long ago also fsck&amp;#39;ed up the load order of model classes.&lt;br /&gt;&lt;br /&gt;My error was that I in the ForeignKey field of one model referenced another model as a default value:&lt;br /&gt;&lt;br /&gt;class Model1(models.Model):&lt;br /&gt;    x = ForeignKey(Model2, default=Model3.objects.get(...))&lt;br /&gt;&lt;br /&gt;class Model4(models.Model):&lt;br /&gt;    x = ManyToManyField(...)&lt;br /&gt;&lt;br /&gt;I should have told myself way back then that setting a static default value as a model instance is a terrible idea.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Reuse Django's filter_horizontal admin widget</title><link>http://chase-seibert.github.com/blog/2010/05/14/reuse-djangos-filter_horizontal-admin-widget</link><content:encoded><![CDATA[&lt;p&gt;
The HTML &lt;a href="http://www.w3schools.com/tags/att_select_multiple.asp"&gt;select multiple&lt;/a&gt; control sucks mightily. Though it's a standard form widget, regular users seem to have usability problems with it. Specifically, it's easy to forget to control-click to add a new item, and you end up removing anything previously added. Also, it's hard to find options in large unsorted lists.
&lt;/p&gt;

&lt;p&gt;
There are many projects out there that can transform a multiselect into a more advanced widget. Typically they operate via JavaScript, replacing the vanilla control on the fly client-side. The server-side receives the same form variables. This has the advantage of being a drop-in replacement, and of degrading nicely if the user does not have JavaScript enabled.
&lt;/p&gt;

&lt;p&gt;
Django has a particularly nice one built into it's admin interface. It turns a multi-select such as...
&lt;/p&gt;

&lt;img src="http://lh6.ggpht.com/_EE2zVzGv1Ds/S-2OWm8O4kI/AAAAAAAALVM/EU7CFjUKEQk/s800/django-admin-before.png" /&gt;

&lt;p&gt;
into this...
&lt;/p&gt;

&lt;img src="http://lh5.ggpht.com/_EE2zVzGv1Ds/S-2OWXPWSmI/AAAAAAAALVI/QVGFmrPrVko/s800/django-admin-after.png" /&gt;

&lt;p&gt;
This comes complete with add/remove all, and client-side search capability. Because this is all JavaScript, it's easy to remove from Django admin and integrate into any page. I found a &lt;a href="http://www.hoboes.com/Mimsy/hacks/replicating-djangos-admin/reusing-djangos-filter_horizontal/"&gt;decent guide&lt;/a&gt; online, but I think we can do it in fewer steps.
&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;Download &lt;a href="http://dl.dropbox.com/u/422013/bitkickers/django-admin.multiselect.js"&gt;django-admin.multiselect.js&lt;/a&gt;, and include in your page.&lt;/li&gt;
 &lt;li&gt;Download &lt;a href="http://dl.dropbox.com/u/422013/bitkickers/django-admin-widgets.css"&gt;django-admin-widgets.css&lt;/a&gt; and include in your page.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Then, all you have to do is initialise it for any multi-selects you have.
&lt;/p&gt;

&lt;pre name="code" class="javascript"&gt;
 jQuery.each($("select[multiple]"), function () {
  // "Locations" can be any label you want
  SelectFilter.init(this.id, "Locations", 0, "/media/");
 });
&lt;/pre&gt;]]></content:encoded><dsq:thread_identifier>/blog/2010/05/14/reuse-djangos-filter_horizontal-admin-widget</dsq:thread_identifier><wp:post_date_gmt>2010-05-14 13:44:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>55</wp:comment_id><wp:comment_author>MIL</wp:comment_author><wp:comment_date_gmt>2010-06-11 10:23:42</wp:comment_date_gmt><wp:comment_content>Hi thanks alot, this really helped me. I constructed my own add function &amp;quot;+&amp;quot; at the end of the input field. it opens a popup, and it works great. Thanks for sharing. I cant share my solution, cause its not clean code yet.&lt;br /&gt;&lt;br /&gt;Michael</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>56</wp:comment_id><wp:comment_author>Althalus</wp:comment_author><wp:comment_date_gmt>2010-08-02 23:44:14</wp:comment_date_gmt><wp:comment_content>Excellent, exactly what I needed, nothing more, nothing less!</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>57</wp:comment_id><wp:comment_author>Hightower</wp:comment_author><wp:comment_date_gmt>2010-09-20 15:41:27</wp:comment_date_gmt><wp:comment_content>Hi,&lt;br /&gt;&lt;br /&gt;Great simple solution but I&amp;#39;m getting the following javascript error on page load meaning I can&amp;#39;t choose any options...&lt;br /&gt;&lt;br /&gt;node.tagName is undefined&lt;br /&gt;[Break on this error] if (node.tagName.toLowerCase() != &amp;#39;form&amp;#39;) { &lt;br /&gt;   * SelectFilter2.js (line 11)&lt;br /&gt;&lt;br /&gt;The widget renders as expected. Any ideas what might be going wrong?&lt;br /&gt;&lt;br /&gt;Thanks&lt;br /&gt;&lt;br /&gt;Wes</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Django: exclude some views from middleware</title><link>http://chase-seibert.github.com/blog/2011/08/31/django-exclude-some-views-from-middleware</link><content:encoded><![CDATA[&lt;p&gt;
In my Django applications, I tend to use custom middleware extensively for common tasks. I have middleware that logs page runtime, middleware that sets context that most views will end up needing anyway, and middleware that copies the HTTP_REFERRER header from an entry page into the session scope for use later in the session.
&lt;/p&gt;

&lt;p&gt;
At some point, I inadvertently created a middleware class invalidated the browser cache for certain views. Typically, just wrapping a view in @cache_control(max_age=3600) is enough to have the browser cache that view for an hour. But if you do something innocuous like &lt;a href="http://groups.google.com/group/django-users/browse_thread/thread/bba0b8e29d80f2df"&gt;evaluate request.user.is_authenticated()&lt;/a&gt; in a middleware class, then Django will set the Vary: Cookie header, invalidating the cache. 
&lt;/p&gt;

&lt;p&gt;
In my case, what I really wanted was a decorator that I could attach to a view that would skip my custom middleware, like an exclude list. Of course, you could just attach your middleware explicitly to each view that needs it, but that's needless code repetition if a middleware should wrap almost all views. You could also change each of your middleware classes to exclude particular views by URL, but you might end up having to alter many different middleware classes with that logic.
&lt;/p&gt;

&lt;p&gt;
As another option, you can use the following decorator/middleware pair to short-circuit the middleware execution of any view, for any middleware defined in your settings file AFTER this one.
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
""" Allows short-curcuiting of ALL remaining middleware by attaching the
@shortcircuitmiddleware decorator as the TOP LEVEL decorator of a view.

Example settings.py:

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',

    # THIS MIDDLEWARE
    'myapp.middleware.shortcircuit.ShortCircuitMiddleware',

    # SOME OTHER MIDDLE WARE YOU WANT TO SKIP SOMETIMES
    'myapp.middleware.package.MostOfTheTimeMiddleware',

    # MORE MIDDLEWARE YOU WANT TO SKIP SOMETIMES HERE
)

Example view to exclude from MostOfTheTimeMiddleware (and any subsequent):

@shortcircuitmiddleware
def myview(request):
    ...

"""

def shortcircuitmiddleware(f):
    """ view decorator, the sole purpose to is 'rename' the function
    '_shortcircuitmiddleware' """
    def _shortcircuitmiddleware(*args, **kwargs):
        return f(*args, **kwargs)
    return _shortcircuitmiddleware

class ShortCircuitMiddleware(object):
    """ Middleware; looks for a view function named '_shortcircuitmiddleware'
    and short-circuits. Relies on the fact that if you return an HttpResponse
    from a view, it will short-circuit other middleware, see:
    https://docs.djangoproject.com/en/dev/topics/http/middleware/#process-request
     """
    def process_view(self, request, view_func, view_args, view_kwargs):
        if view_func.func_name == "_shortcircuitmiddleware":
            return view_func(request, *view_args, **view_kwargs)
        return None
&lt;/pre&gt;]]></content:encoded><dsq:thread_identifier>/blog/2011/08/31/django-exclude-some-views-from-middleware</dsq:thread_identifier><wp:post_date_gmt>2011-08-31 13:43:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>58</wp:comment_id><wp:comment_author>BAka</wp:comment_author><wp:comment_date_gmt>2012-01-31 04:51:04</wp:comment_date_gmt><wp:comment_content>Thumbs up for the author, you solved my problem around csrf.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Letting ssh remember your passwords</title><link>http://chase-seibert.github.com/blog/2009/11/25/letting-ssh-remember-your-passwords</link><content:encoded><![CDATA[&lt;p&gt;
If you're like me, you ssh into the same small set of machines over and over. Maybe sometimes you run commands that sit on top of ssh, like scp for file copies. Wouldn't it be nice if you could have ssh remember your passwords? This is especially useful for automation.
&lt;/p&gt;

&lt;p&gt;
It seems like this has been built into ssh forever, but I just discovered it. So, excuse me if this is child's play for the grey beards out there.
&lt;/p&gt;

&lt;p&gt;
Create your public/private key pair. Hit enter at any prompts; you don't need a password.
&lt;/p&gt;

      &lt;pre name="code" class="bash"&gt;
          ssh-keygen -t rsa
      &lt;/pre&gt;
&lt;p&gt;
      You now have a local key in /home/$user/.ssh/id_rsa.pub
&lt;/p&gt;

&lt;p&gt;
      Copy your key to the remote machine (server1), and append it to /home/$user/.ssh/authorized_keys
&lt;/p&gt;

      &lt;pre name="code" class="bash"&gt;
          ssh $user@server1 mkdir -p ~/.ssh
          cat ~/.ssh/id_rsa.pub | ssh $user@server1 'cat &gt;&gt; ~/.ssh/authorized_keys'
      &lt;/pre&gt;

&lt;p&gt;
That's it! You should now be able to ssh and scp to the remote machine without supplying a password. 
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;
   Security note: It's important to note that ssh is &lt;span style="font-weight:bold;"&gt;not&lt;/span&gt; remembering a password, it's using a pre-exchanged public/private key. Regardless, you want to think twice about doing this in a production environment, where access to one terminal would result in accesses to many other terminals.
&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;
Edit: Most distributions will have a ssh-copy-id command, which makes the "cat" above obsolete. 
&lt;/i&gt;
&lt;/p&gt;]]></content:encoded><dsq:thread_identifier>/blog/2009/11/25/letting-ssh-remember-your-passwords</dsq:thread_identifier><wp:post_date_gmt>2009-11-25 12:35:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>59</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2011-05-12 09:43:46</wp:comment_date_gmt><wp:comment_content>great - thanks for the info, works well.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: duplicate values with jQuery.cookies (set the path!)</title><link>http://chase-seibert.github.com/blog/2010/02/10/duplicate-values-with-jquerycookies-set-the-path</link><content:encoded><![CDATA[&lt;blockquote&gt;A program should follow the "Law of Least Astonishment". What is this law? It is simply that the program should always respond to the user in the way that astonishes him least. - Geoffrey James, &lt;a href="http://www.canonical.org/~kragen/tao-of-programming.html#book4"&gt;The Tao of Programming&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;
I recently ran into an astonishing behaviour in an API I was using, namely the official &lt;a href="http://plugins.jquery.com/project/cookie"&gt;jQuery cookie plug-in&lt;/a&gt;. But first, a little background on cookies.
&lt;/p&gt;

&lt;p&gt;
Now, I've been writing web-apps that use cookies for about 15 years. But I had no idea that cookies could be associated with specific paths. &lt;a href="http://www.quirksmode.org/js/cookies.html"&gt;Quirksmode&lt;/a&gt; (as usual) gives the low-down:
&lt;/p&gt;

&lt;blockquote&gt;The path gives you the chance to specify a directory where the cookie is active. So if you want the cookie to be only sent to pages in the directory cgi-bin, set the path to /cgi-bin. Usually the path is set to /, which means the cookie is valid throughout the entire domain.&lt;/blockquote&gt;

&lt;p&gt;
The fact that it defaults to "/" is why I would venture to guess that relatively few developers are aware of this option. After all, in 99% of the cases, cookies are used to persist a session, which you want to be valid at the domain or sub-domain level, but invariant bellow that. 
&lt;/p&gt;

&lt;p&gt;
The jQuery cookie plug-in, however, inexplicably defaults the path to the actual path of the URL you're at. This forces you to set default the path to "/" &lt;span style="font-style:italic;"&gt;manually&lt;/span&gt;, a fact that the top-level "documentation", which only exists in the form of &lt;a href="http://plugins.jquery.com/files/jquery.cookie.js.txt"&gt;comments in the code&lt;/a&gt;, exacerbates by showing the initial example without the path:
&lt;/p&gt;

&lt;pre name="code" class="javascript"&gt;
 * @example $.cookie('the_cookie', 'the_value');
 * @desc Set the value of a cookie
&lt;/pre&gt;

&lt;p&gt;
Of course, you would probably spend 20 minutes or so tearing you're hair out about why cookies were not persisting properly. Finally, you would use Firebug to inspect the actual request/response pairs, and realise that there are multiple values of "the_cookie" being passed for each request. In fact, what virtually everyone using this API will want to do is the following:
&lt;/p&gt;

&lt;pre name="code" class="javascript"&gt;
 $.cookie('the_cookie', 'the_value', { path: "/" });
&lt;/pre&gt;]]></content:encoded><dsq:thread_identifier>/blog/2010/02/10/duplicate-values-with-jquerycookies-set-the-path</dsq:thread_identifier><wp:post_date_gmt>2010-02-10 14:10:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>60</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2010-05-10 18:03:09</wp:comment_date_gmt><wp:comment_content>Thanks for your article.  I have been braking my head, why the cookie was different each time, only then realized it is storing duplicates based on path.&lt;br /&gt;As you rightly pointed out, the API documentation could have been explicit on this, as cookies are often used with session / application scope and not page level.&lt;br /&gt;&lt;br /&gt;Thanks,&lt;br /&gt;Raj.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>61</wp:comment_id><wp:comment_author>Susan</wp:comment_author><wp:comment_date_gmt>2010-09-07 12:35:13</wp:comment_date_gmt><wp:comment_content>THANK YOU!&lt;br /&gt;&lt;br /&gt;I am using CodeIgniter and it was VERY counter intuitive.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>62</wp:comment_id><wp:comment_author>Darren Rush</wp:comment_author><wp:comment_date_gmt>2011-01-06 15:48:11</wp:comment_date_gmt><wp:comment_content>The Firecookie plugin (for Firebug) also helped get to the bottom of this - thanks for the post.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>63</wp:comment_id><wp:comment_author>reaper_unique</wp:comment_author><wp:comment_date_gmt>2011-04-09 08:41:28</wp:comment_date_gmt><wp:comment_content>Great article, It didn&amp;#39;t took me that long to figure out that it was the path that was the problem. Seeing how everything else worked perfectly offline and when I put it online everything worked as well, except for the cookie, I figured a quick look in chrome://settings/content -&amp;gt; content settings -&amp;gt; All cookies and site data, would show me something interesting. &lt;br /&gt;That said, it is thanks to this article I realised I needed to swith two parameters :)</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>64</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2011-07-13 13:47:52</wp:comment_date_gmt><wp:comment_content>Very nice. Your article helped me a lot.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>65</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2011-12-21 10:37:02</wp:comment_date_gmt><wp:comment_content>Amazing! I was banging my head for two days now, why on Earth everything is working perfectly in all browsers except Internet Explorer. When I set the path, IE started working! Thanks a ton for the article!</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>66</wp:comment_id><wp:comment_author>usama khalil</wp:comment_author><wp:comment_date_gmt>2012-02-16 02:02:05</wp:comment_date_gmt><wp:comment_content>I spend  2 days figuring out what the issue was!</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Quickstart: Log shipping with Postgres 8.4</title><link>http://chase-seibert.github.com/blog/2011/02/03/quickstart-log-shipping-with-postgres-84</link><content:encoded><![CDATA[&lt;p&gt;
The official &lt;a href="http://www.postgresql.org/docs/8.4/static/warm-standby.html"&gt;Postgres documentation&lt;/a&gt; covers log shipping (aka WAL Archiving, aka warm standby) in some depth. But it's still quite a lot to absorb. The basic idea is to give you a hot spare to fail over to if your main database server crashes. Here is a step by step guide on how to set this up on the command line in Ubuntu (10.04). I assume you have two identical servers (vm clone?), a master and a slave.
&lt;/p&gt;

&lt;p&gt;
First, you need to setup a directory on the slave which will hold the WAL archives (logs). Unless otherwise notes, all commands are run as root.
&lt;/p&gt;

&lt;pre name="code" class="bash"&gt;
# on the slave, must be outside main b/c we are going to blow that away
mkdir /var/lib/postgresql/8.4/pg_wal
chown postgres:postgres /var/lib/postgresql/8.4/pg_wal
&lt;/pre&gt;

&lt;p&gt;
We're going to use ssh/scp to copy WAL files from the master to the slave(&lt;b&gt;10.177.1.247&lt;/b&gt;), so you need to exchange ssh keys for the postgres users on each end.
&lt;/p&gt;

&lt;pre name="code" class="bash"&gt;
# on master, share postgres credentials with slave
sudo su postgres
ssh-keygen -t rsa # press enter to all prompts (don't set explicit password)
ssh postgres@10.177.1.247 mkdir -p ~/.ssh
cat ~/.ssh/id_rsa.pub | ssh postgres@10.177.1.247 'cat &amp;gt;&amp;gt; ~/.ssh/authorized_keys'

# test the ssh connection
ssh postgres@10.177.1.247 # should not prompt for a password
exit # exit new ssh session
exit # exit sudo as postgres, you're now root again

# setup postgres WAL archiving to copy to slave
vim /etc/postgresql/8.4/main/postgresql.conf

# make the following edits
archive_mode = on
archive_command = 'scp %p postgres@10.177.1.247:/var/lib/postgresql/8.4/pg_wal/%f &amp;lt;/dev/null'
archive_timeout = 600 # 10 minutes

# now, outside of vim, restart postgres
/etc/init.d/postgresql restart
&lt;/pre&gt;

&lt;p&gt;
If you wait 10 minutes, you should see a new file in /var/lib/postgresql/8.4/pg_wal on the slave. Assuming that's working, you're ready to create the initial snapshot.
&lt;/p&gt;

&lt;p&gt;
I was confused by the documentation on this point. Basically, you want to issue a pg_start_backup SQL command on the master, then copy the entire /var/lib/postgresql/8.4/main directory to the slave. The pg_start_backup ensures that the physical files will be in a consistent state. You can perform this copy while master is running. 
&lt;/p&gt;

&lt;pre name="code" class="bash"&gt;
# on master
sudo -u postgres psql mydbname
SELECT pg_start_backup('initial');
# may take a few minutes, wait then control-D to exit

# zip up the main data directory, and copy it to the slave
cd /var/lib/postgresql/8.4
zip -r main.zip main
scp main.zip postgres@10.177.1.247:/var/lib/postgresql/8.4

sudo -u postgres psql mydbname
SELECT pg_stop_backup();
&lt;/pre&gt;

&lt;p&gt;
Now the initial snapshot is on the slave, but we need to actually restore those files as the new primary files on the slave. At the same time, we can restart the slave in recovery mode, using &lt;a href="http://www.postgresql.org/docs/9.0/static/pgstandby.html"&gt;pg_standby&lt;/a&gt;. Recovery is enabled by creating a .conf file right in main.
&lt;/p&gt;

&lt;pre name="code" class="bash"&gt;
# on the SLAVE
apt-get install postgresql-contrib-8.4 # installs the pg_standby tool
/etc/init.d/postgresql-8.4 stop
cd /var/lib/postgresql/8.4
mv main main.bak
unzip main.zip
rm -f main/pg_xlog/* # these are from master, and are not needed

# create the recovery config file
vim /var/lib/postgresql/8.4/main/recovery.conf

# add the following, and save
restore_command = '/usr/lib/postgresql/8.4/bin/pg_standby -d -t /tmp/pgsql.trigger.5442 /var/lib/postgresql/8.4/pg_wal %f %p %r 2&amp;gt;&amp;gt;/var/log/postgresql/standby.log'
recovery_end_command = 'rm -f /tmp/pgsql.trigger.5442'

# make sure the new main (as well as recovery.conf) have the correct ownership
chown postgres:postgres main -R

# restart, and keep and eye on the new standby.log file to see if it's working
/etc/init.d/postgresql-8.4 restart
tail -f /var/log/postgresql/standby.log -n 100
&lt;/pre&gt;

&lt;p&gt;
You should see log lines like the following.
&lt;/p&gt;

&lt;pre name="code" class="bash"&gt;
Trigger file   : /tmp/pgsql.trigger.5442
Waiting for WAL file : 0000000100000006000000AE.00000020.backup
WAL file path  : /var/lib/postgresql/8.4/pg_wal/0000000100000006000000AE.00000020.backup
Restoring to  : pg_xlog/RECOVERYHISTORY
Sleep interval  : 5 seconds
Max wait interval : 0 forever
Command for restore : cp "/var/lib/postgresql/8.4/pg_wal/0000000100000006000000AE.00000020.backup" "pg_xlog/RECOVERYHISTORY"
Keep archive history : 000000000000000000000000 and later
running restore  : OK
Trigger file   : /tmp/pgsql.trigger.5442
Waiting for WAL file : 0000000100000006000000AE
WAL file path  : /var/lib/postgresql/8.4/pg_wal/0000000100000006000000AE
Restoring to  : pg_xlog/RECOVERYXLOG
Sleep interval  : 5 seconds
Max wait interval : 0 forever
Command for restore : cp "/var/lib/postgresql/8.4/pg_wal/0000000100000006000000AE" "pg_xlog/RECOVERYXLOG"
Keep archive history : 000000000000000000000000 and later
running restore  : OK

Trigger file   : /tmp/pgsql.trigger.5442
Waiting for WAL file : 0000000100000006000000AF
WAL file path  : /var/lib/postgresql/8.4/pg_wal/0000000100000006000000AF
Restoring to  : pg_xlog/RECOVERYXLOG
Sleep interval  : 5 seconds
Max wait interval : 0 forever
Command for restore : cp "/var/lib/postgresql/8.4/pg_wal/0000000100000006000000AF" "pg_xlog/RECOVERYXLOG"
Keep archive history : 0000000100000006000000AE and later
WAL file not present yet. Checking for trigger file...
WAL file not present yet. Checking for trigger file...
WAL file not present yet. Checking for trigger file...
&lt;/pre&gt;]]></content:encoded><dsq:thread_identifier>/blog/2011/02/03/quickstart-log-shipping-with-postgres-84</dsq:thread_identifier><wp:post_date_gmt>2011-02-03 09:47:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>67</wp:comment_id><wp:comment_author>philrosenstein</wp:comment_author><wp:comment_date_gmt>2011-06-21 11:41:29</wp:comment_date_gmt><wp:comment_content>Looks like a decent overview.  One comment I have is that my postgres user doesn&amp;#39;t seem to be allowed to ssh in by default.  The log file says: User postgres not allowed because account is locked</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>68</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2011-10-22 17:31:06</wp:comment_date_gmt><wp:comment_content>whoever installed must have locked the account.  you should unlock the postgres account with &amp;#39;sudo usermod -U postgres&amp;#39;</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Python: Convert a Word/PDF document to html</title><link>http://chase-seibert.github.com/blog/2010/12/17/python-convert-a-wordpdf-document-to-html</link><content:encoded><![CDATA[&lt;p&gt;
My current Django project deals with resume files in Word/PDF format. In order to show a web preview of the file, it's necessary to translate these files to plain HTML. While this was sometimes a pain in the past, I've recently found that it's relatively easy with standard Linux tools.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://www.abisource.com/"&gt;AbiWord&lt;/a&gt; is a general purpose word processor for Linux. It has pretty good support for Word files, as well as many other formats such as PDF, RTF, etc. Usually it's invoked as a GUI app, just like Microsoft Word. However, being a Linux app, there is also good command-line support.
&lt;/p&gt;

&lt;p&gt;
One of the things you can do from the command line is &lt;a href="http://manpages.ubuntu.com/manpages/intrepid/man1/abiword.1.html"&gt;convert files&lt;/a&gt; from one format to another. Here is a quick example:
&lt;/p&gt;

&lt;pre name="code" class="bash"&gt;
# print the HTML translation of a DOC file to the console
abiword -t output.html resume.doc; cat output.html
&lt;/pre&gt;

&lt;p&gt;
It's also relatively simple to invoke this from Python, using the standard libraries.
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
import subprocess
import os
import uuid

def document_to_html(file_path):
    tmp = "/tmp"
    guid = str(uuid.uuid1())
    # convert the file, using a temporary file w/ a random name
    command = "abiword -t %(tmp)s/%(guid)s.html %(file_path)s; cat %(tmp)s/%(guid)s.html" % locals()    
    p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, cwd=os.path.join(settings.PROJECT_DIR, "website/templates"))
    error = p.stderr.readlines()    
    if error:
        raise Exception("".join(error))
    html = p.stdout.readlines()
    return "".join(html)
&lt;/pre&gt;

&lt;p&gt;
AbiWord produces fairly clean HTML. If you want to scrub it even more, I would suggest something like &lt;a href="http://www.crummy.com/software/BeautifulSoup/"&gt;BeautifulSoup&lt;/a&gt;.
&lt;/p&gt;]]></content:encoded><dsq:thread_identifier>/blog/2010/12/17/python-convert-a-wordpdf-document-to-html</dsq:thread_identifier><wp:post_date_gmt>2010-12-17 10:51:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>69</wp:comment_id><wp:comment_author>nate</wp:comment_author><wp:comment_date_gmt>2011-02-10 18:14:41</wp:comment_date_gmt><wp:comment_content>ty that was vary help full</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Rotate just one monitor with Ubuntu/Nvidia</title><link>http://chase-seibert.github.com/blog/2009/08/07/rotate-just-one-monitor-with-ubuntunvidia</link><content:encoded><![CDATA[&lt;p&gt;
I took some time this week to figure out how to rotate just my &lt;a href="http://support.dell.com/support/edocs/monitors/2005FPW/En/about.htm#Front%20View"&gt;Dell 2005FPW&lt;/a&gt; in an Ubuntu dual-monitor setup. The graphics card is an Nvidia GeForce 6200 LE, and I'm v180.44 of the proprietary binary drivers.
&lt;/p&gt;

&lt;p&gt;
This gives you an idea of the setup I was going for, where the red monitor is the primary, and the blue monitor is the rotated secondary.
&lt;/p&gt;

&lt;IMG SRC='http://lh3.ggpht.com/_EE2zVzGv1Ds/Snx2MlYA8mI/AAAAAAAAJS8/3e9QlMqhfpU/s800/dual_monitors.png' width=300px&gt;

&lt;p&gt;
While I had been happily using Nvidia TwinView, I found that rotating just one of the monitors was impossible in this mode, due to the entire desktop being a single X screen. Instead, I switched to "Separate X screens", and then invoke the "Rotate" option on one of them.
&lt;/p&gt;

&lt;p&gt;
I also had to use &lt;a href="http://en.wikipedia.org/wiki/Xinerama"&gt;Xinerama&lt;/a&gt;, which is an X extension that allows multiple X screens to operate as a single screen, allowing you to share windows, a task bar and a background between them.
&lt;/p&gt;

&lt;p&gt;
Here is the xorg.conf file I ended up with. Most of it was generated from the Nvidia config tool, but then I tweaked it by hand a little.
&lt;/p&gt;

&lt;STYLE&gt;
   .monitor0 {
      color: red;
   }
   .monitor1 {
      color: blue;
   }
&lt;/STYLE&gt;

&lt;PRE name="code" class="none"&gt;

Section "ServerLayout"
    Identifier     "Default Layout"
    &lt;SPAN class="monitor0"&gt;Screen      0  "Screen0" 0 0&lt;/SPAN&gt;
    &lt;SPAN class="monitor1"&gt;Screen      1  "Screen1" &lt;B&gt;RightOf "Screen0"&lt;/B&gt;&lt;/SPAN&gt;
    ...
    &lt;B&gt;Option    "Xinerama" "true"&lt;/B&gt;
EndSection

...

Section "Monitor"
    Identifier     "Configured Monitor"
EndSection

&lt;SPAN class="monitor0"&gt;Section "Monitor"
    Identifier     "Monitor0"
    VendorName     "Unknown"
    ModelName      "Samsung SyncMaster"
    HorizSync       30.0 - 81.0
    VertRefresh     56.0 - 75.0
EndSection&lt;/SPAN&gt;

&lt;SPAN class="monitor1"&gt;Section "Monitor"
    Identifier     "Monitor1"
    VendorName     "Unknown"
    ModelName      "DELL 2005FPW"
    HorizSync       30.0 - 83.0
    VertRefresh     56.0 - 75.0
EndSection&lt;/SPAN&gt;

Section "Device"
    Identifier     "Configured Video Device"
    Driver         "nvidia"
    Option         "UseFBDev" "true"
    Option         "NoLogo" "True"
EndSection

&lt;SPAN class="monitor0"&gt;Section "Device"
    Identifier     "Device0"
    Driver         "nvidia"
    VendorName     "NVIDIA Corporation"
    BoardName      "GeForce 6200 LE"
    BusID          "PCI:1:0:0"
    Screen          0
EndSection&lt;/SPAN&gt;

&lt;SPAN class="monitor1"&gt;Section "Device"
    Identifier     "Device1"
    Driver         "nvidia"
    VendorName     "NVIDIA Corporation"
    BoardName      "GeForce 6200 LE"
    BusID          "PCI:1:0:0"
    Screen          1
    &lt;B&gt;Option          "Rotate" "left"&lt;/B&gt;
EndSection&lt;/SPAN&gt;

Section "Screen"
    Identifier     "Default Screen"
    Device         "Configured Video Device"
    Monitor        "Configured Monitor"
    DefaultDepth    24
EndSection

&lt;SPAN class="monitor0"&gt;Section "Screen"
    Identifier     "Screen0"
    Device         "Device0"
    Monitor        "Monitor0"
    DefaultDepth    24
    Option         "TwinView" "0"
    Option         "TwinViewXineramaInfoOrder" "DFP-0"
    Option         "metamodes" "DFP: 1680x1050 +0+0"
    SubSection     "Display"
        Depth       24
    EndSubSection
EndSection&lt;/SPAN&gt;

&lt;SPAN class="monitor1"&gt;Section "Screen"
    Identifier     "Screen1"
    Device         "Device1"
    Monitor        "Monitor1"
    DefaultDepth    24
    Option         "TwinViewXineramaInfoOrder" "DFP-0"
    Option         "TwinView" "0"
    Option         "metamodes" "CRT: 1680x1050 +0+0"
    SubSection     "Display"
        Depth       24
    EndSubSection
EndSection&lt;/SPAN&gt;

&lt;/PRE&gt;

&lt;p&gt;
Voila! I can view web pages and edit code in 16:9 vertical, while doing everything else in 16:9 horizontal.
&lt;/p&gt;]]></content:encoded><dsq:thread_identifier>/blog/2009/08/07/rotate-just-one-monitor-with-ubuntunvidia</dsq:thread_identifier><wp:post_date_gmt>2009-08-07 14:46:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>70</wp:comment_id><wp:comment_author>jason102</wp:comment_author><wp:comment_date_gmt>2009-08-21 17:40:10</wp:comment_date_gmt><wp:comment_content>Just FYI, while this does indeed work, at the moment the fancy Compiz desktop effects won&amp;#39;t work with Xinerama enabled until Nvidia comes out with new drivers to support this.&lt;br /&gt;http://ubuntuforums.org/showthread.php?t=803314&lt;br /&gt;&lt;br /&gt;However, eventually we may see a workaround produced by the efforts of the posters on this thread, which is still active to this day:&lt;br /&gt;http://newyork.ubuntuforums.org/showthread.php?t=884161</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>71</wp:comment_id><wp:comment_author>lionliy</wp:comment_author><wp:comment_date_gmt>2009-08-21 21:43:12</wp:comment_date_gmt><wp:comment_content>Great!   &lt;br /&gt;&lt;br /&gt;I want to setup the same configuration. You blog helped a lot. &lt;br /&gt;&lt;br /&gt;Thanks</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>72</wp:comment_id><wp:comment_author>metonymous</wp:comment_author><wp:comment_date_gmt>2011-05-24 15:33:10</wp:comment_date_gmt><wp:comment_content>We restarted X using &amp;quot;sudo /etc/init.d/gdm restart&amp;quot; and because we wanted the second monitor inverted, we used &amp;quot;inverted&amp;quot; as the &amp;quot;Rotate&amp;quot; option.&lt;br /&gt;&lt;br /&gt;The x server didn&amp;#39;t reset properly the second time, so we hard reset the machine, and when it booted - nvidia logo - login screen, rotated bliss.&lt;br /&gt;&lt;br /&gt;After changing the configuration file we can no longer use the nvidia config gui tool, but command line ftw. &lt;br /&gt;&lt;br /&gt;Thanks for your page</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>73</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2012-01-20 07:02:48</wp:comment_date_gmt><wp:comment_content>Excellent, this worked. To calculate the offset if you want your monitors in a horizontal T-shape, just use (longest dimension of the vertical screen minus shortest dimension of the horizontal screen) / 2. For example, for two 1920x1200 screens, it&amp;#39;s (1920-1200)/2 = 360 pixels offset for the horizontal screen.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>74</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2012-06-20 00:36:23</wp:comment_date_gmt><wp:comment_content>Oh man, this used to work for me, but apparently I installed an update of Xorg and now it doesn&amp;#39;t work. :-( Second monitor does not want to rotate. I do hope I can figure out a solution...</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>75</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2012-06-20 01:33:18</wp:comment_date_gmt><wp:comment_content>(Disregard my previous post from a few minutes ago.) It seems that the new version of the Nvidia driver still supports rotating a second screen, but you have to use a different syntax. For me, the following line did the trick:&lt;br /&gt;&lt;br /&gt;Option         &amp;quot;metamodes&amp;quot; &amp;quot;CRT: nvidia-auto-select { Rotation=left } +0+0&amp;quot;&lt;br /&gt;&lt;br /&gt;This is in fact a small alteration of one of the &amp;quot;Screen&amp;quot; sections in the xorg.conf file generated by nvidia-settings.&lt;br /&gt;&lt;br /&gt;If anyone happens to have any other problems, be sure to look at the Nvidia readme file. On Ubuntu 11.10 oneiric, this file might be located at /usr/share/doc/nvidia-current/README.txt. Enjoy!</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>76</wp:comment_id><wp:comment_author>amrit</wp:comment_author><wp:comment_date_gmt>2012-07-16 13:39:28</wp:comment_date_gmt><wp:comment_content>i, too, got nvidia rotation to work with the beta nvidia driver (&amp;quot;installer version: 304.22&amp;quot;).&lt;br /&gt;&lt;br /&gt;my line is:&lt;br /&gt;    Option &amp;quot;MetaModes&amp;quot; &amp;quot;DFP-0: nvidia-auto-select, DFP-1: nvidia-auto-select { Rotation=left }&amp;quot;&lt;br /&gt;&lt;br /&gt;full screen glxgears runs at 60fps on both screens (locked to vsync).</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>77</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2012-08-01 11:50:53</wp:comment_date_gmt><wp:comment_content>Gnome 3 and the aforementioned line&lt;br /&gt;&lt;br /&gt;Option &amp;quot;MetaModes&amp;quot; &amp;quot;DFP-0: nvidia-auto-select, DFP-1: nvidia-auto-select { Rotation=left }&amp;quot;&lt;br /&gt;&lt;br /&gt;works for me too:) no Xinerama and seperate Xscreens necessary!</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Deploying Jersey to JBOSS</title><link>http://chase-seibert.github.com/blog/2009/02/19/deploying-jersey-to-jboss</link><content:encoded><![CDATA[&lt;p&gt;
I spent the afternoon playing around with &lt;a href='https://jersey.dev.java.net/'&gt;Jersey&lt;/a&gt; in &lt;a href='http://www.jboss.org/'&gt;JBOSS&lt;/a&gt;. Jersey is a Java API for publishing REST web-services, and JBOSS is the application server we use at work. Not finding any particularly helpful tutorials, I muddled my way through. Lucky for you, I have distilled the required steps here.
&lt;/p&gt;

&lt;p&gt;
The first step is to create a Java class with the method you would like to invoke via a REST call. Here is what I came up with:
&lt;/p&gt;

&lt;pre name="code" class="java"&gt;
package com.bitkickers;

import java.util.Map;
import javax.ws.rs.*;

@Path("JerseyServices")
public class JerseyServices {

 @GET
 @Produces({"text/plain"})
 @Path("/helloWorld") 
 public String helloWorld(@QueryParam("name") String name) {
  return String.format("Hello, %s", name);
 } 
  
}
&lt;/pre&gt;

&lt;p&gt;
The annotations include &lt;I&gt;@Path("JerseyServices")&lt;/I&gt;, which defines a path relative to the web context to serve all of the methods in this class from. &lt;I&gt;@GET&lt;/I&gt;, tells Jersey to attach to HTTP GET requests for this method. &lt;I&gt;@Path("/helloWorld")&lt;/I&gt; and &lt;I&gt;@QueryParam("name")&lt;/I&gt; combine to define the whole relative URL as &lt;I&gt;"/JerseyServices/helloWorld?name=Chase"&lt;/I&gt; to call this method with the parameter name set to "Chase".
&lt;/p&gt;

&lt;p&gt;
The web.xml to tie in the Jersey servlet looks like the following:
&lt;/p&gt;

&lt;pre name="code" class="xml"&gt;
&amp;lt;?xml version="1.0" encoding="ISO-8859-1"?&amp;gt;
&amp;lt;web-app xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
    version="2.5"&amp;gt;

    &amp;lt;display-name&amp;gt;Jersey API Skunkworks&amp;lt;/display-name&amp;gt;

    &amp;lt;servlet&amp;gt;
        &amp;lt;servlet-name&amp;gt;JerseyAPI&amp;lt;/servlet-name&amp;gt;
        &amp;lt;servlet-class&amp;gt;com.sun.jersey.spi.container.servlet.ServletContainer&amp;lt;/servlet-class&amp;gt;        
  &amp;lt;init-param&amp;gt;
            &amp;lt;param-name&amp;gt;com.sun.jersey.config.property.packages&amp;lt;/param-name&amp;gt;
            &amp;lt;param-value&amp;gt;com.bitkickers&amp;lt;/param-value&amp;gt;
        &amp;lt;/init-param&amp;gt;
    &amp;lt;/servlet&amp;gt;

    &amp;lt;servlet-mapping&amp;gt;
        &amp;lt;servlet-name&amp;gt;JerseyAPI&amp;lt;/servlet-name&amp;gt;
        &amp;lt;url-pattern&amp;gt;/api/*&amp;lt;/url-pattern&amp;gt;
    &amp;lt;/servlet-mapping&amp;gt; 

&amp;lt;/web-app&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
The parameter "com.sun.jersey.config.property.packages" tells "ServletContainer" to scan for any classes annotated with @Path in the package "com.bitkickers", recursively. The servlet mapping tells the servlet to attach to the URL "/api".
&lt;/p&gt;

&lt;p&gt;
Finally, the jboss-web.xml just sets the root context to "jersey":
&lt;/p&gt;

&lt;pre name="code" class="xml"&gt;
&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;!DOCTYPE jboss-web PUBLIC "-//JBoss//DTD Web Application 2.4//EN" "http://www.jboss.org/j2ee/dtd/jboss-web_4_2.dtd"&amp;gt;
&amp;lt;jboss-web&amp;gt;

    &amp;lt;context-root&amp;gt;jersey&amp;lt;/context-root&amp;gt;
 
&amp;lt;/jboss-web&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
All together, the URL to invoke this REST call becomes "http://localhost:8080/jersey/api/JerseyServices/helloWorld?name=Chase".
&lt;/p&gt;

&lt;p&gt;
Also included in the &lt;a href="http://dl.dropbox.com/u/422013/bitkickers/JerseyJboss.zip"&gt;download&lt;/a&gt; is an ANT file to build the WAR, and an HTML file that uses jQuery to invoke the REST service.
&lt;/p&gt;]]></content:encoded><dsq:thread_identifier>/blog/2009/02/19/deploying-jersey-to-jboss</dsq:thread_identifier><wp:post_date_gmt>2009-02-19 13:26:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>78</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2010-12-12 10:42:24</wp:comment_date_gmt><wp:comment_content>Hi&lt;br /&gt;I used the same code and it is not able to find the ServletContainer class. I am using JBoss 5.X and I do not think it comes with this container.&lt;br /&gt;&lt;br /&gt;Error is :--&lt;br /&gt;com.sun.jersey.spi.service.ServiceConfigurationError: com.sun.jersey.spi.HeaderDelegateProvider: The class com.sun.jersey.core.impl.provider.header.LocaleProvider implementing provider interface com.sun.jersey.spi.HeaderDelegateProvider could not be instantiated: null</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>79</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2011-01-19 03:58:18</wp:comment_date_gmt><wp:comment_content>Dear Chase,&lt;br /&gt;&lt;br /&gt;these seem to be the same steps as writing a RESTful web service in Glassfish. The big difference is that Glassfish comes with all Jersey JARs installed. &lt;br /&gt;&lt;br /&gt;My question is, which JARs did you deploy into which JBoss directory?</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>80</wp:comment_id><wp:comment_author>Chase Seibert</wp:comment_author><wp:comment_date_gmt>2011-01-19 16:47:45</wp:comment_date_gmt><wp:comment_content>Typically, you would either put JARs into jboss/servers/XXX/lib, where XXX is your server name, or you would have them packaged in your JARs.&lt;br /&gt;&lt;br /&gt;Which JARs you need will likely be different depending on your configuration. I would start by including jersey.jar itself, the trouble-shooting via the JBOSS logs.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>81</wp:comment_id><wp:comment_author>Snooker</wp:comment_author><wp:comment_date_gmt>2011-06-20 03:54:53</wp:comment_date_gmt><wp:comment_content>Hi Chase,&lt;br /&gt;your jersey example is running well on JBoss 4.2.3, but on JBoss 5.1.0 I get this:&lt;br /&gt;java.lang.ClassCastException: com.sun.xml.bind.v2.runtime.JAXBContextImpl cannot be cast to javax.xml.bind.JAXBContext&lt;br /&gt;&lt;br /&gt;Any idea, what can I do?</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>82</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2011-07-27 06:47:49</wp:comment_date_gmt><wp:comment_content>I deployed jersey on jboss 5.1 following the tutorial. The libraries I add were&lt;br /&gt;&lt;br /&gt;activation-1.1.jar&lt;br /&gt;asm-3.1.jar&lt;br /&gt;jersey-bundle-1.8.jar&lt;br /&gt;stax-api-1.0-2.jar&lt;br /&gt;&lt;br /&gt;I had a similar problem to Snooker and took out the jaxb jars that come from jersey from my project lib as I am running under JRE 6. JAXB is included with Java 6 so did not need to add it to the project.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>83</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2011-10-04 12:37:47</wp:comment_date_gmt><wp:comment_content>hi, i can confirm with these libraries it works under jboss5.1&lt;br /&gt;&lt;br /&gt;activation-1.1.jar&lt;br /&gt;asm-3.1.jar&lt;br /&gt;jaxb-api-2.1.jar&lt;br /&gt;jaxb-impl-2.1.jar&lt;br /&gt;jersey-bundle-1.5.jar&lt;br /&gt;jersey-core-1.5.jar&lt;br /&gt;jersey-server-1.5.jar&lt;br /&gt;jsr311-api-1.0.jar&lt;br /&gt;stax-api-1.0-2.jar</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>84</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2012-05-11 17:41:21</wp:comment_date_gmt><wp:comment_content>thanks for this simple but very helpful tutorial.. helped me very much !</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Deploying Django staticfiles to Heroku via Hudson/Jenkins</title><link>http://chase-seibert.github.com/blog/2012/04/27/deploying-django-staticfiles-to-heroku-via-hudsonjenkins</link><content:encoded><![CDATA[&lt;p&gt;
Starting in Django 1.3, you can use the built-in &lt;a href="https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/"&gt;staticfiles&lt;/a&gt; feature to bundle up css, javascript, images and other static resources for deployment to a CDN. There are two popular Django apps, &lt;a href="https://github.com/jezdez/django_compressor"&gt;django-compressor&lt;/a&gt; and &lt;a href="https://github.com/cyberdelia/django-pipeline"&gt;django-pipeline&lt;/a&gt; that layer in additional functionality such as minification and seemless support for popular hosts like &lt;a href="http://aws.amazon.com/s3/"&gt;Amazon S3&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
These "asset managers" both do the same basic things. They give you a mechanism to bundle multiple css and javascript files into one file, optionally minify the contents, and generate unique files names for the bundled versions. The idea behind unique file names is that you can then tell browsers to cache those files forever; any changes you make will use different URLs for the includes. They will also generate unique files names for images, and then go into your css files and replace the image file paths.
&lt;/p&gt;

&lt;p&gt;
Both libraries are a little immature; I ran into numerous issues trying to get deployment to S3 working. First I tried django-compressor paired with &lt;a href="https://github.com/e-loue/django-storages"&gt;django-storages&lt;/a&gt;, which can save directly to S3. Typically django-compressor creates the minified files on the fly, which would work great except that Heroku has an ephemeral file system, meaning that the files would be re-created every time a dyno process restarts. Making matters worse, the built-in S3 boto storage is really slow to sync files up to S3, especially considering most of the files do not change on any given deploy. All in all, I was looking at about 3 minutes of lag every time I wanted to start a dyno. 
&lt;/p&gt;

&lt;p&gt;
I tried using their offline compressor, and I actually got it deploying the files. But I could not get django-compressor to use the correct minified URLs; it persistently tried to reference different filenames before and after the deploy, resulting in 404s. Even though it's the most popular framework, I decided to move on and try django-pipeline. Just as well, I'm not sure I agree with their very first design decision anyway, namely that "JS/CSS belong in the templates".
&lt;/p&gt;

&lt;p&gt;
By comparison, django-pipeline was a breeze to set up. Here is my cheat-sheet:
&lt;/p&gt;

&lt;pre name="code" class="bash"&gt;
pip install django-pipeline
apt-get install yui-compressor
&lt;/pre&gt;

&lt;p&gt;
Edit settings.py:
&lt;/&gt;

&lt;pre name="code" class="python"&gt;
INSTALLED_APPS = (
    ...
    'pipeline',
)

PIPELINE = DEBUG
PIPELINE_YUI_BINARY = '/usr/bin/yui-compressor'
STATICFILES_STORAGE = 'pipeline.storage.PipelineStorage'
STATIC_ROOT = '/tmp/myapp-staticfiles' 
# using a protocol relative URL here so that resources load from http/https accordingly
STATIC_URL = '/static/' if DEBUG else '//s3.amazonaws.com/mys3bucket/'  

# the directories stylesheets and javascript should be inside myapp/static,
# as per the staticfiles convention. I also put an "images" directory there.

PIPELINE_CSS = {
    'base': {
        'source_filenames': (
          'stylesheets/reset.css',
          'stylesheets/base.css',
        ),
        'output_filename': 'stylesheets/base.min.css',
    },
    'mobile': {
        'source_filenames': (
          'stylesheets/reset.css',
          'stylesheets/mobile.css',
        ),
        'output_filename': 'stylesheets/mobile.min.css',
    },
}

PIPELINE_JS = {
    'base': {
        'source_filenames': (
          'javascript/jquery.min.js',
          'javascript/jquery-ui.min.js',
          'javascript/myapp.js',
        ),
        'output_filename': 'javascript/base.min.js',
    },
    'mobile': {
        'source_filenames': (
          'javascript/jquery.min.js',
        ),
        'output_filename': 'javascript/mobile.min.js',
    },
}
&lt;/pre&gt;

&lt;p&gt;
For development, you can serve up the static files from /static with the following lines in your urls.py:
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
if settings.DEBUG:
    urlpatterns += patterns('',
        (r'^static/(?P&lt;path&gt;.*)$', 'django.views.static.serve', {'document_root': settings.STATIC_ROOT}),
    )
&lt;/pre&gt;

&lt;p&gt;
In your templates, you reference your css/js differently:
&lt;/p&gt;

&lt;pre name="code" class="html"&gt;
{% load compressed %}
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        {% compressed_css &amp;quot;base&amp;quot; %}
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;!-- content here --&amp;gt;
        {% compressed_js &amp;quot;base&amp;quot; %}
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
One tricky bit was that with both django-compressor and django-pipeline, I had significant trouble figuring out how to reference images inside my CSS files. I tried various things, with each either only working in my local development environment, or in production. Finally, I tried relative URLs, and it worked. In the past I had always used absolute relative links in the CSS.
&lt;/p&gt;

&lt;pre name="code" class="html"&gt;
body {
    background: url(../images/bg.png); /* NOT /static/images/bg.png, or images/bg.png */
}
&lt;/pre&gt;

&lt;p&gt;
For deployment, I decided to use Hudson versus trying to get Heroku to do it via hacking Procfile. Here is the deploy script I'm currently using:
&lt;/p&gt;

&lt;pre name="code" class="bash"&gt;
#!/bin/bash

set -e

# used to load different settings.py extension file
export ENVIRONMENT=production  

# using virtualenv to separate build python class paths
source /var/lib/hudson/virtualenv/prod/bin/activate  
pip install -r requirements.txt

# this is the static files bit, collect the files and copy them to s3 using the fast s3cmd utility
python manage.py collectstatic --noinput
s3cmd sync /tmp/myapp-staticfiles/ s3://mys3bucket  # note the trailing slash, critical!

heroku maintenance:on
heroku pgbackups:capture HEROKU_POSTGRESQL_DB --expire
git push -f heroku hudsonmerge:refs/heads/master
heroku run python manage.py migrate --noinput --merge --ignore-ghost-migrations
heroku maintenance:off
&lt;/pre&gt;

&lt;p&gt;
That's it. Currently, my builds take about 90 seconds to deploy, and include zero lag on dyno restarts.
&lt;/p&gt;]]></content:encoded><dsq:thread_identifier>/blog/2012/04/27/deploying-django-staticfiles-to-heroku-via-hudsonjenkins</dsq:thread_identifier><wp:post_date_gmt>2012-04-27 13:46:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>85</wp:comment_id><wp:comment_author>Tim</wp:comment_author><wp:comment_date_gmt>2012-05-03 10:59:56</wp:comment_date_gmt><wp:comment_content>You can also use a STATICFILES_STORAGE compatible with S3, so that you can get rid of s3cmd step : http://stackoverflow.com/questions/9608969/django-pipeline-and-s3boto-storage-dont-seem-to-work-together?answertab=votes#tab-top</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: better unobstrusive javascript element hiding</title><link>http://chase-seibert.github.com/blog/2010/06/22/better-unobstrusive-javascript-element-hiding</link><content:encoded><![CDATA[&lt;p&gt;
Many web pages have elements that are only displayed at the users request. Common examples are Facebook's chat tab, Gmail's "more" folders link and Yahoo's dashboard toggles. Typically, these elements are already loaded onto the page, and simply hidden by style sheets. Then when you click on a certain control, a piece of JavaScript un-hides the element.
&lt;/p&gt;

&lt;p&gt;
But what about users who don't have JavaScript enabled? Ideally, you would want to allow them to access the content anyway. Sure, the experience is better with JavaScript, but that's no reason to break it for everyone else. This concept of graceful degradation is known as &lt;a href="/2009/06/easier-development-with-unobtrusive.html"&gt;unobstrusive Javascript&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
A typical solution would be to leave the element visible initially via the style sheet, but immediately hide if when the page loads with JavaScript. That way, users with JavaScript can dynamically un-hide it, and users without JavaScript will simply always see it.
&lt;/p&gt;

&lt;p&gt;
The problem with this approach is that it can lead to a flicker effect when the page is first loaded. When JavaScript hides the content while the page is still loading, it may have already been displayed to the user. The user sees the page reconfigure itself, and may interpret this as a problem with the site. Luckily, there is a a better way.
&lt;/p&gt;

&lt;p&gt;
A better way to hide this content dynamically is to output a style sheet dynamically from the HTML HEAD element. 
&lt;/p&gt;

&lt;pre name="code" class="html"&gt;
&amp;lt;html xmlns="http://www.w3.org/1999/xhtml"&amp;gt;
 &amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;My Page Title&amp;lt;/title&amp;gt;
  &amp;lt;script&amp;gt;
      // check for WC3 standard DOM compliance
      if (document.getElementById) {
          document.write("&amp;lt;style type=\"text/css\"&amp;gt;.hideme { display: none; }&amp;lt;/style&amp;gt;");
      }
  &amp;lt;/script&amp;gt;
 &amp;lt;/head&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
This will hide any element with the "hideme" class. Because it's executed inside the HEAD tag, it will process before the page itself loads. No flickering. If the user does not have JavaScript, then they will simply see the element.
&lt;/p&gt;]]></content:encoded><dsq:thread_identifier>/blog/2010/06/22/better-unobstrusive-javascript-element-hiding</dsq:thread_identifier><wp:post_date_gmt>2010-06-22 17:22:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>86</wp:comment_id><wp:comment_author>Jackson Leung</wp:comment_author><wp:comment_date_gmt>2010-07-14 16:25:10</wp:comment_date_gmt><wp:comment_content>Facebook is really throwing graceful degradation out the window. I wish they&amp;#39;d do a better job controlling their code that goes out. You can&amp;#39;t remove an event unless you have javascript turned on. A better implementation would be for the link to actually go to a url that removes the event and if JS is enabled, remove the event through an AJAX call.&lt;br /&gt;&lt;br /&gt;The new authentication scheme is also annoying. They have a url they want you to redirect users to if they&amp;#39;re not logged in, but you either have to use JS redirection, or a clickable link redirection if you don&amp;#39;t want some sort of gray-overlay. Not to mention that the system is pretty poorly documented. I sadly expected more.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: testing facebook apps with ssh reverse tunnels</title><link>http://chase-seibert.github.com/blog/2012/03/28/testing-facebook-apps-with-ssh-reverse-tunnels</link><content:encoded><![CDATA[&lt;p&gt;
If you're writing a Facebook app, you may have to jump through hoops to test it out against your local development machine. Facebook requires that you configure a static host name where all your login requests will originate. For logins, it will let you specify a localhost address. But other features, like OpenGraph objects, require that Facebook be able to download that webpage to see the meta tags.
&lt;/p&gt;

&lt;p&gt;
At this point, you may have a problem. Most developer desktops are behind a firewall. If you're in a corporate setting, it may be difficult to get someone to open up port 80 on a static IP and temporarily point it to your desktop. However, many of those same developers will have access to one or more servers "in the cloud". You could deploy your code there to test, but then every change would require a re-deploy. 
&lt;/p&gt;

&lt;p&gt;
Instead, it's fairly simple to setup a reverse tunnel over SSH to forward port 80 inbound traffic from a cloud server to your local desktop. It's a two step process. First, you ssh into that server as normal, but tell it to also forward a new port on its end to your local ssh port. Then, from inside that new ssh session, you forward port 80 (HTTP) connections to your local port 80.
&lt;/p&gt;

&lt;pre name="code" class="bash"&gt;
ssh -R 19999:localhost:22 root@myserver.cloudhost.com
ssh -L 80:localhost:80 -p 19999 myuser@localhost
&lt;/pre&gt;

&lt;p&gt;
At this point, you should be able to open http://myserver.cloudhost.com in a browser and have the pages served up from your local port 80. You can also change the localhost:80 part to something else, like localhost:8000 for Django apps.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Trouble-shooting: &lt;/b&gt; 
&lt;ul&gt;
&lt;li&gt;Make sure you can ssh into the server normally with ssh root@myserver.cloudhost.com.&lt;/li&gt;
&lt;li&gt;Make sure you can ssh into yourself (from yourself) with ssh myuser@localhost. If not, make sure you have installed sshd (sudo apt-get install openssh-server).&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;]]></content:encoded><dsq:thread_identifier>/blog/2012/03/28/testing-facebook-apps-with-ssh-reverse-tunnels</dsq:thread_identifier><wp:post_date_gmt>2012-03-28 16:58:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>87</wp:comment_id><wp:comment_author>Facebook Application</wp:comment_author><wp:comment_date_gmt>2012-06-18 03:29:57</wp:comment_date_gmt><wp:comment_content>I was trying to find a way to test my app, thanks to your post for helping me out :)</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Save a screenshot to Dropbox with a keyboard shortcut</title><link>http://chase-seibert.github.com/blog/2012/02/17/save-a-screenshot-to-dropbox-with-a-keyboard-shortcut</link><content:encoded><![CDATA[&lt;p&gt;
It's not uncommon for me to call my product manager over to my desk half a dozen times on a given day to look at what I'm working on. To speed things up, I decided to start IMing him screen shots instead. Here is a BASH script that builds on &lt;a href="http://drjnet.wordpress.com/2010/05/19/dropbox-screenshots-ubuntu/"&gt;Drjnet's excellent script&lt;/a&gt;, but which also allows you to select just a small region of your screen to capture.
&lt;/p&gt;

&lt;pre name="code" class="bash"&gt;
#!/bin/bash

# Setup filename for the screenshot
myfile=$(date +%Y%m%d%S).png

#Setup paths to dropbox &amp; full url to new screenshot
dropboxwebpath='http://dl.dropbox.com/u/422013/temp/' # PUT YOUR DROPBOX USERID HERE
dropboxfileurl=$dropboxwebpath$myfile

# see: http://code.google.com/p/xmonad/issues/detail?id=476
sleep 0.2

# Use scrot to take a screenshot and stick it in your dropbox screenshots folder
scrot $myfile -e 'mv $f ~/Dropbox/Public/temp/' -s

#  Put full URL to new screenshot into clipboard
echo $dropboxfileurl | xclip -selection c
&lt;/pre&gt;

&lt;p&gt;
Note the sleep; that's important to get around a race condition between scrot and your window manager for access to your mouse/keyboard.
&lt;/p&gt;

&lt;p&gt;
To install as a keyboard shortcut (I have mine bound to Windows + PrtScr), just launch the "Keyboard" app in Ubuntu, and add it under Shortcuts -&gt; Custom Shortcuts.
&lt;/p&gt;

&lt;img src="https://lh4.googleusercontent.com/-P0rj25xO-9w/Tz66cDghKQI/AAAAAAAALog/4U_yVTnbZhc/s757/keyboard_shortcut.png"&gt;]]></content:encoded><dsq:thread_identifier>/blog/2012/02/17/save-a-screenshot-to-dropbox-with-a-keyboard-shortcut</dsq:thread_identifier><wp:post_date_gmt>2012-02-17 15:38:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>88</wp:comment_id><wp:comment_author>Danny's Space</wp:comment_author><wp:comment_date_gmt>2012-02-18 23:35:03</wp:comment_date_gmt><wp:comment_content>Nice script. I use Shutter with a keyboard shortcut myself.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>89</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2012-02-19 08:29:41</wp:comment_date_gmt><wp:comment_content>I keep forgetting that there is a whole new crowd of linux users that aren&amp;#39;t hackers of any kind. My /usr/scripts folder is full of little 2-minute gems like this that seemed too trivial to share. I guess it finally is starting to (slowly) go mainstream. Good times.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>90</wp:comment_id><wp:comment_author>eik3</wp:comment_author><wp:comment_date_gmt>2012-02-19 11:18:50</wp:comment_date_gmt><wp:comment_content>simplified:&lt;br /&gt;&lt;br /&gt;#!/bin/bash&lt;br /&gt;sleep .2&lt;br /&gt;filename=~/Dropbox/Public/temp/$(date +%Y%m%d%S).png&lt;br /&gt;scrot -s $filename&lt;br /&gt;dropbox puburl $filename | xclip -selection c</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: ColdFusion JSON Exception Handling</title><link>http://chase-seibert.github.com/blog/2008/12/24/coldfusion-json-exception-handling</link><content:encoded><![CDATA[&lt;p&gt;When calling a ColdFusion end-point from an Ajax call, the caller is expecting a certain format. In my projects, that's usually JSON. Regardless, it would be nice if the caller could assume a constant format, even for exceptions.&lt;/p&gt;

&lt;p&gt;Typically, when an exception is generated in ColdFusion, the server auto-generates an HTML description of the exception. The assumption is that a developer or an end-user will be looking at the resulting HTML.&lt;/p&gt;

&lt;p&gt;But in our case, the caller is a script, and parsing that HTML would be a chore. Instead, we can leverage ColdFusion's CFERROR tag to make sure that even exceptions generate valid JSON. Then, the caller can handle the exception data, possibly merging the information into the UI.&lt;/p&gt;

&lt;p&gt;You can setup an exception handler for you JSON API calls as follows. You would typically include this on an individual API page, or in the Application.cfm above all your APIs.&lt;/p&gt;

&lt;pre name="code" class="html"&gt;
&amp;lt;CFERROR type=&amp;quot;exception&amp;quot; template=&amp;quot;JSONExceptionSerializer.cfm&amp;quot;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Here is an example of how to handle the exception and format the results. You could also use a JSON library such as CFJSON or the tool that comes with CF8 to do the formatting.&lt;/p&gt;

&lt;pre name="code" class="html"&gt;
&amp;lt;CFSETTING showdebugoutput=&amp;quot;no&amp;quot; enablecfoutputonly=&amp;quot;yes&amp;quot;&amp;gt;

&amp;lt;CFHEADER statuscode=&amp;quot;500&amp;quot; statustext=&amp;quot;&amp;quot;&amp;gt;

&amp;lt;CFCONTENT reset=&amp;quot;true&amp;quot;&amp;gt;
&amp;lt;CFOUTPUT&amp;gt;
    {
        error: {
            message: &amp;quot;#JSStringFormat(Error.message)#&amp;quot;,
            template: &amp;quot;#Error.TagContext[1].template#&amp;quot;,
            line: &amp;quot;#Error.TagContext[1].line#&amp;quot;,
            type: &amp;quot;#Error.RootCause.type#&amp;quot;,
            stacktrace: &amp;quot;#JSStringFormat(Error.StackTrace)#&amp;quot;
        }
    }
&amp;lt;/CFOUTPUT&amp;gt;
&amp;lt;CFEXIT&amp;gt;
&lt;/pre&gt;

&lt;i&gt;JSStringFormat() ensures that string content inside the JSON elements is properly escaped.&lt;/i&gt;

&lt;p&gt;Extending this method, you can also manually throw exception in your ColdFusion code. For example, if the user is not logged in on the back-end, instead of doing this:&lt;/p&gt;

&lt;pre name="code" class="html"&gt;
&amp;lt;CFOUTPUT&amp;gt;Error: not logged in!&amp;lt;/CFOUTPUT&amp;gt;
&amp;lt;CFEXIT&amp;gt;
&lt;/pre&gt;

You can simply throw an exception.

&lt;pre name="code" class="html"&gt;
&amp;lt;CFTHROW message=&amp;quot;Not logged in!&amp;quot;&amp;gt;
&lt;/pre&gt;]]></content:encoded><dsq:thread_identifier>/blog/2008/12/24/coldfusion-json-exception-handling</dsq:thread_identifier><wp:post_date_gmt>2008-12-24 13:55:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>91</wp:comment_id><wp:comment_author>jones</wp:comment_author><wp:comment_date_gmt>2009-01-19 12:33:00</wp:comment_date_gmt><wp:comment_content>Nice blog...&lt;BR/&gt;visit also &lt;A HREF="http://coldfusion-example.blogspot.com/" REL="nofollow"&gt;&lt;B&gt;coldfusion example&lt;/B&gt;&lt;/A&gt;</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Selenium: Execute arbitrary javascript (even jQuery)</title><link>http://chase-seibert.github.com/blog/2011/05/06/selenium-execute-arbitrary-javascript-even-jquery</link><content:encoded><![CDATA[&lt;p&gt;
We're very happy with our new-ish Selenium + Saucelabs setup for web site automation testing. But as easy as Selenium makes it to compose tests, you will inevitably be frustrated trying to do some of the more complicated test scenarios.
&lt;/p&gt;

&lt;p&gt;
For example, the Selenium IDE has not been sufficient for us to automatically generate code to look inside a javascript based rich text editor control. Similarly, we could not figure out how to uncheck ALL checkboxes in a certain form when you don't know their IDs/names up front.
&lt;/p&gt;

&lt;p&gt;
As a web developer, when I run into issues like this with Selenium, I find myself wishing that I could just use jQuery. It's such a familiar tool, that I often think of how I would implement something with jQuery, and then attempt to translate that into the Selenium API. 
&lt;/p&gt;

&lt;p&gt;
Maybe in the future, Selenium will let you just code in javascript. What could be more natural? For now, you can use a work-around like the following python helper.
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
# adapted from http://pivotallabs.com/users/patn/blog/articles/717-run-javascript-in-selenium-tests-easily-
def javascript(sel, script):
    return sel.get_eval("""
    (function() {
            with(this) {
              %(script)s
            }
          }).call(selenium.browserbot.getUserWindow());
    """ % locals())
&lt;/pre&gt;

&lt;p&gt;
There is a tricky bit here. When you call &lt;a href="http://release.seleniumhq.org/selenium-remote-control/1.0-beta-2/doc/dotnet/Selenium.ISelenium.GetEval.html"&gt;get_eval&lt;/a&gt;(), your javascript is executed in the context of the test runner, not the actual test window. Hence wrapping your javascript in an anonymous function, and executing it in the context of the browserbot window via the &lt;a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/call"&gt;call()&lt;/a&gt; method.
&lt;/p&gt;

&lt;p&gt;
Another subtly is using getUserWindow() instead of getCurrentWindow(). This is so you can use the jQuery library already loaded by your app. Due to &lt;a href="http://jira.openqa.org/browse/SEL-558"&gt;SEL-558&lt;/a&gt;, getCurrentWindow() no longer gives you access to dynamically defined document properties, like "jQuery" or "$". Thanks to &lt;a href="http://crschmidt.net/blog/archives/348/selenium-ide-getcurrentwindow-problems/"&gt;Christopher Schmidt&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Assuming you already have jQuery loaded in your application, un-checking all the checkboxes on the page is as simple as:
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
class MyTest(SeleniumTestCase):
   def runTest(self):               
      javascript(self.selenium, "$('input[type=checkbox]').attr('checked', false);")
&lt;/pre&gt;

&lt;p&gt;
You can also use a jQuery selector to find a particular element and then return it. Any string returned from javascript() will get passed back to the python test runner code.
&lt;/p&gt;]]></content:encoded><dsq:thread_identifier>/blog/2011/05/06/selenium-execute-arbitrary-javascript-even-jquery</dsq:thread_identifier><wp:post_date_gmt>2011-05-06 20:14:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>92</wp:comment_id><wp:comment_author>Fotios</wp:comment_author><wp:comment_date_gmt>2011-10-20 18:30:24</wp:comment_date_gmt><wp:comment_content>Found this post after like 2 hours of headache trying to do the same thing. Thank you so much.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: cron job to mail Splunk license violation alerts</title><link>http://chase-seibert.github.com/blog/2011/04/26/cron-job-to-mail-splunk-license-violation-alerts</link><content:encoded><![CDATA[&lt;p&gt;
Have a problem staying under the Splunk free edition cap of 500MB/day? Splunk is no help. It silently logs violations, only taking action finally by shutting down your searches all together. Here is a quick cron job to email you license alerts as they happen.
&lt;/p&gt;

&lt;pre name="code" class="bash"&gt;
touch ~/splunk-license-alert
chmod +x ~/splunk-license-alert
vim ~/splunk-license-alert
&lt;/pre&gt;

&lt;pre name="code" class="bash"&gt;
#!/bin/bash
cp ~/.splunk-licence-violations ~/.splunk-licence-violations.last
/opt/splunk/bin/splunk show license |grep violation &amp;gt; ~/.splunk-licence-violations
if diff ~/.splunk-licence-violations ~/.splunk-licence-violations.last &amp;gt;/dev/null ; then
   echo "No new license violations."
else
   cat ~/.splunk-licence-violations |mail -s "Splunk license violation" -t "user@example.com"
fi
&lt;/pre&gt;

&lt;p&gt;
You can run this a couple times to prime the temp files. Then, you should start seeing "No new license violations." Complete the install by setting up cron:
&lt;/p&gt;

&lt;pre name="code" class="bash"&gt;
&gt;crontab -e

# run every morning at 1AM; Splunk tallies license violations at 12 midnight
00 1 * * * ~/splunk-license-alert &gt;/dev/null 2&gt;&amp;1
&lt;/pre&gt;]]></content:encoded><dsq:thread_identifier>/blog/2011/04/26/cron-job-to-mail-splunk-license-violation-alerts</dsq:thread_identifier><wp:post_date_gmt>2011-04-26 16:44:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>93</wp:comment_id><wp:comment_author>Chopper3</wp:comment_author><wp:comment_date_gmt>2011-09-09 10:28:15</wp:comment_date_gmt><wp:comment_content>Thank you very much indeed - it&amp;#39;s worth knowing that it&amp;#39;s &amp;#39;splunk list license&amp;#39; with =&amp;gt;v1.20 and the &amp;#39;-auth user:passwd&amp;#39; bit in there can come in handy too. But seriously, thank you.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: RPC/Encoded web services on Java 1.6</title><link>http://chase-seibert.github.com/blog/2008/12/09/rpcencoded-web-services-on-java-16</link><content:encoded><![CDATA[&lt;p&gt;Usually, when I want to call a remote web-service in Java, I would generate stub proxy classes at the command line with:&lt;/p&gt;

&lt;pre name="code" class="xml"&gt;
wsimport http://someurl?WSDL
&lt;/pre&gt;

&lt;p&gt;On a recent project, this command resulted in the error message:&lt;/p&gt;

&lt;pre name="code" class="xml"&gt;
parsing WSDL...

[ERROR] rpc/encoded wsdls are not supported in JAXWS 2.0.
  line 56 of http://someurl?WSDL
&lt;/pre&gt;

&lt;p&gt;The line in question is the start of a binding, which contains an elements definition that looks like:&lt;/p&gt;

&lt;pre name="code" class="xml"&gt;
        &amp;lt;soap:body use=&amp;quot;encoded&amp;quot; encodingStyle=&amp;quot;http://schemas.xmlsoap.org/soap/encoding/&amp;quot; namespace=&amp;quot;urn:SimpleRexServiceIntf-ISimpleRexService&amp;quot;/&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Doing some research, it seems that this is one of the earlier SOAP variants. None of the modern web service APIs support it. From &lt;a href="http://msdn.microsoft.com/en-us/magazine/cc164152.aspx"&gt;msdn&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;RPC (Remote Procedure Call) style, on the other hand, indicates that the SOAP body contains an XML representation of a method call such as the traditional distributed component technologies of DCOM, Corba, and others. RPC style uses the names of the method and its parameters to generate structures that represent a method's call stack (see section 7 of the SOAP 1.1 specification at http://www.w3c.org/TR/SOAP). These structures can then be serialized into the SOAP message according to a set of encoding rules. The SOAP specification defines a standard set of encoding rules for this purpose (see section 5 of the SOAP 1.1 spec) that codify how to map the most common programmatic data structures, such as structs and arrays, into an XML 1.0 format. Since RPC is traditionally used in conjunction with the SOAP encoding rules, the combination is referred to as rpc/encoded.
&lt;/p&gt;
&lt;p&gt;
The document/literal approach is more straightforward and easier for toolkits to get right because it simply relies on XML Schema to describe exactly what the message looks like on the wire. SOAP, however, was created before XML Schema existed. And back then they were focused primarily on objects (hence the O in SOAP), which led to the rpc/encoded way of doing things. Since universal description languages such as XML Schema or Web Services Description Language (WSDL) weren't available back then, the rpc/encoded style had to assume that additional metadata would be available for describing the method call (such as a type library, Microsoft .NET Framework assembly, or Java class file).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, Apache Axis v1 does still seem to work in Java 1.6. All I did was download axis-1.4.jar, and run the following command:&lt;/p&gt;

&lt;pre name="code" class="xml"&gt;
java -cp axis-1.4.jar;commons-logging-1.1.jar;commons-discovery-0.2.jar;jaxrpc-1.1.jar;saaj-1.1.jar;wsdl4j-1.4.jar;activation-1.1.jar;mail-1.4.jar org.apache.axis.wsdl.WSDL2Java http://someurl?WSDL
&lt;/pre&gt;]]></content:encoded><dsq:thread_identifier>/blog/2008/12/09/rpcencoded-web-services-on-java-16</dsq:thread_identifier><wp:post_date_gmt>2008-12-09 15:27:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>94</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2011-08-19 03:11:56</wp:comment_date_gmt><wp:comment_content>thanks mans!</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>95</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2011-10-03 12:24:57</wp:comment_date_gmt><wp:comment_content>Just wanted to add my thanks as well! This saved me a lot of headaches. Cheers!</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>96</wp:comment_id><wp:comment_author>Tudor</wp:comment_author><wp:comment_date_gmt>2012-04-11 16:00:42</wp:comment_date_gmt><wp:comment_content>Thanks a lot. Just what I need.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Hibernate Search - Shard Query Optimization</title><link>http://chase-seibert.github.com/blog/2009/06/12/hibernate-search-shard-query-optimization</link><content:encoded><![CDATA[&lt;p&gt;
Hibernate Search shards allow you to break down your index data into separate Lucene directories. Typically, indexes would be broken down either into N equals chunks (using a hashing algorithm), or by some logical criteria (customer, location, etc). The former was done for performance; smaller indexes mean faster indexing. The later was typically done to make customers feel better.
&lt;/p&gt;

&lt;p&gt;
In my current project, we have another reason. We're breaking down indexes by customer, but for purely technical reasons. Separate indexes are more robust; if you have a fatal corruption of an index, now you only have to re-index a fraction of your data. The other is speed. Since there is no reason for searches to be cross-customer, why not take advantage of smaller indexes for query performance?
&lt;/p&gt;

&lt;p&gt;
Unfortunately, Hibernate Search defaults to searching ALL the shards, and then merging the result sets. While some of this can be done in parallel, in the end the search is much slower than before. While this strategy is necessary in the hashing case, it's needlessly wasteful in the customer case. 
&lt;/p&gt;

&lt;p&gt;
Granted, the customer case was definitely not the initial shard use case. But it did get enough demand to warrant a new JIRA issue, &lt;a href="http://opensource.atlassian.com/projects/hibernate/browse/HSEARCH-251"&gt;HSEARCH-251&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I actually got to work with the Hibernate Search maintainers to provide this functionality. 
&lt;/p&gt;

&lt;pre&gt;
http://anonsvn.jboss.org/repos/hibernate/search/trunk
Revision: 16755
Author: epbernard
Date: 8:43:09 PM, Wednesday, June 10, 2009
Message:
HSEARCH-251 Query on a shard subset based on a filter activation
----
Modified : /search/trunk/src/main/docbook/en-US/modules/configuration.xml
Modified : /search/trunk/src/main/docbook/en-US/modules/query.xml
Modified : /search/trunk/src/main/java/org/hibernate/search/filter/ChainedFilter.java
Added : /search/trunk/src/main/java/org/hibernate/search/filter/FullTextFilterImplementor.java
Added : /search/trunk/src/main/java/org/hibernate/search/filter/ShardSensitiveOnlyFilter.java
Modified : /search/trunk/src/main/java/org/hibernate/search/query/FullTextFilterImpl.java
Modified : /search/trunk/src/main/java/org/hibernate/search/query/FullTextQueryImpl.java
Modified : /search/trunk/src/main/java/org/hibernate/search/store/IdHashShardingStrategy.java
Modified : /search/trunk/src/main/java/org/hibernate/search/store/IndexShardingStrategy.java
Modified : /search/trunk/src/main/java/org/hibernate/search/store/NotShardedStrategy.java
Modified : /search/trunk/src/test/java/org/hibernate/search/test/configuration/UselessShardingStrategy.java
Added : /search/trunk/src/test/java/org/hibernate/search/test/shards/CustomerShardingStrategy.java
Added : /search/trunk/src/test/java/org/hibernate/search/test/shards/CustomerShardingStrategyTest.java
&lt;/pre&gt;

&lt;p&gt;
You can download the latest build now, and give it a shot. Here is an example of how to use the new feature.
&lt;/p&gt;

&lt;p&gt;
Here is your entity, with the filter defined.
&lt;/p&gt;

&lt;pre name="code" class="java"&gt;
@Indexed(index="Email")
// this "impl" is only a flag, not the actual filter class
@FullTextFilterDef(name="shard", impl=ShardSensitiveOnlyFilter.class) 
public class Email {
...
&lt;/pre&gt;

&lt;p&gt;
Here is the filter.
&lt;/p&gt;

&lt;pre name="code" class="java"&gt;
public class ShardFilter {
  
    private Integer index;

    public void setIndex(Integer setIndex) {
        this.index = setIndex;
    }

    @Key
    public FilterKey getKey() {
        StandardFilterKey key = new StandardFilterKey();
        key.addParameter(index);
        return key;
    }

    @Factory
    public Filter getFilter() {        
  Query query = new TermQuery(new Term("index", index.toString()));
        return new CachingWrapperFilter(new QueryWrapperFilter(query));
    } 

}
&lt;/pre&gt;

&lt;p&gt;
Here is your indexing strategy, which implements the new method getDirectoryProvidersForQuer(). From here, you can define which shards a given Filter could possibly return data from.
&lt;/p&gt;

&lt;pre name="code" class="java"&gt;
public class SpecificShardingStrategy extends IdHashShardingStrategy { 

 @Override
 public DirectoryProvider&amp;lt;?&amp;gt;[] getDirectoryProvidersForQuery(FullTextFilterImplementor[] filters) {
    
  FullTextFilter filter = getFilter(filters, "shard");
  if (filter == null) {
   return getDirectoryProvidersForAllShards();
  }
  else {
   return new DirectoryProvider[] { getDirectoryProvidersForAllShards()[Integer.parseInt(filter.getParameter("index").toString())] };
  }
 }

 private FullTextFilter getFilter(FullTextFilterImplementor[] filters, String name) {
  for (FullTextFilterImplementor filter: filters) {
   if (filter.getName().equals(name)) return filter;
  }
  return null;
 } 

}
&lt;/pre&gt;

&lt;p&gt;
Finally, here is the actual search code.
&lt;/p&gt;

&lt;pre name="code" class="java"&gt;
FullTextSession fts = Search.getFullTextSession( s );
QueryParser parser = new QueryParser("id", new StopAnalyzer() );
FullTextQuery fullTextQuery = fts.createFullTextQuery( parser.parse( "body:message" ) );
fullTextQuery.enableFullTextFilter("shard").setParameter("index", 0);
&lt;/pre&gt;

&lt;p&gt;
Of course, there are many more ways to shard the cat. For example, the filter could be on customerID, region, etc. Thanks to the Hibernate Search team for incorporating my code!
&lt;/p&gt;]]></content:encoded><dsq:thread_identifier>/blog/2009/06/12/hibernate-search-shard-query-optimization</dsq:thread_identifier><wp:post_date_gmt>2009-06-12 13:31:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>97</wp:comment_id><wp:comment_author>Emmanuel Bernard</wp:comment_author><wp:comment_date_gmt>2009-06-13 12:39:55</wp:comment_date_gmt><wp:comment_content>Good post, and thatks for the push and contribution.&lt;br /&gt;One detail. ShardFilter is totally unnecessary as we use the ShardSensitiveOnlyFilter</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: CFEclipse StackOverflowError (Editor could not be initialized)</title><link>http://chase-seibert.github.com/blog/2009/08/03/cfeclipse-stackoverflowerror-editor-could-not-be-initialized</link><content:encoded><![CDATA[&lt;p&gt;
Even since I moved from Windows to Linux, I have been experiencing an exception trying to edit certain CFMs in CFEclipse.
&lt;/p&gt;

&lt;pre name="code" class="html"&gt;
eclipse.buildId=I20090611-1540
java.version=1.6.0_14
java.vendor=Sun Microsystems Inc.
BootLoader constants: OS=linux, ARCH=x86, WS=gtk, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os linux -ws gtk -arch x86 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.ui 4 0 2009-08-03 14:31:31.555
!MESSAGE Unable to create editor ID org.cfeclipse.cfml.editors.CFMLEditor: Editor could not be initialized.
!STACK 0
java.lang.StackOverflowError
 at java.util.regex.Pattern$Neg.match(Pattern.java:4590)
 at java.util.regex.Pattern$Branch.match(Pattern.java:4114)
 at java.util.regex.Pattern$GroupHead.match(Pattern.java:4168)
 at java.util.regex.Pattern$Loop.match(Pattern.java:4295)
 at java.util.regex.Pattern$GroupTail.match(Pattern.java:4227)
 at java.util.regex.Pattern$BranchConn.match(Pattern.java:4078)
 at java.util.regex.Pattern$CharProperty.match(Pattern.java:3345)
 at java.util.regex.Pattern$Neg.match(Pattern.java:4609)
 at java.util.regex.Pattern$Branch.match(Pattern.java:4114)
 at java.util.regex.Pattern$GroupHead.match(Pattern.java:4168)
 at java.util.regex.Pattern$Loop.match(Pattern.java:4295)
 at java.util.regex.Pattern$GroupTail.match(Pattern.java:4227)
 at java.util.regex.Pattern$BranchConn.match(Pattern.java:4078)
 at java.util.regex.Pattern$CharProperty.match(Pattern.java:3345)
 at java.util.regex.Pattern$Neg.match(Pattern.java:4609)
        ...
&lt;/pre&gt;

&lt;p&gt;
A few &lt;a href="http://groups.google.com/group/cfeclipse-users/search?group=cfeclipse-users&amp;q=stackoverflow&amp;qt_g=Search+this+group"&gt;google searches&lt;/a&gt; later, and it seemed that I was the only one with this problem. I tried re-installing the plugin, etc, to no avail.
&lt;/p&gt;

&lt;p&gt;
It turns out that that Java stack size was simply too small for some of the regular expressions CFEclipse was putting our admittedly massive CFMs through. The fix was to bump the stack size (via &lt;a href="http://publib.boulder.ibm.com/infocenter/wasinfo/v6r1/topic/org.eclipse.platform.doc.user/tasks/running_eclipse.htm"&gt;command-line args&lt;/a&gt;) up from the &lt;a href="http://e-docs.bea.com/jrockit/geninfo/diagnos/thread_basics.html"&gt;default&lt;/a&gt; 128k on 32-bit Linux.
&lt;/p&gt;

&lt;pre name="code" class="html"&gt;
/usr/share/eclipse/eclipse -vmargs -Xss2048k
&lt;/pre&gt;]]></content:encoded><dsq:thread_identifier>/blog/2009/08/03/cfeclipse-stackoverflowerror-editor-could-not-be-initialized</dsq:thread_identifier><wp:post_date_gmt>2009-08-03 14:46:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>98</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2009-10-26 10:17:04</wp:comment_date_gmt><wp:comment_content>Thanks a million!</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>99</wp:comment_id><wp:comment_author>Shannon Eric Peevey</wp:comment_author><wp:comment_date_gmt>2010-05-10 16:00:01</wp:comment_date_gmt><wp:comment_content>Thanks, Chase!  I was beating my head against the wall on this one...  I posted a link from my blog to yours.&lt;br /&gt;&lt;br /&gt;take care!</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>100</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2010-08-29 07:51:03</wp:comment_date_gmt><wp:comment_content>Yeah, just a &amp;quot;me too&amp;quot; in saying thanks.  I&amp;#39;ve just reverted from CF Builder back to CFEclipse (my CFB trial had expired), and was dismayed to see CFE not handling some of my larger / more complicated files and was thinking &amp;quot;eek... I need to fork our £200 for CFB&amp;quot;, but found your blog entry, upped my stack size and now all good.&lt;br /&gt;&lt;br /&gt;Thanks.&lt;br /&gt;&lt;br /&gt;-- &lt;br /&gt;Adam</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>101</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2010-08-30 03:21:55</wp:comment_date_gmt><wp:comment_content>Thanks, this solution saved loads of time. Fixed my birt generation error.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Java phone number format API</title><link>http://chase-seibert.github.com/blog/2009/02/09/java-phone-number-format-api</link><content:encoded><![CDATA[&lt;p&gt;
So, you have a database with millions of phone numbers with free-for-all formatting. Ie, the UI does not enforce any constraints and the users are typing in whatever they want. There must be a Java API to format these, right? Yeah, &lt;a href='http://stackoverflow.com/questions/487906/java-phone-number-format-api'&gt;not so much.&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
For example, a phone number in the system might look like any of the following:
&lt;p/&gt;

&lt;pre name="code" class="xml:nocontrols"&gt;
    (555) 478-1123
    555-478-1123 
    555.478.1123
    5554781123
&lt;/pre&gt;
 
&lt;p&gt;
You want an API that given the country of US, would produce the value "+1 (555) 478-1123" for all these. Of course, there are countless variations of the examples, as well as the complication of international phone numbers, which each have their own validation rules. 
&lt;/p&gt;

&lt;p&gt;
Well, I don't have a drop-in solution for you. But faced with the above situation, I did come up with the beginnings of a Java API that does this. For now, I have implemented US and UK formatting. &lt;a href='http://dl.dropbox.com/u/422013/bitkickers/JavaPhoneAPI.zip'&gt;Download the API here.&lt;/a&gt;
&lt;/p&gt;

&lt;pre name="code" class="java"&gt;
    PhoneNumberFactory phoneNumberFactory = new PhoneNumberFactory();

    PhoneNumber phoneNumber = phoneNumberFactory.create(CountryCodes.US, &amp;quot;5554781123&amp;quot;); 
    // phoneNumber.toString() == &amp;quot;+1 (555) 478-1123&amp;quot;

    PhoneNumber ukPhoneNumber = phoneNumberFactory.create(CountryCodes.UK, &amp;quot;442088709929&amp;quot;); 
    // phoneNumber.toString() == &amp;quot;+44 20 88 70 99 29&amp;quot;
&lt;/pre&gt;

&lt;p&gt;
You can define new countries by extending PhoneNumber, and implementing the logic to parse any string into country code, area code and a list of subscriber number groups. For example, "+1 (555) 478-1123" has a country code of "1", area code of "555" and a List of subscriber numbers ("478", "1123"). You can group subscriber numbers however you want, it's just a convenience for formatting.
&lt;/p&gt;

&lt;p&gt;
You can can also define your own formatters. Don't like my US format? No problem!
&lt;/p&gt;

&lt;pre name="code" class="java"&gt;
public class MyPhoneFormat implements PhoneFormat {

    public String format(PhoneNumber phoneNumber) {

        String value = phoneNumber.getCountryCode()
              + &amp;quot; &amp;quot; + phoneNumber.getAreaCode() + getPostAreaCode(phoneNumber);

        for (int i = 0; i &amp;lt; phoneNumber.getSubscriberNumbers().size(); i++)
            value += phoneNumber.getSubscriberNumber(i);

        return value.trim();
    }

    //  US phone numbers are one long run of digits, UK has a space
    private String getPostAreaCode(PhoneNumber phoneNumber) {
        return phoneNumber.getCountryCode().equalsIgnoreCase(CountryCodes.UK) ? &amp;quot; &amp;quot;: &amp;quot;&amp;quot;;
    }
}
&lt;/pre&gt;

&lt;p&gt;
This would output phone numbers in either "1 5554789119" (US) or "44 20 88709929" (UK).
&lt;/p&gt;]]></content:encoded><dsq:thread_identifier>/blog/2009/02/09/java-phone-number-format-api</dsq:thread_identifier><wp:post_date_gmt>2009-02-09 15:14:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>102</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2011-01-10 09:22:36</wp:comment_date_gmt><wp:comment_content>The UK formatting is extremely simplistic and is incorrect for more than 90% of allocated UK telephone numbers.&lt;br /&gt;&lt;br /&gt;The required pattern is way more complex than initially assumed. &lt;br /&gt;&lt;br /&gt;http://www.area-codes.org.uk/formatting.shtml&lt;br /&gt;&lt;br /&gt;http://www.aa-asterisk.org.uk/index.php/Number_Format</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Django forms date field format</title><link>http://chase-seibert.github.com/blog/2010/01/12/django-forms-date-field-format</link><content:encoded><![CDATA[&lt;p&gt;
Django defaults dates in forms to the format "2010-01-15". But changing the default format is fairly straight-forward, though there appears to be some &lt;a href="http://code.djangoproject.com/ticket/3672"&gt;confusion&lt;/a&gt; about how.
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
class MyForm(Form):
    
    # the default format is %Y-%m-%d
    date_available = forms.DateField(
        widget=forms.widgets.DateInput(format="%m/%d/%Y"))
&lt;/pre&gt;]]></content:encoded><dsq:thread_identifier>/blog/2010/01/12/django-forms-date-field-format</dsq:thread_identifier><wp:post_date_gmt>2010-01-12 13:33:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>103</wp:comment_id><wp:comment_author>Ram Sharma</wp:comment_author><wp:comment_date_gmt>2010-07-06 09:37:13</wp:comment_date_gmt><wp:comment_content>Thanks buddy... it really helped me.&lt;br /&gt;&lt;br /&gt;Ram</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>104</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2011-06-03 06:41:59</wp:comment_date_gmt><wp:comment_content>Nice tip ^_^ Very helpful!&lt;br /&gt;&lt;br /&gt;Thanks.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>105</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2011-11-29 21:32:37</wp:comment_date_gmt><wp:comment_content>works fine displaying the date in the right format but Im having problems validating it... I ask me to enter a valid date.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>106</wp:comment_id><wp:comment_author>Carlos</wp:comment_author><wp:comment_date_gmt>2011-12-10 20:45:27</wp:comment_date_gmt><wp:comment_content>Awesome!  Really helped.  Wish Django doc had real world examples like this.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Profile and reduce memory use in Django with .iterator()</title><link>http://chase-seibert.github.com/blog/2011/10/12/profile-and-reduce-memory-use-in-django-with-iterator</link><content:encoded><![CDATA[&lt;p&gt;
For the most part, objects allocated by Django are short-lived, and are eligible for garbage collection when the request ends. In our case, we also have some long running jobs using &lt;a href="http://celeryproject.org/"&gt;celery&lt;/a&gt;. One in particular, a job to create a several hundred megabyte XML file, was consistently using all the RAM on the machine.
&lt;/p&gt;

&lt;p&gt;
This wasn't too surprising because we were initially using Django templating to create the file, which keeps the entire response in memory while it's still being composed. But even after we &lt;a href="/2011/06/creating-large-xml-files-in-python-with.html"&gt;moved to a SAX parser&lt;/a&gt;, which is specifically designed for running with little memory by streaming the file, we were still running out of memory occasionally.
&lt;/p&gt;

&lt;p&gt;
We decided it was time to stop guessing, and profile the memory usage. Never having done this before, I did some research and came up with &lt;a href="http://www.lshift.net/blog/2008/11/14/tracing-python-memory-leaks"&gt;this excellent guide&lt;/a&gt; to using pdb for memory profiling.
&lt;/p&gt;

&lt;p&gt;
To get started, I needed something I could run from the command line, outside of the celery task framework. Using the &lt;a href="https://docs.djangoproject.com/en/dev/howto/custom-management-commands/"&gt;Django Command framework&lt;/a&gt;, I was easily able to compose a job that could run via manage.py.
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
# in file myapp/management/commands/xmlmemtest.py
from django.core.management.base import BaseCommand
from myapp.helpers.scheduler import write_job_board_feed
import uuid

class Command(BaseCommand):    
    def handle(self, *args, **options):
        write_job_board_feed(&amp;quot;simplyhired&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;justjobs&amp;quot;, nocache=uuid.uuid4())

# can be run via: ./manage.py xmlmemtest
&lt;/pre&gt;

&lt;p&gt;
With that, I was set to launch this process using pdb, the &lt;a href="http://docs.python.org/library/pdb.html"&gt;Python debugger&lt;/a&gt;.
&lt;/p&gt;

&lt;pre name="code" class="bash"&gt;
chase@chase:~$ pdb ./manage.py xmlmemtest 
-&amp;gt; from django.core.management import execute_manager
(Pdb) r

#... wait for a while until memory is getting high (will be much slower than usual) ...

# pause execution
&amp;lt;Ctrl+C&amp;gt;

# evoke the garbage collector manually to make sure you&amp;#39;re only seeing referenced objects
(Pdb) import gc
(Pdb) gc.collect()
58
(Pdb) gc.collect()
0

# show the top items in memory
(Pdb) import objgraph
(Pdb) objgraph.show_most_common_types(limit=5)
Job                        184791
builtin_function_or_method 57542
tuple                      55478
list                       14900
dict                       8631
&lt;/pre&gt;

&lt;p&gt;
I was excepting to see some SAX parser objects at the top of the list. Instead, most of the memory was tied up in Job objects, which are a Django model in my application. Looking at the function, jobs were first referenced in the following code block.
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
    for job in jobs:
        feed.write_entry(2, job)
&lt;/pre&gt;

&lt;p&gt;
Playing around a bit, I tried the following, which immediately solved the memory issue.
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
    for _job in jobs:
        job = Job.objects.get(id=_job.id)
        feed.write_entry(2, job)
&lt;/pre&gt;

&lt;p&gt;
Basically, doing a separate query for each job, and making sure it &lt;b&gt;goes out of scope&lt;/b&gt; after we're done using it. In retrospect, this was pretty obvious. So obvious, that Django even provides a handy idiom called &lt;a href="https://docs.djangoproject.com/en/dev/ref/models/querysets/#iterator"&gt;.iterator()&lt;/a&gt; to do just this.
&lt;/p&gt;

&lt;blockquote&gt;Evaluates the QuerySet (by performing the query) and returns an iterator (see PEP 234) over the results. A QuerySet typically caches its results internally so that repeated evaluations do not result in additional queries. In contrast, iterator() will read results directly, without doing any caching at the QuerySet level (internally, the default iterator calls iterator() and caches the return value). For a QuerySet which returns a large number of objects that you only need to access once, this can results in better performance and a significant reduction in memory.&lt;/blockquote&gt;]]></content:encoded><dsq:thread_identifier>/blog/2011/10/12/profile-and-reduce-memory-use-in-django-with-iterator</dsq:thread_identifier><wp:post_date_gmt>2011-10-12 10:12:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>107</wp:comment_id><wp:comment_author>akaihola</wp:comment_author><wp:comment_date_gmt>2012-02-10 02:30:41</wp:comment_date_gmt><wp:comment_content>Comparing your two last examples, I don&amp;#39;t understand how that change alone saves memory.&lt;br /&gt;&lt;br /&gt;Was the your &amp;quot;jobs&amp;quot; query exactly the same in both of those cases? Or did you use .iterator() in the latter example?</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>108</wp:comment_id><wp:comment_author>Chase Seibert</wp:comment_author><wp:comment_date_gmt>2012-02-10 09:13:26</wp:comment_date_gmt><wp:comment_content>If you reference fields on a list of objects that is still in scope, like jobs, each job record in the list will become fully populated with data from the database as you reference it, and that memory will not be freed until the entire jobs list goes out of scope.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Django/Heroku quickstart for existing applications</title><link>http://chase-seibert.github.com/blog/2012/04/13/djangoheroku-quickstart-for-existing-applications</link><content:encoded><![CDATA[&lt;p&gt;
Getting a brand new Django application running on Heroku is fairly simple. There is a great tutorial for it on &lt;a href="https://devcenter.heroku.com/articles/django"&gt;devcenter.heroku.com&lt;/a&gt;. I would recommend going through that, and getting it working. Here is my short version of their getting started notes, without the &lt;a href="http://pypi.python.org/pypi/virtualenv"&gt;virtualenv&lt;/a&gt; and &lt;a href="https://docs.djangoproject.com/en/dev/ref/django-admin/?from=olddocs"&gt;Django command&lt;/a&gt; stuff you probably already know.
&lt;/p&gt;

&lt;pre name="code" class="bash"&gt;
wget -qO- https://toolbelt.heroku.com/install.sh | sh
heroku login
heroku create --stack cedar
echo 'web: python manage.py runserver 0:$PORT' &gt; Procfile
heroku addons:add shared-database 
git push heroku master  # if you're in a branch locally, you can git push -f heroku localbranch:refs/heads/master
heroku run python manage.py syncdb
heroku ps:scale web=1
heroku ps
heroku logs
&lt;/pre&gt;

&lt;p&gt;
That should be enough to get a brand new Django app running. If you have an existing Django application, however, their documentation doesn't provide much guidance on common pitfalls.
&lt;/p&gt;

&lt;p&gt;
First of all, you may need a mechanism to over-ride settings.py on the production Heroku instance. First, you can add an environment variable:
&lt;/p&gt;

&lt;pre name="code" class="bash"&gt;
heroku config:add ENVIRONMENT=production
&lt;/pre&gt;

&lt;p&gt;
With that variable, you can easily create an over-ride for settings.py called settings_production.py:
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
# at the END of settings.py:
import os
ENVIRONMENT = os.environ.get('ENVIRONMENT', 'dev')  # dev, production, qa, etc
exec('from settings_%s import *' % ENVIRONMENT)
&lt;/pre&gt;

&lt;p&gt;
Heroku gives you a shared database for free. You can see the connect string on it with the heroku config command:
&lt;/p&gt;

&lt;pre name="code" class="bash"&gt;
...
DATABASE_URL =&gt; postgres://foobar:password@ec2-ip-address.amazonaws.com/instance
...
&lt;/pre&gt;

&lt;p&gt;
This would translate into the following in settings_production.py
&lt;/p&gt;

&lt;pre name="code" class="bash"&gt;
DATABASES = {
    'default': {
        'ENGINE': 'postgresql_psycopg2',
        'NAME': 'instance',
        'USER': 'foobar',
        'PASSWORD': 'password',
        'HOST': 'ec2-ip-address.amazonaws.com',
        'PORT': '',  # leave blank
    }
}
&lt;/pre&gt;

&lt;p&gt;
The Heroku directions for switching from Django's development web server to gunicorn don't work for Django 1.3, where there is no WSGI file. After adding gunicorn to requirements.txt, and 'gunicorn' to INSTALLED_APPS, I changed Procfile to the following:
&lt;/p&gt;

&lt;pre name="code" class="bash"&gt;
web: python manage.py run_gunicorn -b 0.0.0.0:$PORT
&lt;/pre&gt;

&lt;p&gt;
Getting Django's &lt;a href="https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/"&gt;staticfiles&lt;/a&gt; feature working was a little trickier. Heroku gives you a "ephemeral" file system, meaning that any changes you write to disk will not survive the next deploy, and may not even survive between heroku command-line sessions. This means that collectstatic must be run as part of the deploy, which you can also do in Profile:
&lt;/p&gt;

&lt;pre name="code" class="bash"&gt;
web: python manage.py collectstatic --noinput; python manage.py run_gunicorn -b 0.0.0.0:$PORT
&lt;/pre&gt;

&lt;p&gt;
Lastly, I wanted gunicorn to (at least temporarily) serve up the static resources itself. To do that, you will need to add the following to your urls.py:
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
urlpatterns += patterns('',
    (r'^static/(?P&amp;lt;path&amp;gt;.*)$', 'django.views.static.serve', {'document_root': settings.STATIC_ROOT}),
)
&lt;/pre&gt;

&lt;p&gt;
Heroku gives you SSL for free, at least when you're on *.herokuapp.com. The only tricky bit is that you need to tell Django which header to look at to determine if the original request was in SSL (Heroku will only speak plain HTTP to Django). Without this, any redirect from an HTTPS URL will direct the user back to HTTP. Just put the following in settings.py:
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https') 
&lt;/pre&gt;

&lt;p&gt;
Finally, I had to migrate my old data. If you're going from Postgres -&gt; Postres, or MySQL -&gt; MySQL, just use the herokup database restore tools. If you need to migrate from one to the other, things get a lot trickier. In my case, I ended up exporting to a JSON file, and re-importing. This was very buggy; I would not recommend it. 
&lt;/p&gt;]]></content:encoded><dsq:thread_identifier>/blog/2012/04/13/djangoheroku-quickstart-for-existing-applications</dsq:thread_identifier><wp:post_date_gmt>2012-04-13 16:15:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>109</wp:comment_id><wp:comment_author>Riku</wp:comment_author><wp:comment_date_gmt>2012-04-23 13:54:13</wp:comment_date_gmt><wp:comment_content>Hi, thanks for the simple article with all the code. You&amp;#39;re saying running gunicorn doesn&amp;#39;t work for django 1.3,  any ideas how to get that to work? I&amp;#39;m getting an error: &amp;quot;ImportError: No module named wsgi&amp;quot;? Thanks a lot for your help.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Django/Celery Quickstart (or, how I learned to stop using cron and love celery)</title><link>http://chase-seibert.github.com/blog/2010/07/09/djangocelery-quickstart-or-how-i-learned-to-stop-using-cron-and-love-celery</link><content:encoded><![CDATA[&lt;p&gt;
Websites often need tasks that run periodically, behind the scenes. Examples include sending email reminders, aggregating denormalized data and permanently deleting archived records. Very often the simplest solution is to setup a &lt;a href="https://help.ubuntu.com/community/CronHowto"&gt;cron&lt;/a&gt; job to hit a URL on the site that performs the task.
&lt;/p&gt;

&lt;p&gt;
Cron has the advantage of simplicity, but it's not not ideal for the job. You have to take steps to ensure that regular users of the site cannot hit those URLs directly. It also forces you to manage an external configuration. What if you forget to perform the configuration on the qa or production servers? It would be safer and easier if the configuration was in the code for the site.
&lt;/p&gt;

&lt;p&gt;
For Django sites, &lt;a href="http://ask.github.com/celery/getting-started/introduction.html"&gt;celery&lt;/a&gt; seems to be the solution of choice. Celery is really focused on being a distributed task queue, but it can also be a great scheduler. Their &lt;a href="http://ask.github.com/celery/index.html"&gt;documentation&lt;/a&gt; is excellent, but I found that they lack a quickstart guide for getting started with Django and celery, &lt;b&gt;just&lt;/b&gt; for replacing cron.
&lt;/p&gt;

&lt;p&gt;
Note: Celery typically runs with RabbitMQ as the back-end. For just task scheduling, this may be overkill. This guide starts out using kombu, which is backed by the database Django is already using. 
&lt;/p&gt;

&lt;ol&gt;

&lt;li&gt;
Install django-celery, ghettoq
&lt;pre name="code" class="bash"&gt;
sudo pip install django-celery
&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;
Edit settings.py, and add the celery config info
&lt;pre name="code" class="python"&gt;
INSTALLED_APPS = (
    ...
    'kombu.transport.django',
    'djcelery',
)

BROKER_URL = "django://" # tell kombu to use the Django database as the message queue

import djcelery
djcelery.setup_loader()
&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;
Add the new tables to the Django database
&lt;pre name="code" class="bash"&gt;
./manage.py syncdb
&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;
Create a file, tasks.py in your project (same level as models.py)
&lt;pre name="code" class="python"&gt;
from celery.task.schedules import crontab
from celery.decorators import periodic_task

# this will run every minute, see http://celeryproject.org/docs/reference/celery.task.schedules.html#celery.task.schedules.crontab
@periodic_task(run_every=crontab(hour="*", minute="*", day_of_week="*"))
def test():    
    print "firing test task"                  
&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;
Start the celery daemon in "beat" mode, which is required for scheduling
&lt;pre name="code" class="bash"&gt;
sudo ./manage.py celeryd -v 2 -B -s celery -E -l INFO
&lt;/pre&gt;
&lt;/li&gt;

&lt;/ol&gt;

&lt;p&gt;
At this point, you should see your celery tasks in the console output, and you should see the task firing every minute.
&lt;/p&gt;

&lt;pre name="code" class="bash"&gt;
[2012-03-02 09:34:49,170: WARNING/MainProcess]  

 -------------- celery@chase-VirtualBox v2.5.1
---- **** -----
--- * ***  * -- [Configuration]
-- * - **** ---   . broker:      django://localhost//
- ** ----------   . loader:      djcelery.loaders.DjangoLoader
- ** ----------   . logfile:     [stderr]@INFO
- ** ----------   . concurrency: 1
- ** ----------   . events:      ON
- *** --- * ---   . beat:        ON
-- ******* ----
--- ***** ----- [Queues]
 --------------   . celery:      exchange:celery (direct) binding:celery
                  

[Tasks]
  . myapp.tasks.test

[2012-03-02 09:34:49,236: INFO/PoolWorker-2] child process calling self.run()
[2012-03-02 09:34:49,239: WARNING/MainProcess] celery@chase-VirtualBox has started.
[2012-03-02 09:34:49,245: INFO/Beat] child process calling self.run()
[2012-03-02 09:34:49,249: INFO/Beat] Celerybeat: Starting...
[2012-03-02 09:34:49,283: INFO/Beat] Scheduler: Sending due task myapp.tasks.test
[2012-03-02 09:34:54,654: INFO/MainProcess] Got task from broker: myapp.tasks.test[39d57f82-fdd2-406a-ad5f-50b0e30a6492]
[2012-03-02 09:34:54,666: WARNING/PoolWorker-2] firing test task
[2012-03-02 09:34:54,667: INFO/MainProcess] Task myapp.tasks.test[39d57f82-fdd2-406a-ad5f-50b0e30a6492] succeeded in 0.00423407554626s: None
&lt;/pre&gt;

&lt;p&gt;
If you want, you can &lt;a href="http://ask.github.com/celery/getting-started/broker-installation.html#installing-rabbitmq"&gt;upgrade to RabbitMQ&lt;/a&gt;. Just make sure to &lt;a href="http://ask.github.com/celery/getting-started/first-steps-with-celery.html#configuration"&gt;update&lt;/a&gt; your setting.py, as well.
&lt;/p&gt;

&lt;p&gt;
You may also want to run &lt;a href="http://celeryproject.org/docs/cookbook/daemonizing.html"&gt;celeryd as a service&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Update 3/1/2012:&lt;/b&gt; updated instructions Kombu. Tested on Python 2.7.2 and Django 1.3.0 in a clean environment.
&lt;/p&gt;]]></content:encoded><dsq:thread_identifier>/blog/2010/07/09/djangocelery-quickstart-or-how-i-learned-to-stop-using-cron-and-love-celery</dsq:thread_identifier><wp:post_date_gmt>2010-07-09 12:24:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>110</wp:comment_id><wp:comment_author>Tiago S.</wp:comment_author><wp:comment_date_gmt>2010-07-16 17:24:55</wp:comment_date_gmt><wp:comment_content>Thanks for your article pointing that! I&amp;#39;ll certainly consider using celery instead of cron on my next project.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>111</wp:comment_id><wp:comment_author>Rock</wp:comment_author><wp:comment_date_gmt>2010-07-16 21:01:17</wp:comment_date_gmt><wp:comment_content>Thanks for the nice write up. It would have saved me a few hours if it had been posted a week earlier. Then again I used RabbitMQ but I have another project where ghettoq might be useful so that is a useful option that I did not know about.&lt;br /&gt;&lt;br /&gt;Here is a RabbotMQ tip: Note that you need to process a given queue at least once before events sent to that queue will show up in the standard rabbit commands that list queues, the number of queued events and such.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>112</wp:comment_id><wp:comment_author>Zach Peters</wp:comment_author><wp:comment_date_gmt>2010-07-16 21:40:03</wp:comment_date_gmt><wp:comment_content>Awesome article.  I think this is just the kick I needed to get started playing with celery.&lt;br /&gt;&lt;br /&gt;I really appreciated the way this was written - starting with the simplest thing that could work and then prompting to read on and expand on your own.&lt;br /&gt;&lt;br /&gt;I look forward to reading more!</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>113</wp:comment_id><wp:comment_author>chris.peplin</wp:comment_author><wp:comment_date_gmt>2010-07-19 18:14:44</wp:comment_date_gmt><wp:comment_content>What versions of djcelery and ghettoq were you using? There have been updates recently, and since I can&amp;#39;t seem to get your simple example to work, I wonder if something broke.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>114</wp:comment_id><wp:comment_author>Chase Seibert</wp:comment_author><wp:comment_date_gmt>2010-07-20 10:19:07</wp:comment_date_gmt><wp:comment_content>I am using Django 1.1.1, djcelery 2.0.0 and ghettoq-0.1.2</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>115</wp:comment_id><wp:comment_author>chris.peplin</wp:comment_author><wp:comment_date_gmt>2010-07-20 11:01:39</wp:comment_date_gmt><wp:comment_content>Thanks - there was a problem with Django 1.2.1 + djcelery 2.0.1 + ghettoq 0.4.0 that was fixed with ghettoq 0.4.1 today.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>116</wp:comment_id><wp:comment_author>wolever.net</wp:comment_author><wp:comment_date_gmt>2010-10-06 11:42:47</wp:comment_date_gmt><wp:comment_content>Cool — this is exactly what I was looking for. Thanks!</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>117</wp:comment_id><wp:comment_author>rozita</wp:comment_author><wp:comment_date_gmt>2010-10-10 02:24:39</wp:comment_date_gmt><wp:comment_content>Thanks a lot for your good article. Would you please guide me how I can setup django-celery on a production server? I want to know how celeryd can be started automatically without any need to use manage.py manually.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>118</wp:comment_id><wp:comment_author>ask</wp:comment_author><wp:comment_date_gmt>2010-10-19 07:12:53</wp:comment_date_gmt><wp:comment_content>@rozita&lt;br /&gt;&lt;br /&gt;See this init script here:&lt;br /&gt;&lt;br /&gt;http://github.com/ask/celery/blob/master/contrib/generic-init.d/celeryd&lt;br /&gt;&lt;br /&gt;Here&amp;#39;s my /etc/default/celeryd configuration file, which sets up Celery for a Django project in /opt/Opal/release:&lt;br /&gt;http://pastie.org/1216111</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>119</wp:comment_id><wp:comment_author>Dan</wp:comment_author><wp:comment_date_gmt>2010-11-09 13:10:08</wp:comment_date_gmt><wp:comment_content>I was just looking for a simple way to use Celery. Their documentation frankly *sucks* (&amp;quot;First Steps with Celery&amp;quot; entices you with how easy it is without showing you how to set it up), unless you care to learn everything about it from the get-go.  So even though I intend to use celery for queuing tasks rather than periodic ones (for now, anyway), your post should be very useful (assuming no snags), thank you for the short start-to-finish steps. I&amp;#39;m glad I don&amp;#39;t have to bother with RabbitMQ for now.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>120</wp:comment_id><wp:comment_author>Kiuz</wp:comment_author><wp:comment_date_gmt>2010-11-25 06:04:59</wp:comment_date_gmt><wp:comment_content>At this command&lt;br /&gt;1. sudo ./manage.py celeryd -v 2 -B -s celery -E -l INFO &lt;br /&gt;&lt;br /&gt;You must add &amp;quot;-I tasks&amp;quot; to load tasks.py file ...</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>121</wp:comment_id><wp:comment_author>Chase Seibert</wp:comment_author><wp:comment_date_gmt>2010-11-30 22:54:05</wp:comment_date_gmt><wp:comment_content>Huh... good catch Kiuz. You can also add the following to your settings.py:&lt;br /&gt;&lt;br /&gt;CELERY_IMPORTS = (&amp;quot;tasks&amp;quot;, )</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>122</wp:comment_id><wp:comment_author>Andrew</wp:comment_author><wp:comment_date_gmt>2011-04-23 06:13:19</wp:comment_date_gmt><wp:comment_content>This blog, whilst insightful, is sadly out of date.&lt;br /&gt;&lt;br /&gt;ghettoq is deprecated and no longer compatible with djcelery. kombu is used instead.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>123</wp:comment_id><wp:comment_author>Chase Seibert</wp:comment_author><wp:comment_date_gmt>2012-03-02 10:38:55</wp:comment_date_gmt><wp:comment_content>Good catch Andrew. I just updated the post.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>124</wp:comment_id><wp:comment_author>Tobu</wp:comment_author><wp:comment_date_gmt>2012-03-27 11:06:29</wp:comment_date_gmt><wp:comment_content>Thank you for the up-to-date instructions, and for making celery &lt;em&gt;simple&lt;/em&gt;.&lt;br /&gt;&lt;br /&gt;For a lightweight task queue with cron support that is easily integrated to Django, you also have two projects by Charles Leifer: the django-utils queue, which has no hard dependencies, and Huey, which currently requires Redis.&lt;br /&gt;&lt;br /&gt;To keep configuration minimal, django-supervisor makes it easy and convenient to spawn the queue engine along with your choice of runserver or wsgi container.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>125</wp:comment_id><wp:comment_author>Unknown</wp:comment_author><wp:comment_date_gmt>2012-05-25 05:39:14</wp:comment_date_gmt><wp:comment_content>Thanks for the instructions. A suggestion: &amp;quot; This guide starts out using kombu, which is backed by the database Django is already using.&amp;quot; makes it seem like kombu is backed by the Django database. My understanding is that Kombu is implemented with a variety of transports, one of which is Django. Found it a bit confusing as a messaging newbie.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Apache fix for IE "webpage has expired" on back button</title><link>http://chase-seibert.github.com/blog/2010/03/04/apache-fix-for-ie-webpage-has-expired-on-back-button</link><content:encoded><![CDATA[&lt;p&gt;
When you refresh a webpage that was the result of a HTTP POST, your browser asks you if you want to reload.
&lt;/p&gt;

&lt;p&gt;
   &lt;img src="http://lh3.ggpht.com/_EE2zVzGv1Ds/S5FfHNuReqI/AAAAAAAALKM/WVIh1IyW6vk/s800/Screenshot-Confirm.png" /&gt;
&lt;/p&gt;

&lt;p&gt;
The reason for this dialog is to stop the user from inadvertently submitting the same blog post/email message/payment details multiple times. That behaviour is standardised across all browsers. What's not standardised is what happens when you use the "Back" button to navigate to a previous POST page. In most browsers, you get the page from your cache. In IE, you get the dreaded "webpage has expired":
&lt;/p&gt;

&lt;p&gt;
   &lt;img src="http://lh5.ggpht.com/_EE2zVzGv1Ds/S5FgR6HI5uI/AAAAAAAALKU/got-17Gpagg/s800/expired_page.png" /&gt;
&lt;/p&gt;

&lt;p&gt;
The intention here is good. This is a fool proof mechanism for keeping the user from submitting that page again. But what if your site can actually handle that? Why break the back button this way? A good counter example is a search engine. The search string may be sent via HTTP POST, but you would still like the user to be able to hit "back", change the search string, and hit submit again. In IE, you need a work-around for this.
&lt;/p&gt;

&lt;p&gt;
The most common work-around is to &lt;a href="http://stackoverflow.com/questions/1580085/show-webpage-has-expired-on-back-button#answer-1580126"&gt;redirect the POST to a GET&lt;/a&gt; on the server side, aka the &lt;a href="http://www.theserverside.com/tt/articles/article.tss?l=RedirectAfterPost"&gt;PRG Pattern&lt;/a&gt;. This adds some back-end code, but generally solves the problem. However, it can get complicated if you are doing server-side validation, as you generally want to show the form again with validation exceptions in that case. So then you have to persist the temporary state of the FORM in either the session state or the database... messy.
&lt;/p&gt;

&lt;p&gt;
Another solution is to use GETs in the first place. This is ok for some things, like Google searches, but does not work if you need to &lt;a href="http://classicasp.aspfaq.com/forms/what-is-the-limit-on-querystring/get/url-parameters.html"&gt;pass a lot of form data&lt;/a&gt; between pages. Also, it ignores the principle of &lt;a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.1.2"&gt;idempotence&lt;/a&gt;, which for HTTP means that you should not use GETs for state-changes.
&lt;/p&gt;

&lt;p&gt;
The work-around I have been using recently is to not send a &lt;a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.44"&gt;Vary header&lt;/a&gt; for IE only.
&lt;/p&gt;

&lt;blockquote&gt;The Vary field value indicates the set of request-header fields that fully determines, while the response is fresh, whether a cache is permitted to use the response to reply to a subsequent request without revalidation.&lt;/blockquote&gt;

&lt;p&gt;
In Apache, this is a simple configuration change in httpd.conf:
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
BrowserMatch MSIE force-no-vary
&lt;/pre&gt;

&lt;p&gt;
The practical effect is that when you go "back" to a POST, IE simply gets the page from the history cache. No request at all goes to the server side. I would be interested in hearing about potential down-sides of this solution, other than the fact that the user can submit the form twice. In my case, this is handled already by the &lt;a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery"&gt;CSRF&lt;/a&gt; token.
&lt;/p&gt;]]></content:encoded><dsq:thread_identifier>/blog/2010/03/04/apache-fix-for-ie-webpage-has-expired-on-back-button</dsq:thread_identifier><wp:post_date_gmt>2010-03-04 11:50:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>126</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2011-02-09 05:31:37</wp:comment_date_gmt><wp:comment_content>Just what I was looking for - thank you!</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>127</wp:comment_id><wp:comment_author>Raido</wp:comment_author><wp:comment_date_gmt>2011-03-16 02:39:32</wp:comment_date_gmt><wp:comment_content>Thanks, worked like charm. &lt;br /&gt;Currently no drawbacks discovered. :)</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>128</wp:comment_id><wp:comment_author>jkurrle</wp:comment_author><wp:comment_date_gmt>2011-04-01 11:54:19</wp:comment_date_gmt><wp:comment_content>Wow, a one line fix that does the job!  I&amp;#39;m impressed!  Thanks!</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>129</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2011-11-01 08:18:24</wp:comment_date_gmt><wp:comment_content>Great! Great! Great!</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>130</wp:comment_id><wp:comment_author>Kiman</wp:comment_author><wp:comment_date_gmt>2011-12-14 16:41:35</wp:comment_date_gmt><wp:comment_content>does anybody tried this on ssl? In my case it only works for http.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>131</wp:comment_id><wp:comment_author>Aired</wp:comment_author><wp:comment_date_gmt>2012-01-31 13:58:30</wp:comment_date_gmt><wp:comment_content>This is a great tip, it can also be added to .htaccess if you do not have access to your http.conf such as paid or shared hosting services. In regards to Kiman&amp;#39;s question it really shouldn&amp;#39;t work with HTTPS I haven&amp;#39;t verified that just yet, but in theory it should not.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>132</wp:comment_id><wp:comment_author>El Probe</wp:comment_author><wp:comment_date_gmt>2012-06-18 10:21:08</wp:comment_date_gmt><wp:comment_content>Thank you guys. This saved us at least one day of work!!!</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: click on a link (follow) via jQuery/JavaScript</title><link>http://chase-seibert.github.com/blog/2010/04/09/click-on-a-link-follow-via-jqueryjavascript</link><content:encoded><![CDATA[&lt;p&gt;
You might reasonably assume that it would be possible to fire a click event on an "A" element (link) via JavaScript, at which point the browser would fire any click event handlers currently attached, or otherwise just follow the link. But you would be wrong, at least in the case of Firefox.
&lt;/p&gt;

&lt;blockquote&gt;
The click method is intended to be used with INPUT elements of type button, checkbox, radio, reset or submit. Gecko does not implement the click method on other elements that might be expected to respond to mouse–clicks such as links (A elements), nor will it necessarily fire the click event of other elements. 
  - &lt;a href="https://developer.mozilla.org/en/DOM/element.click"&gt;Mozila Documentation&lt;/a&gt;
&lt;/blockquote&gt;

&lt;p&gt;
Why is that? It seems that Firefox is &lt;a href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-2651361"&gt;following the standard&lt;/a&gt; quite strictly, whereas IE has no problems automating link clicks. There may also be a sandbox security argument here, but personally I don't buy that as long as we are allowing &lt;a href="http://trevordavis.net/blog/tutorial/ajax-forms-with-jquery/"&gt;JavaScript to fire FORM POSTS&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Regardless, a cross browser solution is needed. At first blush, just setting window.location directly seems to work.
&lt;/p&gt;

&lt;pre name="code" class="javascript"&gt;
   window.location = $("a#my-link").attr("href");
&lt;/pre&gt;

&lt;p&gt;
This naive solution has serious drawbacks; IE will not post a &lt;a href="http://en.wikipedia.org/wiki/HTTP_referrer"&gt;HTTP Referrer&lt;/a&gt; header, and the back button may skip pages navigated to this way. However, it may be an acceptable solution depending on your application.
&lt;/p&gt;

&lt;p&gt;
If you have control over the HTML itself, a better solution is to just use FORMs instead. It's trivial to submit a form via jQuery. It's even possible to make the button look somewhat like a HTML link.
&lt;/p&gt;

&lt;pre name="code" class="html"&gt;

&amp;lt;!-- was &amp;lt;a href="/my-link-url"&amp;gt;Click me&amp;lt;/a&amp;gt; --&amp;gt;
&amp;lt;form id="my-form" action="/my-link-url" action="get"&amp;gt;
   &amp;lt;input class="button-link" type="submit" value="Click me" /&amp;gt;
&amp;lt;/form&amp;gt;

&amp;lt;script&amp;gt;
   // simulate a user clicking the "link"
   $(".button-link").click();

   // you could also just submit the form directly, depending on what's easier
   $("form#my-form").submit();
&amp;lt;/script&amp;gt;

&amp;lt;style&amp;gt;
   .button-link {
      background-color:white;
      border:0;
      color:blue;
      text-decoration:underline;
      font-size:1em;
      font-family:inherit;
      cursor:pointer;
   }
&amp;lt;/style&amp;gt;

&lt;/pre&gt;]]></content:encoded><dsq:thread_identifier>/blog/2010/04/09/click-on-a-link-follow-via-jqueryjavascript</dsq:thread_identifier><wp:post_date_gmt>2010-04-09 11:41:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>133</wp:comment_id><wp:comment_author>Edgar Peixoto</wp:comment_author><wp:comment_date_gmt>2011-08-12 19:23:29</wp:comment_date_gmt><wp:comment_content>I am brazilian but I had to comment. Your article was just what I need. Thanks.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>134</wp:comment_id><wp:comment_author>otterpupp</wp:comment_author><wp:comment_date_gmt>2012-03-01 14:03:12</wp:comment_date_gmt><wp:comment_content>how about something like this?&lt;br /&gt;&lt;br /&gt;jQuery.fn.followLink = function() {&lt;br /&gt;  $.browser.msie ? : this.click() : window.location = this.attr(&amp;#39;href&amp;#39;);&lt;br /&gt;  return this;&lt;br /&gt;}</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Using pgpool2 to timeout idle Postgres connections from Django</title><link>http://chase-seibert.github.com/blog/2011/09/30/using-pgpool2-to-timeout-idle-postgres-connections-from-django</link><content:encoded><![CDATA[&lt;p&gt;
Django has a &lt;a href="http://thebuild.com/blog/2010/10/25/django-and-postgresql-idle-in-transaction-connections/"&gt;well known issue&lt;/a&gt; with "&amp;lt;IDLE&amp;gt; in transaction" queries piling up. I have found that simply "&amp;lt;IDLE&amp;gt;" queries also have a tendency to hang out. This can cause problems for a high traffic site, as you can run out of open connections slots on the database side.
&lt;/p&gt;

&lt;p&gt;
To see if you're affected, you can run a database query to see the status of open connections.
&lt;/p&gt;

&lt;pre name="code" class="sql"&gt;
&amp;gt;select count(*), current_query from pg_stat_activity group by current_query;
 count |                                current_query                                 
-------+------------------------------------------------------------------------------
    31 | &amp;lt;IDLE&amp;gt; in transaction
    54 | &amp;lt;IDLE&amp;gt;
     1 | select count(*), current_query from pg_stat_activity group by current_query;
(3 rows)

&amp;gt;SHOW max_connections;
125
&lt;/pre&gt;

&lt;p&gt;
In this case, you can see that 86 out of a possible 125 connections are open, and there is only one "real" query running. After a while, you might start seeing the &lt;b&gt;OperationalError: FATAL:  sorry, too many clients already&lt;/b&gt; error from Postgres, by way of Django.
&lt;/p&gt;

&lt;p&gt;
Why are these connections hanging out? Maybe you're &lt;a href="http://stackoverflow.com/questions/1303654/threaded-django-task-doesnt-automatically-handle-transactions-or-db-connections"&gt;opening a transaction and not closing it&lt;/a&gt;. In my case, I have no idea. But I don't really care either, I just want them closed after say 90 seconds. Surprisingly, there is no configuration option in Django or Postgres for this. Instead, you have to rely on a Postgres add-on like &lt;a href="http://pgpool.projects.postgresql.org/"&gt;pgpool2&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Here are my notes for installing pgpool2 on Ubuntu, fixing a bug in the Ubuntu 11.04 init script and configuring a 90 second connection timeout. In this example, I'm installing pgpool2 on the Postgres database server itself, and having pgpool2 take over post 5432, moving Postgres itself to 5431 (to make it a seamless transition as far as Django config is concerned).
&lt;/p&gt;

&lt;pre name="code" class="bash"&gt;
apt-get install pgpool2 

vim /etc/init.d/pgpool2 
PIDFILE=/var/run/pgpool/pgpool.pid 

vim /etc/pgpool.conf 
port = 5432 
connection_life_time = 90 
client_idle_limit = 90 
backend_hostname0 = &amp;#39;localhost&amp;#39; 
backend_port0 = 5431 
backend_weight0 = 1 

vim /etc/postgresql/8.4/main/postgresql.conf 
port = 5431 

/etc/init.d/postgresql-8.4 stop 
/etc/init.d/postgresql-8.4 start 
service pgpool2 restart
&lt;/pre&gt;
]]></content:encoded><dsq:thread_identifier>/blog/2011/09/30/using-pgpool2-to-timeout-idle-postgres-connections-from-django</dsq:thread_identifier><wp:post_date_gmt>2011-09-30 13:24:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>135</wp:comment_id><wp:comment_author>Rich Jones - Gun.io</wp:comment_author><wp:comment_date_gmt>2012-04-16 19:53:15</wp:comment_date_gmt><wp:comment_content>Very helpful! Really appreciate you posting this.&lt;br /&gt;&lt;br /&gt;I.. think it helped, at least. So much going on, traffic fluctuations, terror.. this stuff is hard to debug!</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Python: Convert your FBML Facebook app to IFRAME</title><link>http://chase-seibert.github.com/blog/2011/04/01/python-convert-your-fbml-facebook-app-to-iframe</link><content:encoded><![CDATA[&lt;p&gt;
Recently, users started reporting that our Facebook app was returning a blank screen. Tracking it down, it turned out that it was specifically when the user was in the new "Use Facebook as a Page" mode. Some other &lt;a href="http://forum.developers.facebook.net/viewtopic.php?id=89563"&gt;developers have reported&lt;/a&gt; a similar issue. Given that FBML apps were recently deprecated, I figured it was time to migration to IFRAMEs.
&lt;/p&gt;

&lt;blockquote&gt;With our recent launch of Requests and the support for iframe on Pages Tabs, we are now ready to move forward with our previously announced plans to deprecate FBML and FBJS as a primary technology for building apps on Facebook. On March 11, 2011, you will no longer be able to create new FBML apps and Pages will no longer be able to add the Static FBML app. While all existing apps on Pages using FBML or the Static FBML app will continue to work, we strongly recommend that these apps transition to iframes as soon as possible. - &lt;a href="http://developers.facebook.com/blog/post/462"&gt;Facebook Developers Blog&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;
The first big different is the authentication model. Instead of passing the facebook page id directly, they are now passing a &lt;a href="http://developers.facebook.com/docs/authentication/signed_request/"&gt;signed_request field&lt;/a&gt;. I was able to track down some &lt;a href="http://sunilarora.org/parsing-signedrequest-parameter-in-python-bas"&gt;open source code&lt;/a&gt;, and then modify it myself to only optionally take a secret, and remain backwards compatible with the FBML fb_sig_page_id parameter in Django.
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
import base64
import hashlib
import hmac
import simplejson as json

# from http://sunilarora.org/parsing-signedrequest-parameter-in-python-bas

def base64_url_decode(inp):
    padding_factor = (4 - len(inp) % 4) % 4
    inp += "="*padding_factor 
    return base64.b64decode(unicode(inp).translate(dict(zip(map(ord, u'-_'), u'+/'))))

def parse_signed_request(signed_request, secret=None):

    l = signed_request.split('.', 2)
    encoded_sig = l[0]
    payload = l[1]

    sig = base64_url_decode(encoded_sig)
    data = json.loads(base64_url_decode(payload))

    if data.get('algorithm').upper() != 'HMAC-SHA256':
        print "Facebook: Unknown algorithm"
        return None
    else:
        if secret:
            expected_sig = hmac.new(secret, msg=payload, digestmod=hashlib.sha256).digest()
    
    if secret and sig != expected_sig:
        return None
    
    return data

def get_facebook_page_id(request):
    facebook_page_id = request.REQUEST.get("fb_sig_page_id")
    if not facebook_page_id:
        signed_request = request.REQUEST.get("signed_request")
        if signed_request and "." in signed_request:
            data = parse_signed_request(signed_request)
            #{'user_id': 'XXX', 'algorithm': 'HMAC-SHA256', 'expires': 0, 
            # 'oauth_token': 'XXX', 
            # 'user': {'locale': 'en_US', 'country': 'us', 'age': {'min': 21}}, 'issued_at': 1301682530, 'page': 
            # {'admin': True, 'liked': False, 'id': 'XXX'}}
            page = data.get("page")            
            if page:
                facebook_page_id = page.get("id")
                
    return facebook_page_id  
&lt;/pre&gt;

&lt;p&gt;
The only change to my existing view code was to call get_facebook_page_id(request) instead of just request.REQUEST.get("fb_sig_page_id").
&lt;/p&gt;

&lt;p&gt;
The second big change was that you must style your apps yourself if you want it to look like the rest of Facebook in terms of fonts and colors. FBML apps were pretty locked down, which sucked in a lot of ways, but at least it automatically looked like the rest of Facebook. In any case, not such a big deal:
&lt;/p&gt;

&lt;pre name="code" class="html"&gt;
/* put a facebook-app class on your BODY element, or a box div around all your content */
.facebook-app { 
    font-size: 11px;
    color: #333;
    font-family: 'lucida grande', tahoma, verdana, arial;
} 
.facebook-app a { color: #3B5998; text-decoration: none; }
&lt;/pre&gt;

&lt;p&gt;
I didn't have to change my HTML at all; it still omits the html/body tags just like FBML apps are required to do, but at least it's backwards compatible. In fact, I can switch my app between FBML and IFRAME modes and not see much difference.
&lt;/p&gt;]]></content:encoded><dsq:thread_identifier>/blog/2011/04/01/python-convert-your-fbml-facebook-app-to-iframe</dsq:thread_identifier><wp:post_date_gmt>2011-04-01 15:53:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>136</wp:comment_id><wp:comment_author>michael stevens</wp:comment_author><wp:comment_date_gmt>2011-04-22 20:48:01</wp:comment_date_gmt><wp:comment_content>Pleassssssssse help me!&lt;br /&gt;I just want to convert this FBML CODE to HTML for a Preview image on my video with an app HTML:&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Thx in advance...&lt;br /&gt;Sorry for my english cause I&amp;#39;m french :((((((</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Backup your Amazon order history with Python</title><link>http://chase-seibert.github.com/blog/2011/01/15/backup-your-amazon-order-history-with-python</link><content:encoded><![CDATA[&lt;p&gt;
Ever wanted to download your Amazon order history? Maybe you want to get it into a spreadsheet, or just keep it around in case Amazon decides to delete this information. Here is some Python code to screen scrape your account pages.
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
import sys
from optparse import OptionParser  
import datetime
import mechanize
from BeautifulSoup import BeautifulSoup
import pprint

"""
Usage: python amazon.py --username=foo --password=bar --firstyear=2004
"""

def getOptions():
   arguments = OptionParser()
   arguments.add_options(["--username", "--password", "--firstyear"])
   return arguments.parse_args()[0]

def _text(node):
      return "".join([unicode(s) for s in node.contents]).strip()

def _parse_orders(html):
      soup = BeautifulSoup(html)
      orders = []
      for order in soup.findAll("div", {"class": "order"}):
            date = order.find("h2")
            for item in order.findAll("li", {"class": "item "}):
                  title = item.find("span", {"class": "item-title"})
                  link = item.find("a")
                  image = item.find("img")
                  orders.append({
                        "date": _text(date),
                        "title": _text(title),
                        "link": link["href"],
                        "image": image["src"]
                  })     
      return orders

if __name__ == '__main__': 

      options = getOptions()

      br = mechanize.Browser()
      br.set_handle_robots(False)
      br.addheaders = [("User-agent", "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.2.13) Gecko/20101206 Ubuntu/10.10 (maverick) Firefox/3.6.13")]

      sign_in = br.open("http://www.amazon.com/gp/flex/sign-out.html")

      br.select_form(name="sign-in")
      br["email"] = options.username
      br["password"] = options.password
      logged_in = br.submit()

      error_str = "The e-mail address and password you entered do not match any accounts on record."
      if error_str in logged_in.read():
            print error_str
            sys.exit(1)

      orders = []
      for year in range(int(options.firstyear),  datetime.datetime.now().year):
            orders_html = br.open("https://www.amazon.com/gp/css/history/orders/view.html?orderFilter=year-%s&amp;amp;startAtIndex=1000" % year)
            new_orders = _parse_orders(orders_html.read())
            if new_orders:
                  orders.append(new_orders)

      if len(orders) == 0:
            print "No orders found."
            sys.exit(1)

      pp = pprint.PrettyPrinter(indent=4)
      pp.pprint(orders)

&lt;/pre&gt;

&lt;pre name="code" class="bash"&gt;
# usage example, your username and password are your Amazon login. The firstyear is the year of your oldest order.
python amazon.py --username=foo --password=bar --firstyear=2004
&lt;/pre&gt;

&lt;pre name="code" class="python"&gt;
# example output (json)
    [   {   'date': u'November 26, 2007',
            'image': u'https://images-na.ssl-images-amazon.com/images/I/517SDCCC3KL._SX100_.jpg',
            'link': u'http://www.amazon.com/gp/product/0847827852/ref=oss_product',
            'title': u'Chip Kidd: Book One: Work: 1986-2006 (Chip Kidd)'},
        {   'date': u'November 23, 2007',
            'image': u'https://images-na.ssl-images-amazon.com/images/I/118MVgvXzoL._SX100_.jpg',
            'link': u'http://www.amazon.com/gp/product/B000OUP9NE/ref=oss_product',
            'title': u'Canon Black Ink Cartridge &amp;amp;#45; PGI5'},
        {   'date': u'November 23, 2007',
            'image': u'https://images-na.ssl-images-amazon.com/images/I/41sW%2B3x4VJL._SY100_.jpg',
            'link': u'http://www.amazon.com/gp/product/B000BUWNH2/ref=oss_product',
            'title': u'Canon CLI-8 4-Color Multipack Ink Tanks'},
        {   'date': u'November 22, 2007',
            'image': u'https://images-na.ssl-images-amazon.com/images/I/51YT5W1SEeL._SY100_.jpg',
            'link': u'http://www.amazon.com/gp/product/B0002F5E0E/ref=oss_product',
            'title': u'Meinl Kenny Aronoff Steel Bell Series Cowbell,  8 Inches'},

        ...
&lt;/pre&gt;

&lt;p&gt;
Please, drop me a comment if you have any bug fixes or interesting use cases for this code.
&lt;/p&gt;]]></content:encoded><dsq:thread_identifier>/blog/2011/01/15/backup-your-amazon-order-history-with-python</dsq:thread_identifier><wp:post_date_gmt>2011-01-15 12:19:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>137</wp:comment_id><wp:comment_author>Resolver Developers</wp:comment_author><wp:comment_date_gmt>2011-01-18 10:35:59</wp:comment_date_gmt><wp:comment_content>Nice!  I was just busy this week using BeautifulSoup and mechanize to screen-scrape some supermarket sites - will publish a post on it soon.  I definitely like the idea of using screen-scraping to back up data that&amp;#39;s held on otherwise-closed systems...  am lookin&amp;#39; at facebook here...</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>138</wp:comment_id><wp:comment_author>Chase Seibert</wp:comment_author><wp:comment_date_gmt>2011-01-18 11:49:26</wp:comment_date_gmt><wp:comment_content>Facebook actually has a decent API. I wish Amazon had one for this information. Screen scraping always makes me feel dirty ;)</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>139</wp:comment_id><wp:comment_author>davidu</wp:comment_author><wp:comment_date_gmt>2011-02-24 11:20:41</wp:comment_date_gmt><wp:comment_content>There is a very small off by one bug.&lt;br /&gt;&lt;br /&gt;--- amazon_order.py.old 2011-02-24 16:18:03.000000000 +0000&lt;br /&gt;+++ amazon_order.py 2011-02-24 16:18:13.000000000 +0000&lt;br /&gt;@@ -55,7 +55,7 @@ if __name__ == &amp;#39;__main__&amp;#39;:&lt;br /&gt;             sys.exit(1)&lt;br /&gt; &lt;br /&gt;       orders = []&lt;br /&gt;-      for year in range(int(options.firstyear), datetime.datetime.now().year):&lt;br /&gt;+      for year in range(int(options.firstyear), datetime.datetime.now().year+1):&lt;br /&gt;             orders_html = br.open(&amp;quot;https://www.amazon.com/gp/css/history/orders/view.html?orderFilter=year-%s&amp;amp;startAtIndex=1000&amp;quot; % year)&lt;br /&gt;             new_orders = _parse_orders(orders_html.read())&lt;br /&gt;             if new_orders:</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>140</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2011-05-11 22:08:57</wp:comment_date_gmt><wp:comment_content>Amazon recently refreshed their site layout, which makes this script break, but an easy fix is changing the user agent to one for Opera, which they&amp;#39;re still serving the old layout to.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>141</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2011-12-28 18:04:06</wp:comment_date_gmt><wp:comment_content>I was wondering how I can use this to create a sales report with my amazon account. Thanks.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Checking RabbitMQ queue size/age with Nagios</title><link>http://chase-seibert.github.com/blog/2011/07/01/checking-rabbitmq-queue-sizeage-with-nagios</link><content:encoded><![CDATA[&lt;p&gt;
For months we were using RabbitMQ (with celery) with no real insight into what was going on inside the queue. Recently, we deployed the &lt;a href="http://www.rabbitmq.com/management.html"&gt;mangement plug-in&lt;/a&gt;, which has a nifty web UI:
&lt;/p&gt;

&lt;img src="https://lh3.googleusercontent.com/-erYc4JHiPgE/Tg4r4RcL_aI/AAAAAAAALeM/yGHvFuBNHtk/s800/overview.png"&gt;

&lt;p&gt;
From there, is seemed like a logical thing to add a Nagios check for. Here is some Python code to do just that.
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
#!/usr/bin/python

from optparse import OptionParser
import urllib2
import json
import pprint
import time
import datetime

def getOptions():
    arguments = OptionParser()
    arguments.add_option("--host", dest="host", help="Host rabbitmq is running on", type="string", default="localhost")
    arguments.add_option("--queue", dest="queue", help="Name of the queue in inspect", type="string", default="celery")
    arguments.add_option("--username", dest="username", help="RabbitMQ API username", type="string", default="rabbitmq")
    arguments.add_option("--password", dest="password", help="RabbitMQ API password", type="string", default="rabbitmq")
    arguments.add_option("--port", dest="port", help="RabbitMQ API port", type="string", default="55672")
    
    arguments.add_option("--warning-queue-size", dest="warn_queue", help="Size of the queue to alert as warning", type="int", default=10000)
    arguments.add_option("--critical-queue-size", dest="crit_queue", help="Size of the queue to alert as critical", type="int", default=20000)

    arguments.add_option("--warning-seconds", dest="warn_seconds", help="Last event processes in seconds ago to alert as warning", type="int", default=3600)
    arguments.add_option("--critical-seconds", dest="crit_seconds", help="Last event processes in seconds ago to alert as critical", type="int", default=14400)
        
    return arguments.parse_args()[0]

if __name__ == '__main__':
    
    options = getOptions()    
    
    url = "http://%s:%s/api/queues/reach/%s" % (options.host, options.port, options.queue)
    
    # handle HTTP Auth
    password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()
    top_level_url = url
    password_mgr.add_password(None, top_level_url, options.username, options.password)
    handler = urllib2.HTTPBasicAuthHandler(password_mgr)
    opener = urllib2.build_opener(handler)    
    
    response = None
    try:
        request = opener.open(url)
        response = request.read()
        request.close()
    except urllib2.HTTPError, e:
        print "Error code %s hitting %s" % (e.code, url)
        exit(1)
        
    data = json.loads(response)
    
    #pp = pprint.PrettyPrinter(indent=4)
    #pp.pprint(data)
    
    num_messages = data.get("messages")
    if num_messages &gt; options.crit_queue or num_messages &gt; options.warn_queue:
        print "%s messages in %s queue" % (num_messages, options.queue)
        exit(1 if num_messages &gt; options.crit_queue else 2) 
    
    message_stats = data.get("message_stats")
    deliver_details = message_stats.get("deliver_details")
    rate = deliver_details.get("rate")
    
    #1309542487 
    #1309548601517    
    last_event = deliver_details.get("last_event") / 1000
    last_event_time = time.ctime(last_event)
    
    #diff = abs(last_event_time - datetime.datetime.today())
    #last_event_time_diff_seconds = diff.seconds + diff.days * 86400
    last_event_time_diff_seconds = abs(last_event - int(time.time()))
    if last_event_time_diff_seconds &gt; options.crit_seconds or last_event_time_diff_seconds &gt; options.warn_seconds:
        print "%s seconds since last event consumed on %s" % (last_event_time_diff_seconds, options.queue)
        exit(1 if last_event_time_diff_seconds &gt; options.crit_seconds else 2)
    
    print "Last event consumed: %s" % last_event_time
&lt;/pre&gt;

&lt;p&gt;
You can run it manually:
&lt;/p&gt;

&lt;pre name="code" class="bash"&gt;
check_rabbitmq --host sched1 --warning-queue-size 100 --critical-queue-size 400 --warning-seconds 600 --critical-seconds 2400
&lt;/pre&gt;

&lt;p&gt;
Or, you can configure Nagios to run it:
&lt;/p&gt;

&lt;pre name="code" class="bash"&gt;
# vim /etc/nagios3/conf.d/services_nagios2.cfg
define command {
        command_name    check_rabbitmq
        command_line    /usr/lib/nagios/plugins/check_rabbitmq --host $HOSTADDRESS$ --queue $ARG1$ --warning-queue-size $ARG2$ --critical-queue-size $ARG3$ --warning-seconds $ARG4$ --critical-seconds $ARG5$
}

define service {
        host_name                       sched1
        service_description             QUEUE
        check_command                   check_rabbitmq!celery!100!400!600!2400
        contact_groups                  pager
        use                             generic-service
        notification_interval           0 ; set &amp;gt; 0 if you want to be renotified
}
&lt;/pre&gt;

&lt;img src="https://lh4.googleusercontent.com/--Q5GTSNNqac/Tg4tIdgAErI/AAAAAAAALeU/GM1BSU7lWOE/s800/Screenshot-Current%252520Network%252520Status%252520-%252520Google%252520Chrome.png"&gt;]]></content:encoded><dsq:thread_identifier>/blog/2011/07/01/checking-rabbitmq-queue-sizeage-with-nagios</dsq:thread_identifier><wp:post_date_gmt>2011-07-01 16:11:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>142</wp:comment_id><wp:comment_author>lynx</wp:comment_author><wp:comment_date_gmt>2011-11-02 17:40:27</wp:comment_date_gmt><wp:comment_content>I&amp;#39;m getting an error when trying to run the command by hand:&lt;br /&gt;&lt;br /&gt;./check_rabbitmq --host san-api01 --warning-queue-size 100 --critical-queue-size 400 --warning-seconds 600 --critical-seconds 2400                                   /etc/nagios/plugins&lt;br /&gt;  File &amp;quot;./check_rabbitmq&amp;quot;, line 56&lt;br /&gt;    exit(1 if num_messages &amp;gt; options.crit_queue else 2) &lt;br /&gt;            ^&lt;br /&gt;SyntaxError: invalid syntax</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment><wp:comment><wp:comment_id>143</wp:comment_id><wp:comment_author>Chase Seibert</wp:comment_author><wp:comment_date_gmt>2011-11-04 15:32:31</wp:comment_date_gmt><wp:comment_content>Likely a python version issue. I&amp;#39;m on 2.7.</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Django CSRF verification failed in IE IFRAME</title><link>http://chase-seibert.github.com/blog/2011/06/17/django-csrf-verification-failed-in-ie-iframe</link><content:encoded><![CDATA[&lt;p&gt;
I ran into an interesting issue with the &lt;a href="https://docs.djangoproject.com/en/dev/ref/contrib/csrf/"&gt;Django's CSRF&lt;/a&gt; (&lt;a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery"&gt;cross site request forgery&lt;/a&gt;) protection this week. Some users were reporting seeing the dreaded "CSRF verification failed. Request aborted." error trying to submit a particular form. Unable to reproduce the issue myself, we finally learned that this was happening when coming from LinkedIn.
&lt;/p&gt;

&lt;img src="https://lh4.googleusercontent.com/-xdk2BwkOlFU/Tft1624pJGI/AAAAAAAALdw/oYl3KUxBiLo/s800/Screenshot-Now%252520Hiring%25253A%252520Sr.%252520Database%252520Analyst%252520in%252520Redwood%252520City%25252C%252520CA%252520%25257C%252520Share%252520on%252520LinkedIn%252520-%252520Mozilla%252520Firefox.png" alt="Forbidden. CSRF verification failed. Request aborted."/&gt;

&lt;p&gt;
Digging deeper, it turns out only to happen in IE (6/7/8/9), and only in an IFRAME, like the one LinkedIn is using for their framebar. After some research, it was revealed that IE6 added a &lt;a href="http://msdn.microsoft.com/en-us/library/ms537343.aspx"&gt;security feature&lt;/a&gt; to block all &lt;a href="http://en.wikipedia.org/wiki/HTTP_cookie#Privacy_and_third-party_cookies"&gt;third party cookies&lt;/a&gt; by default, which includes any pages in an IFRAME on a different domain than the top level parent. There are a few options for work-arounds.
&lt;/p&gt;

&lt;h3&gt;Work around #1: Framebusting&lt;/h3&gt;

&lt;p&gt;
You can use javascript to "break out" of the IFRAME, essentially replacing the top level window with yourself. There are various techniques, but I like the simple:
&lt;/p&gt;

&lt;pre name="code" class="javascript"&gt;if(top != self) top.location.replace(location);
&lt;/pre&gt;

&lt;p&gt;
However, this won't work if you want to allow IFRAMEs in somecases, say from your own domain(s). The code could quickly become brittle if you were to hard-code a whitelist of development/demo/qa/prod domains, or weak if you hard-code a blacklist. Also, it's fairly easy to intentionally break a frame buster. In the end, if you get into an &lt;a href="http://stackoverflow.com/questions/958997/frame-buster-buster-buster-code-needed"&gt;arms race&lt;/a&gt; with a framer, &lt;a href="http://www.codinghorror.com/blog/2009/06/we-done-been-framed.html"&gt;you will lose&lt;/a&gt;.
&lt;/p&gt;

&lt;h3&gt;Work around #2: x-frame-options&lt;/h3&gt;

&lt;p&gt;
Newer browsers actually have a mechanism to dis-allow framing your site all together, via the &lt;a href="https://developer.mozilla.org/en/the_x-frame-options_response_header"&gt;x-frame-options HTTP header&lt;/a&gt;. This is great, but only works on newish browsers, and is somewhat coarsely grained. You can only make an exception for same domain IFRAMEs, not arbitrary domains. Also, the user experience kind of blows; it looks like an error to the end-user.
&lt;/p&gt;

&lt;img src='https://lh6.googleusercontent.com/-_XPiDYZZcYg/TTnPz7ol06I/AAAAAAAALaU/f9ABuJQyrsA/s800/x-frame-options.png'&gt;

&lt;br&gt;&lt;br&gt;

&lt;h3&gt;Work around #3: P3P&lt;/h3&gt;

&lt;p&gt;
You can send a HTTP header to tell the browser to allow third-party cookies in this instance. This uses the &lt;a href="http://www.w3.org/P3P/"&gt;P3P standard&lt;/a&gt;. However, it should be noted that you're essentially making legally binding claims about how you handle user data. For example, the smallest change you can make that will notify IE to allow third-party by default is:
&lt;/p&gt;

&lt;pre name="code" class="bash"&gt;
vim /etc/apache2/sites-available/default

# add the following
Header append P3P "CP=\"CAO PSA OUR\""

ln -s /etc/apache2/mods-available/headers.load /etc/apache2/mods-enabled/headers.load
service apache2 restart
&lt;/pre&gt;

&lt;p&gt;
Here is a quick rundown of what &lt;a href="http://www.p3pwriter.com/LRN_111.asp"&gt;legal claims&lt;/a&gt; you're making in this case.
&lt;ul&gt;
&lt;li&gt;CAO - Identified Contact Information and Other Identified Data: access is given to identified online and physical contact information as well as to certain other identified data.&lt;/li&gt;
&lt;li&gt;PSA - Information may be used to create or build a record of a particular individual or computer that is tied to a pseudonymous identifier, without tying identified data.&lt;/li&gt;
&lt;li&gt;OUR - Ourselves and/or entities acting as our agents or entities for whom we are acting as an agent (can access the data).&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;h3&gt;Work around #4: Custom CSRF error page&lt;/h3&gt;

&lt;p&gt;
This isn't really a work-around, and should probably be done anyway. But Django gives you the ability to define a &lt;a href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-CSRF_FAILURE_VIEW"&gt;custom error page&lt;/a&gt; for CSRF validation errors, where could could tell the user what the problem is, and maybe have them to a manual frame break.
&lt;/p&gt;]]></content:encoded><dsq:thread_identifier>/blog/2011/06/17/django-csrf-verification-failed-in-ie-iframe</dsq:thread_identifier><wp:post_date_gmt>2011-06-17 11:37:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>144</wp:comment_id><wp:comment_author>akaihola</wp:comment_author><wp:comment_date_gmt>2011-11-03 03:18:22</wp:comment_date_gmt><wp:comment_content>Thanks for the detailed explanation!&lt;br /&gt;&lt;br /&gt;A fifth option would be to use the @exempt_csrf decorator for that particular form.&lt;br /&gt;&lt;br /&gt;I added a link to your page at http://stackoverflow.com/questions/7441889/csrf-verfication-failed-but-only-with-ie9/7991359#7991359</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Creating large XML files in Python with saxutils</title><link>http://chase-seibert.github.com/blog/2011/06/24/creating-large-xml-files-in-python-with-saxutils</link><content:encoded><![CDATA[&lt;p&gt;
In the past, when I needed to produce an XML file problematically, I typically turned to templating engines. Something like the following example in Django templates:
&lt;/p&gt;

&lt;pre name="code" class="html"&gt;
&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;
&amp;lt;jobs&amp;gt;
    {% for job in jobs %}
        {% with job.user|get_profile as profile %}
      &amp;lt;job&amp;gt;
          &amp;lt;title&amp;gt;{{ job.title|xml_escape }}&amp;lt;/title&amp;gt;
          &amp;lt;job-board-name&amp;gt;{{ 'JOB_FEED_SITE_NAME'|setting }}&amp;lt;/job-board-name&amp;gt;
          &amp;lt;job-board-url&amp;gt;{{ 'SITE_URL_NO_SLASH'|setting }}&amp;lt;/job-board-url&amp;gt;
          &amp;lt;job-code&amp;gt;job{{ job.id }}&amp;lt;/job-code&amp;gt;
          &amp;lt;detail-url&amp;gt;{{ 'SITE_URL_NO_SLASH'|setting}}{% url job job.id job.slug %}{{ 'simplyhired.com'|campaign_tracking }}&amp;lt;/detail-url&amp;gt;

...
&lt;/pre&gt;

&lt;p&gt;
You get the idea. Once you start including free text data from real users, you pretty quickly run into issues with invalid XML. Typically, you need some combination of escaping (like &lt;a href="http://docs.python.org/library/xml.sax.utils.html"&gt;saxutils.escape&lt;/a&gt;) and stripping (for control character that are illegal in XML). For whatever reason, it's pretty common for the XML parsers themselves not to give you the tools you need to produce valid XML from imperfect data. You can counter this with a XML cleaning library such as &lt;a href="http://sourceforge.net/projects/foursuite/"&gt;4Suite&lt;/a&gt;, or &lt;a href="/2011/05/stripping-control-characters-in-python.html"&gt;write your own&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
This solution is inelegant, but it works. However, if you need to produce very large XML files, you will run into memory constraints. Unless your templating engine has the ability to stream the file contents to disk, which &lt;a href="https://code.djangoproject.com/ticket/13910"&gt;Django's doesn't&lt;/a&gt;, you'll be storing all that XML in memory before it can be written. This can lead to hours of XML composing followed by an out of memory exception, with nothing writing to disk.
&lt;/p&gt;

&lt;p&gt;
Using an XML parser to actually compose XML is much more robust, even if the code is somewhat less straight forward. You could use a DOM parser, but that wouldn't solve your memory issue; the whole XML document must still be kept in memory before it can be written. Instead, you can use a &lt;a href="http://en.wikipedia.org/wiki/Simple_API_for_XML#XML_processing_with_SAX"&gt;SAX parser&lt;/a&gt;, which is explicitly designed for streaming. 
&lt;/p&gt;

&lt;p&gt;
Python ships with saxutils, which is very capable, if a bit verbose to use as an API. Here is a quick abstraction for simple nested tags without attributes, which is a common pattern.
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
from xml.sax.saxutils import XMLGenerator
from xml.sax.xmlreader import AttributesNSImpl
from website.helpers import xml_helper
import types
from django.utils.encoding import smart_str, force_unicode
from xml.sax import saxutils   
    
def strip_illegal_xml_characters(input):
    
    if input:
            
        import re
        
        # unicode invalid characters
        RE_XML_ILLEGAL = u'([\u0000-\u0008\u000b-\u000c\u000e-\u001f\ufffe-\uffff])' + \
                         u'|' + \
                         u'([%s-%s][^%s-%s])|([^%s-%s][%s-%s])|([%s-%s]$)|(^[%s-%s])' % \
                          (unichr(0xd800),unichr(0xdbff),unichr(0xdc00),unichr(0xdfff),
                           unichr(0xd800),unichr(0xdbff),unichr(0xdc00),unichr(0xdfff),
                           unichr(0xd800),unichr(0xdbff),unichr(0xdc00),unichr(0xdfff),
                           )
        input = re.sub(RE_XML_ILLEGAL, "", input)
                        
        # ascii control characters
        input = re.sub(r"[\x01-\x1F\x7F]", "", input)
            
    return input

def escape_xml(value):
    return strip_illegal_xml_characters(force_unicode(smart_str(value))) 

class SimpleSaxWriter():
    
    def __init__(self, output, encoding, top_level_tag=u"jobs"):
        logger = XMLGenerator(output, encoding)
        logger.startDocument()
        attrs = AttributesNSImpl({}, {})
        logger.startElementNS((None, top_level_tag), top_level_tag, attrs)        
        self._logger = logger
        self.top_level_tag = top_level_tag
        
    def start_tag(self, name):                
        attrs = AttributesNSImpl({}, {})
        self._logger.startElementNS((None, name), name, attrs)

    def end_tag(self, name):                
        self._logger.endElementNS((None, name), name)
        
    def simple_tag(self, name, contents):
        
        if contents:
            
            if not isinstance(contents, types.UnicodeType):
                raise TypeError("XML character data must be passed in as a unicode object")
                    
            self.start_tag(name)
            # saxutils will let invalid XML though, left to it's own devices
            self._logger.characters(escape_xml(contents))                                    
            self.end_tag(name)
                
    def write_entry(self, level, msg):
        raise NotImplementedError()

    def close(self):
        self._logger.endElementNS((None, self.top_level_tag), self.top_level_tag)
        self._logger.endDocument()
        return
&lt;/pre&gt;

&lt;p&gt;
Given that framework, an implementing class might look like:
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;
class JobWriter(SimpleSaxWriter):        
    
    def write_entry(self, level, job):
        
        from website.helpers.tags import label
        from website import helpers
        
        self.start_tag("job")
        
        self.simple_tag("title", job.title)
        self.simple_tag("job-board-name", unicode(settings.JOB_FEED_SITE_NAME))

 ...
        
        self.start_tag("description")        
        self.simple_tag("summary", job.description_plaintext)
        self.end_tag("description")

 ...
&lt;/pre&gt;

&lt;p&gt;
To actually write to disk, you need to pass in a file. Notice that I'm using mode "wb", because saxutils will produce a byte stream, and that I'm NOT passing an encoding, even though I'm dealing with UTF-8 data. That's because Python will &lt;a href="http://stackoverflow.com/questions/934160/write-to-utf-8-file-in-python"&gt;guess wrong&lt;/a&gt; in that case, and try to output ASCII.
&lt;/p&gt;

&lt;pre name="code" class="python"&gt;    
    file = codecs.open("test.xml", mode="wb")
    feed = JobWriter(file, "UTF-8")
    for job in jobs: # just a list of objects from Django's orm, could be anything
        feed.write_entry(2, job)
    feed.close()
    file.close()
&lt;/pre&gt;]]></content:encoded><dsq:thread_identifier>/blog/2011/06/24/creating-large-xml-files-in-python-with-saxutils</dsq:thread_identifier><wp:post_date_gmt>2011-06-24 14:54:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>145</wp:comment_id><wp:comment_author>Siberiano</wp:comment_author><wp:comment_date_gmt>2012-03-19 08:19:20</wp:comment_date_gmt><wp:comment_content>Hehe, I did the same and followed your way of thought: from using Django template engine to XML generators. Was a useful read, thanks!</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item><item><title>re: Finding open VNC hosts with nmap</title><link>http://chase-seibert.github.com/blog/2009/12/29/finding-open-vnc-hosts-with-nmap</link><content:encoded><![CDATA[&lt;p&gt;
Say you have a machine using DHCP that you only boot up once in a while. It's headless, so you need to remote into it. How can you find out what IP it has? Here is quick command to scan for open VNC ports on the 172.27.1.* sub-net.
&lt;/p&gt;

&lt;pre&gt;
nmap -p 5900 172.27.1.0/24 --open |grep Interesting
&lt;/pre&gt;]]></content:encoded><dsq:thread_identifier>/blog/2009/12/29/finding-open-vnc-hosts-with-nmap</dsq:thread_identifier><wp:post_date_gmt>2009-12-29 09:37:00</wp:post_date_gmt><wp:comment_status>open</wp:comment_status><wp:comment><wp:comment_id>146</wp:comment_id><wp:comment_author>Anonymous</wp:comment_author><wp:comment_date_gmt>2011-06-30 13:19:10</wp:comment_date_gmt><wp:comment_content>Thanks</wp:comment_content><wp:comment_approved>1</wp:comment_approved><wp:comment_parent>0</wp:comment_parent></wp:comment></item></channel></rss>